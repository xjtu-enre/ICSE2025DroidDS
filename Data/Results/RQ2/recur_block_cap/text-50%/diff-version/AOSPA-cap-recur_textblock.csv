id,merge_commitid,recurBlockSrc,file,Loc_details,block_text_1,block_text_2,recur_segment,proportion
1,"['0d68733d6363c270aed49b9be40c2b8ca41c3c52', '0d68733d6363c270aed49b9be40c2b8ca41c3c52']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",services/usb/java/com/android/server/usb/UsbDeviceManager.java,"[(1505, 1509, 5), (1505, 1509, 5)]","                functions = SystemProperties.get(getPersistProp(true),
                            UsbManager.USB_FUNCTION_NONE);

                if (functions.equals(UsbManager.USB_FUNCTION_NONE))
                    functions = getChargingFunctions();
","                functions = SystemProperties.get(getPersistProp(true),
                            UsbManager.USB_FUNCTION_NONE);

                if (functions.equals(UsbManager.USB_FUNCTION_NONE))
                    functions = getChargingFunctions();
","                functions = SystemProperties.get(getPersistProp(true),
                            UsbManager.USB_FUNCTION_NONE);

                if (functions.equals(UsbManager.USB_FUNCTION_NONE))
                    functions = getChargingFunctions();
","[1.0, 1.0]"
2,"['1581c348fc5d6cbf1673b3dbc5960637f891d488', '62f4dee264cabcd5595e6e4c0a6ab3228281d3e0']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/am/ActiveServices.java,"[(2547, 2552, 6), (3198, 3204, 7)]","                    r.app = null;
                    if (SERVICE_RESCHEDULE && DEBUG_DELAYED_SERVICE) {
                    Slog.w(TAG, "" Failed to create Service !!!! .""
                           +""This will introduce huge delay...  ""
                           +r.shortName + "" in "" + r.restartDelay + ""ms"");
                    }
","                    app.services.remove(r);
                    r.app = null;
                    if (SERVICE_RESCHEDULE && DEBUG_DELAYED_SERVICE) {
                    Slog.w(TAG, "" Failed to create Service !!!! .""
                           +""This will introduce huge delay...  ""
                           +r.shortInstanceName + "" in "" + r.restartDelay + ""ms"");
                    }
","                    r.app = null;
                    if (SERVICE_RESCHEDULE && DEBUG_DELAYED_SERVICE) {
                    Slog.w(TAG, "" Failed to create Service !!!! .""
                           +""This will introduce huge delay...  ""
                           +r.short","[0.815, 0.705]"
3,"['1581c348fc5d6cbf1673b3dbc5960637f891d488', '8faa0d981413f18b2468dde1b1fe71e248df0df1']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/Watchdog.java,"[(52, 52, 1), (56, 56, 1)]","import java.io.BufferedReader;
","import java.io.BufferedReader;
","import java.io.BufferedReader;
","[1.0, 1.0]"
4,"['1581c348fc5d6cbf1673b3dbc5960637f891d488', '337095f9d277c566cb888bc3adbac16576f1ae70']","['aospa-quartz-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/am/ActiveServices.java,"[(2547, 2552, 6), (3626, 3632, 7)]","                    r.app = null;
                    if (SERVICE_RESCHEDULE && DEBUG_DELAYED_SERVICE) {
                    Slog.w(TAG, "" Failed to create Service !!!! .""
                           +""This will introduce huge delay...  ""
                           +r.shortName + "" in "" + r.restartDelay + ""ms"");
                    }
","                    app.stopService(r);
                    r.app = null;
                    if (SERVICE_RESCHEDULE && DEBUG_DELAYED_SERVICE) {
                    Slog.w(TAG, "" Failed to create Service !!!! .""
                           +""This will introduce huge delay...  ""
                           +r.shortInstanceName + "" in "" + r.restartDelay + ""ms"");
                    }
","                    r.app = null;
                    if (SERVICE_RESCHEDULE && DEBUG_DELAYED_SERVICE) {
                    Slog.w(TAG, "" Failed to create Service !!!! .""
                           +""This will introduce huge delay...  ""
                           +r.short","[0.815, 0.713]"
5,"['1730c08a2fd38f0ff8135692a855ada865130939', '4e4914b22b779e6376bb00ae20636175b2a70d8c']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java,"[(153, 153, 1), (144, 144, 1)]","    private static final int MSG_LOCALE_CHANGED = 500;
","    private static final int MSG_LOCALE_CHANGED = 500;
","    private static final int MSG_LOCALE_CHANGED = 500;
","[1.0, 1.0]"
6,"['188a21cc8ac704f36fd3f2984b4da86307ab7949', 'fa63f69f0fdfc50fe92caa22dbe1b4b120807ed2']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java,"[(868, 868, 1), (900, 900, 1)]","        pw.println(""  mFiveGState="" + mFiveGState + "","");
","        pw.println(""  mFiveGState="" + mFiveGState + "","");
","        pw.println(""  mFiveGState="" + mFiveGState + "","");
","[1.0, 1.0]"
7,"['2775a5a9b030266a910301e8b464811acafcd5fa', '18970c4d9d55a44040fe6fb762dac93a077c64b5']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/java/com/android/server/SystemServer.java,"[(1382, 1417, 36), (1398, 1426, 29)]","            traceBeginAndSlog(""StartNetworkStack"");
            try {
                NetworkStackClient.getInstance().start(context);
            } catch (Throwable e) {
                reportWtf(""starting Network Stack"", e);
            }
            traceEnd();

            if (enableWigig) {
                try {
                    Slog.i(TAG, ""Wigig Service"");
                    String wigigClassPath =
                        ""/system/framework/wigig-service.jar"" + "":"" +
                        ""/system/product/framework/vendor.qti.hardware.wigig.supptunnel-V1.0-java.jar"" + "":"" +
                        ""/system/product/framework/vendor.qti.hardware.wigig.netperftuner-V1.0-java.jar"" + "":"" +
                        ""/system/product/framework/vendor.qti.hardware.capabilityconfigstore-V1.0-java.jar"";
                    PathClassLoader wigigClassLoader =
                            new PathClassLoader(wigigClassPath, getClass().getClassLoader());
                    Class wigigP2pClass = wigigClassLoader.loadClass(
                        ""com.qualcomm.qti.server.wigig.p2p.WigigP2pServiceImpl"");
                    Constructor<Class> ctor = wigigP2pClass.getConstructor(Context.class);
                    wigigP2pService = ctor.newInstance(context);
                    Slog.i(TAG, ""Successfully loaded WigigP2pServiceImpl class"");
                    ServiceManager.addService(""wigigp2p"", (IBinder) wigigP2pService);

                    Class wigigClass = wigigClassLoader.loadClass(
                        ""com.qualcomm.qti.server.wigig.WigigService"");
                    ctor = wigigClass.getConstructor(Context.class);
                    wigigService = ctor.newInstance(context);
                    Slog.i(TAG, ""Successfully loaded WigigService class"");
                    ServiceManager.addService(""wigig"", (IBinder) wigigService);
                } catch (Throwable e) {
                    reportWtf(""starting WigigService"", e);
                }
            }

","            if (enableWigig) {
                try {
                    Slog.i(TAG, ""Wigig Service"");
                    String wigigClassPath =
                        ""/system/framework/wigig-service.jar"" + "":"" +
                        ""/system/product/framework/vendor.qti.hardware.wigig.supptunnel-V1.0-java.jar"" + "":"" +
                        ""/system/product/framework/vendor.qti.hardware.wigig.netperftuner-V1.0-java.jar"" + "":"" +
                        ""/system/product/framework/vendor.qti.hardware.capabilityconfigstore-V1.0-java.jar"";
                    PathClassLoader wigigClassLoader =
                            new PathClassLoader(wigigClassPath, getClass().getClassLoader());
                    Class wigigP2pClass = wigigClassLoader.loadClass(
                        ""com.qualcomm.qti.server.wigig.p2p.WigigP2pServiceImpl"");
                    Constructor<Class> ctor = wigigP2pClass.getConstructor(Context.class);
                    wigigP2pService = ctor.newInstance(context);
                    Slog.i(TAG, ""Successfully loaded WigigP2pServiceImpl class"");
                    ServiceManager.addService(""wigigp2p"", (IBinder) wigigP2pService);

                    Class wigigClass = wigigClassLoader.loadClass(
                        ""com.qualcomm.qti.server.wigig.WigigService"");
                    ctor = wigigClass.getConstructor(Context.class);
                    wigigService = ctor.newInstance(context);
                    Slog.i(TAG, ""Successfully loaded WigigService class"");
                    ServiceManager.addService(""wigig"", (IBinder) wigigService);
                } catch (Throwable e) {
                    reportWtf(""starting WigigService"", e);
                }
            }

            traceBeginAndSlog(""StartNsdService"");
","            if (enableWigig) {
                try {
                    Slog.i(TAG, ""Wigig Service"");
                    String wigigClassPath =
                        ""/system/framework/wigig-service.jar"" + "":"" +
                        ""/system/product/framework/vendor.qti.hardware.wigig.supptunnel-V1.0-java.jar"" + "":"" +
                        ""/system/product/framework/vendor.qti.hardware.wigig.netperftuner-V1.0-java.jar"" + "":"" +
                        ""/system/product/framework/vendor.qti.hardware.capabilityconfigstore-V1.0-java.jar"";
                    PathClassLoader wigigClassLoader =
                            new PathClassLoader(wigigClassPath, getClass().getClassLoader());
                    Class wigigP2pClass = wigigClassLoader.loadClass(
                        ""com.qualcomm.qti.server.wigig.p2p.WigigP2pServiceImpl"");
                    Constructor<Class> ctor = wigigP2pClass.getConstructor(Context.class);
                    wigigP2pService = ctor.newInstance(context);
                    Slog.i(TAG, ""Successfully loaded WigigP2pServiceImpl class"");
                    ServiceManager.addService(""wigigp2p"", (IBinder) wigigP2pService);

                    Class wigigClass = wigigClassLoader.loadClass(
                        ""com.qualcomm.qti.server.wigig.WigigService"");
                    ctor = wigigClass.getConstructor(Context.class);
                    wigigService = ctor.newInstance(context);
                    Slog.i(TAG, ""Successfully loaded WigigService class"");
                    ServiceManager.addService(""wigig"", (IBinder) wigigService);
                } catch (Throwable e) {
                    reportWtf(""starting WigigService"", e);
                }
            }

","[0.867, 0.972]"
8,"['2775a5a9b030266a910301e8b464811acafcd5fa', 'af02bd5317cc0cced0a7646d5bbf407a181dda9c']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",location/java/android/location/LocationManager.java,"[(1148, 1149, 2), (1648, 1649, 2)]","            PendingIntent intent) {
        android.util.SeempLog.record(45);
","        android.util.SeempLog.record(45);
        checkPendingIntent(intent);
","        android.util.SeempLog.record(45);
","[0.538, 0.538]"
9,"['2775a5a9b030266a910301e8b464811acafcd5fa', 'af02bd5317cc0cced0a7646d5bbf407a181dda9c']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",packages/SystemUI/tests/src/com/android/systemui/statusbar/policy/NetworkControllerBaseTest.java,"[(343, 344, 2), (416, 417, 2)]","                    ArgumentCaptor.forClass(Integer.class).capture(),
                    anyString(), anyString(), anyBoolean(), anyInt(), anyBoolean());
","                    ArgumentCaptor.forClass(Integer.class).capture(),
                    anyString(), anyString(), anyBoolean(), anyInt(), anyBoolean());
","                    ArgumentCaptor.forClass(Integer.class).capture(),
                    anyString(), anyString(), anyBoolean(), anyInt(), anyBoolean());
","[1.0, 1.0]"
10,"['2775a5a9b030266a910301e8b464811acafcd5fa', 'af02bd5317cc0cced0a7646d5bbf407a181dda9c']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",packages/SystemUI/tests/src/com/android/systemui/statusbar/policy/NetworkControllerBaseTest.java,"[(343, 344, 2), (450, 452, 3)]","                    ArgumentCaptor.forClass(Integer.class).capture(),
                    anyString(), anyString(), anyBoolean(), anyInt(), anyBoolean());
","                ArgumentCaptor.forClass(Integer.class).capture(),
                anyString(), anyString(), anyBoolean(),
                anyInt(), eq(roaming));
","                ArgumentCaptor.forClass(Integer.class).capture(),
                ","[0.529, 0.506]"
11,"['2775a5a9b030266a910301e8b464811acafcd5fa', 'bb9ded46832af38a453b78b92ad2de32ef1cf845']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/audio/AudioService.java,"[(3357, 3359, 3), (4018, 4020, 3)]","        Log.i(TAG, ""In setSpeakerphoneOn(), on: "" + on + "", eventSource: "" + eventSource);

        mDeviceBroker.setSpeakerphoneOn(on, eventSource);
","        Log.i(TAG, ""In setSpeakerphoneOn(), on: "" + on + "", eventSource: "" + eventSource);

        final boolean stateChanged = mDeviceBroker.setSpeakerphoneOn(on, eventSource);
","        Log.i(TAG, ""In setSpeakerphoneOn(), on: "" + on + "", eventSource: "" + eventSource);

        ","[0.667, 0.559]"
12,"['2775a5a9b030266a910301e8b464811acafcd5fa', '449f659b21d039b8692602294b040038ac1e6ccb']","['aospa-quartz-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/audio/AudioService.java,"[(3357, 3359, 3), (4401, 4403, 3)]","        Log.i(TAG, ""In setSpeakerphoneOn(), on: "" + on + "", eventSource: "" + eventSource);

        mDeviceBroker.setSpeakerphoneOn(on, eventSource);
","        Log.i(TAG, ""In setSpeakerphoneOn(), on: "" + on + "", eventSource: "" + eventSource);

        final boolean stateChanged = mDeviceBroker.setSpeakerphoneOn(cb, pid, on, eventSource);
","        Log.i(TAG, ""In setSpeakerphoneOn(), on: "" + on + "", eventSource: "" + eventSource);

        ","[0.667, 0.532]"
13,"['2775a5a9b030266a910301e8b464811acafcd5fa', 'e85435d4d9a2f7122bd5c97ad0a25c768d124a0e']","['aospa-quartz-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/am/ActivityManagerService.java,"[(313, 313, 1), (308, 308, 1)]","import com.android.internal.app.ActivityTrigger;
","import com.android.internal.app.ActivityTrigger;
","import com.android.internal.app.ActivityTrigger;
","[1.0, 1.0]"
14,"['2775a5a9b030266a910301e8b464811acafcd5fa', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(281, 724, 444), (255, 661, 407)]","            R.string.data_connection_5g,
            TelephonyIcons.ICON_5G,
            false);

    static final MobileIconGroup FIVE_G_BASIC = new MobileIconGroup(
            ""5GBasic"",
            null,
            null,
            AccessibilityContentDescriptions.PHONE_SIGNAL_STRENGTH,
            0, 0,
            0,
            0,
            AccessibilityContentDescriptions.PHONE_SIGNAL_STRENGTH[0],
            R.string.data_connection_5g_basic,
            TelephonyIcons.ICON_5G_BASIC,
            false);

    static final MobileIconGroup FIVE_G_UWB = new MobileIconGroup(
            ""5GUWB"",
            null,
            null,
            AccessibilityContentDescriptions.PHONE_SIGNAL_STRENGTH,
            0, 0,
            0,
            0,
            AccessibilityContentDescriptions.PHONE_SIGNAL_STRENGTH[0],
            R.string.data_connection_5g_uwb,
            TelephonyIcons.ICON_5G_UWB,
            false);

    static final MobileIconGroup FIVE_G_SA = new MobileIconGroup(
            ""5GSA"",
            null,
            null,
            AccessibilityContentDescriptions.PHONE_SIGNAL_STRENGTH,
            0, 0,
            0,
            0,
            AccessibilityContentDescriptions.PHONE_SIGNAL_STRENGTH[0],
            R.string.data_connection_5g_sa,
            TelephonyIcons.ICON_5G_SA,
            false);

    static final int DATA_TYPE_UNKNOWN = 0;
    static final int DATA_TYPE_G = 1;
    static final int DATA_TYPE_E = 2;
    static final int DATA_TYPE_2G = 3;
    static final int DATA_TYPE_3G = 4;
    static final int DATA_TYPE_4G = 5;
    static final int DATA_TYPE_H = 6;
    static final int DATA_TYPE_HP = 7;
    static final int DATA_TYPE_1X = 8;
    static final int DATA_TYPE_LTE = 9;
    static final int DATA_TYPE_4G_PLUS = 10;

    static final int SIGNAL_STRENGTH_TYPE_G = 0;
    static final int SIGNAL_STRENGTH_TYPE_E = 1;
    static final int SIGNAL_STRENGTH_TYPE_3G = 2;
    static final int SIGNAL_STRENGTH_TYPE_4G = 3;
    static final int SIGNAL_STRENGTH_TYPE_H = 4;
    static final int SIGNAL_STRENGTH_TYPE_HP = 5;
    static final int SIGNAL_STRENGTH_TYPE_1X = 6;
    static final int SIGNAL_STRENGTH_TYPE_CDMA = 7;
    static final int SIGNAL_STRENGTH_TYPE_UMTS = 8;
    static final int SIGNAL_STRENGTH_TYPE_4G_PLUS = 9;

    static final int DEFAULT_SUB = 0;
    static final int INET_TYPE_NUM = 2;
    static final int SIGNAL_LEVEL_NUM = SignalStrength.NUM_SIGNAL_STRENGTH_BINS;
    static final String TAG = ""TelephonyIcons"";
    static final String NS = ""com.android.systemui"";
    static final boolean DEBUG = Log.isLoggable(TAG, Log.DEBUG);;

    static String[] mDataTypeArray, mDataTypeGenerationArray;
    static String[] mDataTypeDescriptionArray, mDataTypeGenerationDescArray;
    static String[] mDataActivityArray;
    static String[] mSignalStrengthArray, mSignalStrengthRoamingArray;
    static String[] mSignalNullArray;
    static String[] mSignalStrengthDesc;

    static int[] mSelectedDataTypeIcon;
    static int[] mSelectedQSDataTypeIcon;
    static String[] mSelectedDataTypeDesc;
    static int[] mSelectedDataActivityIndex;
    static int[] mSelectedSignalStreagthIndex;
    static SparseArray<Integer> mStacked2SingleIconLookup;

    private static Resources mRes;
    private static boolean isInitiated = false;

    static void readIconsFromXml(Context context) {
        if (isInitiated) {
            log(TAG, ""readIconsFromXml, already read!"");
            return;
        }

        mRes = context.getResources();
        try {
            mDataTypeArray = mRes.getStringArray(R.array.multi_data_type);
            mDataTypeDescriptionArray = mRes.getStringArray(
                    R.array.telephony_data_type_description);
            mDataTypeGenerationArray = mRes.getStringArray(
                    R.array.telephony_data_type_generation);
            mDataTypeGenerationDescArray = mRes.getStringArray(
                    R.array.telephony_data_type_generation_description);
            mDataActivityArray = mRes.getStringArray(R.array.multi_data_activity);
            mSignalStrengthArray = mRes.getStringArray(R.array.multi_signal_strength);
            mSignalStrengthRoamingArray = mRes.getStringArray(
                    R.array.multi_signal_strength_roaming);
            mSignalNullArray = mRes.getStringArray(R.array.multi_signal_null);
            mSignalStrengthDesc = mRes.getStringArray(R.array.signal_strength_description);
            initStacked2SingleIconLookup();
        } catch (android.content.res.Resources.NotFoundException e) {
            isInitiated = false;
            log(TAG, ""readIconsFromXml, exception happened: "" + e);
            return;
        }

        if (mSelectedDataTypeIcon == null
                && mDataTypeArray.length != 0) {
            mSelectedDataTypeIcon = new int[mDataTypeArray.length];
        }
        if (mSelectedQSDataTypeIcon == null
                && mDataTypeArray.length != 0) {
            mSelectedQSDataTypeIcon = new int[mDataTypeArray.length];
        }
        if (mSelectedDataTypeDesc == null
                && mDataTypeArray.length != 0) {
            mSelectedDataTypeDesc = new String[mDataTypeArray.length];
        }
        if (mSelectedDataActivityIndex == null
                && mDataActivityArray.length != 0) {
            mSelectedDataActivityIndex = new int[mDataActivityArray.length];
        }
        if (mSelectedSignalStreagthIndex == null
                && mSignalStrengthArray.length != 0) {
            mSelectedSignalStreagthIndex = new int[mSignalStrengthArray.length];
        }
        isInitiated = true;
    }

    static void initStacked2SingleIconLookup() {
        mStacked2SingleIconLookup = new SparseArray<>();
        TypedArray stackedIcons = mRes.obtainTypedArray(R.array.stacked_signal_icons);
        TypedArray singleIcons = mRes.obtainTypedArray(R.array.single_signal_icons);

        mStacked2SingleIconLookup.clear();
        for (int i = 0; i < stackedIcons.length() && i < singleIcons.length(); i++) {
            mStacked2SingleIconLookup.put(stackedIcons.getResourceId(i,0),
                    singleIcons.getResourceId(i,0));
        }
        stackedIcons.recycle();
        singleIcons.recycle();
        log(TAG, ""initStacked2SingleIconLookup: size="" + mStacked2SingleIconLookup.size());
    }

    static int getSignalNullIcon(int slot) {
        if (mSignalNullArray == null) {
            return 0;
        }
        String resName = mSignalNullArray[slot];
        log(TAG, ""null signal icon name: "" + resName);
        int resId = mRes.getIdentifier(resName, null, NS);
        return resId;
    }

    static void updateDataType(int slot, int type, boolean showAtLeast3G,
                               boolean show4GforLte, boolean hspaDistinguishable, int inet) {
        log(TAG, ""updateDataType ""
                + String.format(""slot=%d, type=%d, inetCondition=%d"",
                slot, type, inet)
                + "" showAtLeast3G="" + String.valueOf(showAtLeast3G)
                + "" show4GforLte="" + String.valueOf(show4GforLte)
                + "" hspaDistinguishable="" + String.valueOf(hspaDistinguishable));

        String resName = mDataTypeArray[slot];
        int resId = mRes.getIdentifier(resName, null, NS);
        String[] dataTypeArray = mRes.getStringArray(resId);

        log(TAG, ""data type item name: "" + resName + "" id:"" + resId);

        switch (type) {
            case TelephonyManager.NETWORK_TYPE_UNKNOWN:
                if (!showAtLeast3G) {
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = 0;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedDataActivityIndex[slot] = 0;
                    mSelectedSignalStreagthIndex[slot] = 0;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_EDGE:
                if (!showAtLeast3G) {
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_E;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_E;
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_E;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_UMTS:
            case TelephonyManager.NETWORK_TYPE_TD_SCDMA:
                mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                        dataTypeArray[type], null, NS);
                mSelectedQSDataTypeIcon[slot] = ICON_3G;
                mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_UMTS;
                break;
            case TelephonyManager.NETWORK_TYPE_HSDPA:
            case TelephonyManager.NETWORK_TYPE_HSUPA:
            case TelephonyManager.NETWORK_TYPE_HSPA:
                if (hspaDistinguishable) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_H;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_H;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_H;
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[0], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_3G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[0];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                }
                break;
            case TelephonyManager.NETWORK_TYPE_HSPAP:
                if (hspaDistinguishable) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_HP;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_H;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_HP;
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[0], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_3G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[0];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                }
                break;
            case TelephonyManager.NETWORK_TYPE_CDMA:
                if (!showAtLeast3G) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_1X;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_1X;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_CDMA;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_1xRTT:
                if (!showAtLeast3G) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_1X;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_1X;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_1X;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_EVDO_0: //fall through
            case TelephonyManager.NETWORK_TYPE_EVDO_A:
            case TelephonyManager.NETWORK_TYPE_EVDO_B:
            case TelephonyManager.NETWORK_TYPE_EHRPD:
                mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                        dataTypeArray[type], null, NS);
                mSelectedQSDataTypeIcon[slot] = ICON_3G;
                mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                break;
            case TelephonyManager.NETWORK_TYPE_LTE:
            case TelephonyManager.NETWORK_TYPE_LTE_CA:
                if (show4GforLte) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_4G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[1], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_4G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[1];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_4G;

                    if ( type == TelephonyManager.NETWORK_TYPE_LTE_CA) {
                        //Select 4G+ icon.
                        mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                                mDataTypeGenerationArray[2], null, NS);
                        mSelectedQSDataTypeIcon[slot] = ICON_4G_PLUS;
                        mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_4G_PLUS;
                        mSelectedDataActivityIndex[slot] = DATA_TYPE_4G_PLUS;
                    }
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_LTE;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_LTE;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_4G;
                }
                break;
            case TelephonyManager.NETWORK_TYPE_GPRS:
            case TelephonyManager.NETWORK_TYPE_GSM:
                if (!showAtLeast3G) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_G;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_G;
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[0], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_3G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[0];;
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                }
                break;
            default:
                mSelectedDataActivityIndex[slot] = DATA_TYPE_UNKNOWN;
                mSelectedDataTypeIcon[slot] = 0;
                mSelectedQSDataTypeIcon[slot] = 0;
                mSelectedDataTypeDesc[slot] = """";
                mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_G;
                break;
        }
        log(TAG, ""updateDataType "" + String.format(
                ""mSelectedDataTypeIcon[%d]=%d, mSelectedDataActivityIndex=%d"",
                slot, mSelectedDataTypeIcon[slot], mSelectedDataActivityIndex[slot]));
    }


    static int getQSDataTypeIcon(int slot) {
        return mSelectedQSDataTypeIcon[slot];
    }

    static int getDataTypeIcon(int slot) {
        log(TAG, ""getDataTypeIcon "" + String.format(""sub=%d"", slot));
        return mSelectedDataTypeIcon[slot];
    }

    static int getDataTypeDesc(int slot) {
        return mRes.getIdentifier(mSelectedDataTypeDesc[slot], null, NS);
    }

    static int getDataActivity(int slot, int activity) {
        log(TAG, String.format(""getDataActivity, slot=%d, activity=%d"",
                slot, activity));

        String[] dataActivityArray = mRes.getStringArray(
                mRes.getIdentifier(mDataActivityArray[slot], null, NS));
        String[] selectedTypeArray = mRes.getStringArray(mRes.getIdentifier(
                dataActivityArray[mSelectedDataActivityIndex[slot]], null, NS));

        return mRes.getIdentifier(selectedTypeArray[activity], null, NS);
    }

    static int getSignalStrengthIcon(int slot, int inet, int level, boolean roaming) {
        log(TAG, ""getSignalStrengthIcon: "" + String.format(
                ""slot=%d, inetCondition=%d, level=%d, roaming=%b"", slot, inet, level, roaming));

        String[] signalStrengthArray, selectedTypeArray;

        signalStrengthArray = mRes.getStringArray(mRes.getIdentifier(!roaming ?
                mSignalStrengthArray[slot] : mSignalStrengthRoamingArray[slot], null, NS));
        log(TAG, String.format(""signalStrengthArray.length=%d"", signalStrengthArray.length));

        selectedTypeArray = mRes.getStringArray(mRes.getIdentifier(
                signalStrengthArray[mSelectedSignalStreagthIndex[slot]], null, NS));
        log(TAG, String.format(""selectedTypeArray.length=%d"", selectedTypeArray.length));

        String[] inetArray = mRes.getStringArray(
                mRes.getIdentifier(selectedTypeArray[inet], null, NS));
        log(TAG, String.format(""inetArray.length=%d"", inetArray.length));

        return mRes.getIdentifier(inetArray[level], null, NS);
    }


    static int convertMobileStrengthIcon(int stackedIcon) {
        if (mStacked2SingleIconLookup == null) {
            return stackedIcon;
        }
        int index = mStacked2SingleIconLookup.indexOfKey(stackedIcon);
        if (index >= 0) {
            return mStacked2SingleIconLookup.get(stackedIcon);
        }
        return stackedIcon;
    }

    static int getStackedVoiceIcon(int level) {
        int retValue = 0;
        switch(level){
            case SignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN:
                retValue = R.drawable.stat_sys_signal_0_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_POOR:
                retValue = R.drawable.stat_sys_signal_1_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_MODERATE:
                retValue = R.drawable.stat_sys_signal_2_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_GOOD:
                retValue = R.drawable.stat_sys_signal_3_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_GREAT:
                retValue = R.drawable.stat_sys_signal_4_2g;
                break;
            default:
                break;
        }
        return retValue;
    }

    static int getRoamingSignalIconId(int level, int inet){
        return TELEPHONY_SIGNAL_STRENGTH_ROAMING_R[inet][level];
    }

    static int[]  getSignalStrengthDes(int slot) {
        int[] resId = new int[SIGNAL_LEVEL_NUM];
        for (int i = 0; i < SIGNAL_LEVEL_NUM; i++) {
            resId[i] = mRes.getIdentifier(mSignalStrengthDesc[i], null, NS);
        }
        return resId;
    }

    private static void log(String tag, String str){
        if (DEBUG) {
            Log.d(tag, str);
        }
    }
","            R.string.accessibility_cell_data_off,
            TelephonyIcons.ICON_DATA_DISABLED,
            false,
            TelephonyIcons.QS_ICON_DATA_DISABLED
    );

    static final int DATA_TYPE_UNKNOWN = 0;
    static final int DATA_TYPE_G = 1;
    static final int DATA_TYPE_E = 2;
    static final int DATA_TYPE_2G = 3;
    static final int DATA_TYPE_3G = 4;
    static final int DATA_TYPE_4G = 5;
    static final int DATA_TYPE_H = 6;
    static final int DATA_TYPE_HP = 7;
    static final int DATA_TYPE_1X = 8;
    static final int DATA_TYPE_LTE = 9;
    static final int DATA_TYPE_4G_PLUS = 10;

    static final int SIGNAL_STRENGTH_TYPE_G = 0;
    static final int SIGNAL_STRENGTH_TYPE_E = 1;
    static final int SIGNAL_STRENGTH_TYPE_3G = 2;
    static final int SIGNAL_STRENGTH_TYPE_4G = 3;
    static final int SIGNAL_STRENGTH_TYPE_H = 4;
    static final int SIGNAL_STRENGTH_TYPE_HP = 5;
    static final int SIGNAL_STRENGTH_TYPE_1X = 6;
    static final int SIGNAL_STRENGTH_TYPE_CDMA = 7;
    static final int SIGNAL_STRENGTH_TYPE_UMTS = 8;
    static final int SIGNAL_STRENGTH_TYPE_4G_PLUS = 9;

    static final int DEFAULT_SUB = 0;
    static final int INET_TYPE_NUM = 2;
    static final int SIGNAL_LEVEL_NUM = SignalStrength.NUM_SIGNAL_STRENGTH_BINS;
    static final String TAG = ""TelephonyIcons"";
    static final String NS = ""com.android.systemui"";
    static final boolean DEBUG = Log.isLoggable(TAG, Log.DEBUG);;

    static String[] mDataTypeArray, mDataTypeGenerationArray;
    static String[] mDataTypeDescriptionArray, mDataTypeGenerationDescArray;
    static String[] mDataActivityArray;
    static String[] mSignalStrengthArray, mSignalStrengthRoamingArray;
    static String[] mSignalNullArray;
    static String[] mSignalStrengthDesc;

    static int[] mSelectedDataTypeIcon;
    static int[] mSelectedQSDataTypeIcon;
    static String[] mSelectedDataTypeDesc;
    static int[] mSelectedDataActivityIndex;
    static int[] mSelectedSignalStreagthIndex;
    static SparseArray<Integer> mStacked2SingleIconLookup;

    private static Resources mRes;
    private static boolean isInitiated = false;

    static void readIconsFromXml(Context context) {
        if (isInitiated) {
            log(TAG, ""readIconsFromXml, already read!"");
            return;
        }

        mRes = context.getResources();
        try {
            mDataTypeArray = mRes.getStringArray(R.array.multi_data_type);
            mDataTypeDescriptionArray = mRes.getStringArray(
                    R.array.telephony_data_type_description);
            mDataTypeGenerationArray = mRes.getStringArray(
                    R.array.telephony_data_type_generation);
            mDataTypeGenerationDescArray = mRes.getStringArray(
                    R.array.telephony_data_type_generation_description);
            mDataActivityArray = mRes.getStringArray(R.array.multi_data_activity);
            mSignalStrengthArray = mRes.getStringArray(R.array.multi_signal_strength);
            mSignalStrengthRoamingArray = mRes.getStringArray(
                    R.array.multi_signal_strength_roaming);
            mSignalNullArray = mRes.getStringArray(R.array.multi_signal_null);
            mSignalStrengthDesc = mRes.getStringArray(R.array.signal_strength_description);
            initStacked2SingleIconLookup();
        } catch (android.content.res.Resources.NotFoundException e) {
            isInitiated = false;
            log(TAG, ""readIconsFromXml, exception happened: "" + e);
            return;
        }

        if (mSelectedDataTypeIcon == null
                && mDataTypeArray.length != 0) {
            mSelectedDataTypeIcon = new int[mDataTypeArray.length];
        }
        if (mSelectedQSDataTypeIcon == null
                && mDataTypeArray.length != 0) {
            mSelectedQSDataTypeIcon = new int[mDataTypeArray.length];
        }
        if (mSelectedDataTypeDesc == null
                && mDataTypeArray.length != 0) {
            mSelectedDataTypeDesc = new String[mDataTypeArray.length];
        }
        if (mSelectedDataActivityIndex == null
                && mDataActivityArray.length != 0) {
            mSelectedDataActivityIndex = new int[mDataActivityArray.length];
        }
        if (mSelectedSignalStreagthIndex == null
                && mSignalStrengthArray.length != 0) {
            mSelectedSignalStreagthIndex = new int[mSignalStrengthArray.length];
        }
        isInitiated = true;
    }

    static void initStacked2SingleIconLookup() {
        mStacked2SingleIconLookup = new SparseArray<>();
        TypedArray stackedIcons = mRes.obtainTypedArray(R.array.stacked_signal_icons);
        TypedArray singleIcons = mRes.obtainTypedArray(R.array.single_signal_icons);

        mStacked2SingleIconLookup.clear();
        for (int i = 0; i < stackedIcons.length() && i < singleIcons.length(); i++) {
            mStacked2SingleIconLookup.put(stackedIcons.getResourceId(i,0),
                    singleIcons.getResourceId(i,0));
        }
        stackedIcons.recycle();
        singleIcons.recycle();
        log(TAG, ""initStacked2SingleIconLookup: size="" + mStacked2SingleIconLookup.size());
    }

    static int getSignalNullIcon(int slot) {
        if (mSignalNullArray == null) {
            return 0;
        }
        String resName = mSignalNullArray[slot];
        log(TAG, ""null signal icon name: "" + resName);
        int resId = mRes.getIdentifier(resName, null, NS);
        return resId;
    }

    static void updateDataType(int slot, int type, boolean showAtLeast3G,
                               boolean show4GforLte, boolean hspaDistinguishable, int inet) {
        log(TAG, ""updateDataType ""
                + String.format(""slot=%d, type=%d, inetCondition=%d"",
                slot, type, inet)
                + "" showAtLeast3G="" + String.valueOf(showAtLeast3G)
                + "" show4GforLte="" + String.valueOf(show4GforLte)
                + "" hspaDistinguishable="" + String.valueOf(hspaDistinguishable));

        String resName = mDataTypeArray[slot];
        int resId = mRes.getIdentifier(resName, null, NS);
        String[] dataTypeArray = mRes.getStringArray(resId);

        log(TAG, ""data type item name: "" + resName + "" id:"" + resId);

        switch (type) {
            case TelephonyManager.NETWORK_TYPE_UNKNOWN:
                if (!showAtLeast3G) {
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = 0;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedDataActivityIndex[slot] = 0;
                    mSelectedSignalStreagthIndex[slot] = 0;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_EDGE:
                if (!showAtLeast3G) {
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_E;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_E;
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_E;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_UMTS:
            case TelephonyManager.NETWORK_TYPE_TD_SCDMA:
                mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                        dataTypeArray[type], null, NS);
                mSelectedQSDataTypeIcon[slot] = ICON_3G;
                mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_UMTS;
                break;
            case TelephonyManager.NETWORK_TYPE_HSDPA:
            case TelephonyManager.NETWORK_TYPE_HSUPA:
            case TelephonyManager.NETWORK_TYPE_HSPA:
                if (hspaDistinguishable) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_H;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_H;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_H;
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[0], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_3G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[0];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                }
                break;
            case TelephonyManager.NETWORK_TYPE_HSPAP:
                if (hspaDistinguishable) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_HP;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_H;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_HP;
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[0], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_3G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[0];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                }
                break;
            case TelephonyManager.NETWORK_TYPE_CDMA:
                if (!showAtLeast3G) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_1X;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_1X;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_CDMA;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_1xRTT:
                if (!showAtLeast3G) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_1X;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_1X;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_1X;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_EVDO_0: //fall through
            case TelephonyManager.NETWORK_TYPE_EVDO_A:
            case TelephonyManager.NETWORK_TYPE_EVDO_B:
            case TelephonyManager.NETWORK_TYPE_EHRPD:
                mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                        dataTypeArray[type], null, NS);
                mSelectedQSDataTypeIcon[slot] = ICON_3G;
                mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                break;
            case TelephonyManager.NETWORK_TYPE_LTE:
            case TelephonyManager.NETWORK_TYPE_LTE_CA:
                if (show4GforLte) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_4G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[1], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_4G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[1];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_4G;

                    if ( type == TelephonyManager.NETWORK_TYPE_LTE_CA) {
                        //Select 4G+ icon.
                        mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                                mDataTypeGenerationArray[2], null, NS);
                        mSelectedQSDataTypeIcon[slot] = ICON_4G_PLUS;
                        mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_4G_PLUS;
                        mSelectedDataActivityIndex[slot] = DATA_TYPE_4G_PLUS;
                    }
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_LTE;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_LTE;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_4G;
                }
                break;
            case TelephonyManager.NETWORK_TYPE_GPRS:
            case TelephonyManager.NETWORK_TYPE_GSM:
                if (!showAtLeast3G) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_G;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_G;
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[0], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_3G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[0];;
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                }
                break;
            default:
                mSelectedDataActivityIndex[slot] = DATA_TYPE_UNKNOWN;
                mSelectedDataTypeIcon[slot] = 0;
                mSelectedQSDataTypeIcon[slot] = 0;
                mSelectedDataTypeDesc[slot] = """";
                mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_G;
                break;
        }
        log(TAG, ""updateDataType "" + String.format(
                ""mSelectedDataTypeIcon[%d]=%d, mSelectedDataActivityIndex=%d"",
                slot, mSelectedDataTypeIcon[slot], mSelectedDataActivityIndex[slot]));
    }


    static int getQSDataTypeIcon(int slot) {
        return mSelectedQSDataTypeIcon[slot];
    }

    static int getDataTypeIcon(int slot) {
        log(TAG, ""getDataTypeIcon "" + String.format(""sub=%d"", slot));
        return mSelectedDataTypeIcon[slot];
    }

    static int getDataTypeDesc(int slot) {
        return mRes.getIdentifier(mSelectedDataTypeDesc[slot], null, NS);
    }

    static int getDataActivity(int slot, int activity) {
        log(TAG, String.format(""getDataActivity, slot=%d, activity=%d"",
                slot, activity));

        String[] dataActivityArray = mRes.getStringArray(
                mRes.getIdentifier(mDataActivityArray[slot], null, NS));
        String[] selectedTypeArray = mRes.getStringArray(mRes.getIdentifier(
                dataActivityArray[mSelectedDataActivityIndex[slot]], null, NS));

        return mRes.getIdentifier(selectedTypeArray[activity], null, NS);
    }

    static int getSignalStrengthIcon(int slot, int inet, int level, boolean roaming) {
        log(TAG, ""getSignalStrengthIcon: "" + String.format(
                ""slot=%d, inetCondition=%d, level=%d, roaming=%b"", slot, inet, level, roaming));

        String[] signalStrengthArray, selectedTypeArray;

        signalStrengthArray = mRes.getStringArray(mRes.getIdentifier(!roaming ?
                mSignalStrengthArray[slot] : mSignalStrengthRoamingArray[slot], null, NS));
        log(TAG, String.format(""signalStrengthArray.length=%d"", signalStrengthArray.length));

        selectedTypeArray = mRes.getStringArray(mRes.getIdentifier(
                signalStrengthArray[mSelectedSignalStreagthIndex[slot]], null, NS));
        log(TAG, String.format(""selectedTypeArray.length=%d"", selectedTypeArray.length));

        String[] inetArray = mRes.getStringArray(
                mRes.getIdentifier(selectedTypeArray[inet], null, NS));
        log(TAG, String.format(""inetArray.length=%d"", inetArray.length));

        return mRes.getIdentifier(inetArray[level], null, NS);
    }


    static int convertMobileStrengthIcon(int stackedIcon) {
        if (mStacked2SingleIconLookup == null) {
            return stackedIcon;
        }
        int index = mStacked2SingleIconLookup.indexOfKey(stackedIcon);
        if (index >= 0) {
            return mStacked2SingleIconLookup.get(stackedIcon);
        }
        return stackedIcon;
    }

    static int getStackedVoiceIcon(int level) {
        int retValue = 0;
        switch(level){
            case SignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN:
                retValue = R.drawable.stat_sys_signal_0_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_POOR:
                retValue = R.drawable.stat_sys_signal_1_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_MODERATE:
                retValue = R.drawable.stat_sys_signal_2_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_GOOD:
                retValue = R.drawable.stat_sys_signal_3_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_GREAT:
                retValue = R.drawable.stat_sys_signal_4_2g;
                break;
            default:
                break;
        }
        return retValue;
    }

    static int getRoamingSignalIconId(int level, int inet){
        return TELEPHONY_SIGNAL_STRENGTH_ROAMING_R[inet][level];
    }

    static int[]  getSignalStrengthDes(int slot) {
        int[] resId = new int[SIGNAL_LEVEL_NUM];
        for (int i = 0; i < SIGNAL_LEVEL_NUM; i++) {
            resId[i] = mRes.getIdentifier(mSignalStrengthDesc[i], null, NS);
        }
        return resId;
    }

    private static void log(String tag, String str){
        if (DEBUG) {
            Log.d(tag, str);
        }
    }
",");

    static final int DATA_TYPE_UNKNOWN = 0;
    static final int DATA_TYPE_G = 1;
    static final int DATA_TYPE_E = 2;
    static final int DATA_TYPE_2G = 3;
    static final int DATA_TYPE_3G = 4;
    static final int DATA_TYPE_4G = 5;
    static final int DATA_TYPE_H = 6;
    static final int DATA_TYPE_HP = 7;
    static final int DATA_TYPE_1X = 8;
    static final int DATA_TYPE_LTE = 9;
    static final int DATA_TYPE_4G_PLUS = 10;

    static final int SIGNAL_STRENGTH_TYPE_G = 0;
    static final int SIGNAL_STRENGTH_TYPE_E = 1;
    static final int SIGNAL_STRENGTH_TYPE_3G = 2;
    static final int SIGNAL_STRENGTH_TYPE_4G = 3;
    static final int SIGNAL_STRENGTH_TYPE_H = 4;
    static final int SIGNAL_STRENGTH_TYPE_HP = 5;
    static final int SIGNAL_STRENGTH_TYPE_1X = 6;
    static final int SIGNAL_STRENGTH_TYPE_CDMA = 7;
    static final int SIGNAL_STRENGTH_TYPE_UMTS = 8;
    static final int SIGNAL_STRENGTH_TYPE_4G_PLUS = 9;

    static final int DEFAULT_SUB = 0;
    static final int INET_TYPE_NUM = 2;
    static final int SIGNAL_LEVEL_NUM = SignalStrength.NUM_SIGNAL_STRENGTH_BINS;
    static final String TAG = ""TelephonyIcons"";
    static final String NS = ""com.android.systemui"";
    static final boolean DEBUG = Log.isLoggable(TAG, Log.DEBUG);;

    static String[] mDataTypeArray, mDataTypeGenerationArray;
    static String[] mDataTypeDescriptionArray, mDataTypeGenerationDescArray;
    static String[] mDataActivityArray;
    static String[] mSignalStrengthArray, mSignalStrengthRoamingArray;
    static String[] mSignalNullArray;
    static String[] mSignalStrengthDesc;

    static int[] mSelectedDataTypeIcon;
    static int[] mSelectedQSDataTypeIcon;
    static String[] mSelectedDataTypeDesc;
    static int[] mSelectedDataActivityIndex;
    static int[] mSelectedSignalStreagthIndex;
    static SparseArray<Integer> mStacked2SingleIconLookup;

    private static Resources mRes;
    private static boolean isInitiated = false;

    static void readIconsFromXml(Context context) {
        if (isInitiated) {
            log(TAG, ""readIconsFromXml, already read!"");
            return;
        }

        mRes = context.getResources();
        try {
            mDataTypeArray = mRes.getStringArray(R.array.multi_data_type);
            mDataTypeDescriptionArray = mRes.getStringArray(
                    R.array.telephony_data_type_description);
            mDataTypeGenerationArray = mRes.getStringArray(
                    R.array.telephony_data_type_generation);
            mDataTypeGenerationDescArray = mRes.getStringArray(
                    R.array.telephony_data_type_generation_description);
            mDataActivityArray = mRes.getStringArray(R.array.multi_data_activity);
            mSignalStrengthArray = mRes.getStringArray(R.array.multi_signal_strength);
            mSignalStrengthRoamingArray = mRes.getStringArray(
                    R.array.multi_signal_strength_roaming);
            mSignalNullArray = mRes.getStringArray(R.array.multi_signal_null);
            mSignalStrengthDesc = mRes.getStringArray(R.array.signal_strength_description);
            initStacked2SingleIconLookup();
        } catch (android.content.res.Resources.NotFoundException e) {
            isInitiated = false;
            log(TAG, ""readIconsFromXml, exception happened: "" + e);
            return;
        }

        if (mSelectedDataTypeIcon == null
                && mDataTypeArray.length != 0) {
            mSelectedDataTypeIcon = new int[mDataTypeArray.length];
        }
        if (mSelectedQSDataTypeIcon == null
                && mDataTypeArray.length != 0) {
            mSelectedQSDataTypeIcon = new int[mDataTypeArray.length];
        }
        if (mSelectedDataTypeDesc == null
                && mDataTypeArray.length != 0) {
            mSelectedDataTypeDesc = new String[mDataTypeArray.length];
        }
        if (mSelectedDataActivityIndex == null
                && mDataActivityArray.length != 0) {
            mSelectedDataActivityIndex = new int[mDataActivityArray.length];
        }
        if (mSelectedSignalStreagthIndex == null
                && mSignalStrengthArray.length != 0) {
            mSelectedSignalStreagthIndex = new int[mSignalStrengthArray.length];
        }
        isInitiated = true;
    }

    static void initStacked2SingleIconLookup() {
        mStacked2SingleIconLookup = new SparseArray<>();
        TypedArray stackedIcons = mRes.obtainTypedArray(R.array.stacked_signal_icons);
        TypedArray singleIcons = mRes.obtainTypedArray(R.array.single_signal_icons);

        mStacked2SingleIconLookup.clear();
        for (int i = 0; i < stackedIcons.length() && i < singleIcons.length(); i++) {
            mStacked2SingleIconLookup.put(stackedIcons.getResourceId(i,0),
                    singleIcons.getResourceId(i,0));
        }
        stackedIcons.recycle();
        singleIcons.recycle();
        log(TAG, ""initStacked2SingleIconLookup: size="" + mStacked2SingleIconLookup.size());
    }

    static int getSignalNullIcon(int slot) {
        if (mSignalNullArray == null) {
            return 0;
        }
        String resName = mSignalNullArray[slot];
        log(TAG, ""null signal icon name: "" + resName);
        int resId = mRes.getIdentifier(resName, null, NS);
        return resId;
    }

    static void updateDataType(int slot, int type, boolean showAtLeast3G,
                               boolean show4GforLte, boolean hspaDistinguishable, int inet) {
        log(TAG, ""updateDataType ""
                + String.format(""slot=%d, type=%d, inetCondition=%d"",
                slot, type, inet)
                + "" showAtLeast3G="" + String.valueOf(showAtLeast3G)
                + "" show4GforLte="" + String.valueOf(show4GforLte)
                + "" hspaDistinguishable="" + String.valueOf(hspaDistinguishable));

        String resName = mDataTypeArray[slot];
        int resId = mRes.getIdentifier(resName, null, NS);
        String[] dataTypeArray = mRes.getStringArray(resId);

        log(TAG, ""data type item name: "" + resName + "" id:"" + resId);

        switch (type) {
            case TelephonyManager.NETWORK_TYPE_UNKNOWN:
                if (!showAtLeast3G) {
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = 0;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedDataActivityIndex[slot] = 0;
                    mSelectedSignalStreagthIndex[slot] = 0;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_EDGE:
                if (!showAtLeast3G) {
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_E;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_E;
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_E;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_UMTS:
            case TelephonyManager.NETWORK_TYPE_TD_SCDMA:
                mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                        dataTypeArray[type], null, NS);
                mSelectedQSDataTypeIcon[slot] = ICON_3G;
                mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_UMTS;
                break;
            case TelephonyManager.NETWORK_TYPE_HSDPA:
            case TelephonyManager.NETWORK_TYPE_HSUPA:
            case TelephonyManager.NETWORK_TYPE_HSPA:
                if (hspaDistinguishable) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_H;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_H;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_H;
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[0], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_3G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[0];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                }
                break;
            case TelephonyManager.NETWORK_TYPE_HSPAP:
                if (hspaDistinguishable) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_HP;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_H;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_HP;
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[0], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_3G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[0];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                }
                break;
            case TelephonyManager.NETWORK_TYPE_CDMA:
                if (!showAtLeast3G) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_1X;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_1X;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_CDMA;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_1xRTT:
                if (!showAtLeast3G) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_1X;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_1X;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_1X;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_EVDO_0: //fall through
            case TelephonyManager.NETWORK_TYPE_EVDO_A:
            case TelephonyManager.NETWORK_TYPE_EVDO_B:
            case TelephonyManager.NETWORK_TYPE_EHRPD:
                mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                        dataTypeArray[type], null, NS);
                mSelectedQSDataTypeIcon[slot] = ICON_3G;
                mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                break;
            case TelephonyManager.NETWORK_TYPE_LTE:
            case TelephonyManager.NETWORK_TYPE_LTE_CA:
                if (show4GforLte) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_4G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[1], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_4G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[1];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_4G;

                    if ( type == TelephonyManager.NETWORK_TYPE_LTE_CA) {
                        //Select 4G+ icon.
                        mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                                mDataTypeGenerationArray[2], null, NS);
                        mSelectedQSDataTypeIcon[slot] = ICON_4G_PLUS;
                        mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_4G_PLUS;
                        mSelectedDataActivityIndex[slot] = DATA_TYPE_4G_PLUS;
                    }
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_LTE;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_LTE;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_4G;
                }
                break;
            case TelephonyManager.NETWORK_TYPE_GPRS:
            case TelephonyManager.NETWORK_TYPE_GSM:
                if (!showAtLeast3G) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_G;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_G;
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[0], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_3G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[0];;
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                }
                break;
            default:
                mSelectedDataActivityIndex[slot] = DATA_TYPE_UNKNOWN;
                mSelectedDataTypeIcon[slot] = 0;
                mSelectedQSDataTypeIcon[slot] = 0;
                mSelectedDataTypeDesc[slot] = """";
                mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_G;
                break;
        }
        log(TAG, ""updateDataType "" + String.format(
                ""mSelectedDataTypeIcon[%d]=%d, mSelectedDataActivityIndex=%d"",
                slot, mSelectedDataTypeIcon[slot], mSelectedDataActivityIndex[slot]));
    }


    static int getQSDataTypeIcon(int slot) {
        return mSelectedQSDataTypeIcon[slot];
    }

    static int getDataTypeIcon(int slot) {
        log(TAG, ""getDataTypeIcon "" + String.format(""sub=%d"", slot));
        return mSelectedDataTypeIcon[slot];
    }

    static int getDataTypeDesc(int slot) {
        return mRes.getIdentifier(mSelectedDataTypeDesc[slot], null, NS);
    }

    static int getDataActivity(int slot, int activity) {
        log(TAG, String.format(""getDataActivity, slot=%d, activity=%d"",
                slot, activity));

        String[] dataActivityArray = mRes.getStringArray(
                mRes.getIdentifier(mDataActivityArray[slot], null, NS));
        String[] selectedTypeArray = mRes.getStringArray(mRes.getIdentifier(
                dataActivityArray[mSelectedDataActivityIndex[slot]], null, NS));

        return mRes.getIdentifier(selectedTypeArray[activity], null, NS);
    }

    static int getSignalStrengthIcon(int slot, int inet, int level, boolean roaming) {
        log(TAG, ""getSignalStrengthIcon: "" + String.format(
                ""slot=%d, inetCondition=%d, level=%d, roaming=%b"", slot, inet, level, roaming));

        String[] signalStrengthArray, selectedTypeArray;

        signalStrengthArray = mRes.getStringArray(mRes.getIdentifier(!roaming ?
                mSignalStrengthArray[slot] : mSignalStrengthRoamingArray[slot], null, NS));
        log(TAG, String.format(""signalStrengthArray.length=%d"", signalStrengthArray.length));

        selectedTypeArray = mRes.getStringArray(mRes.getIdentifier(
                signalStrengthArray[mSelectedSignalStreagthIndex[slot]], null, NS));
        log(TAG, String.format(""selectedTypeArray.length=%d"", selectedTypeArray.length));

        String[] inetArray = mRes.getStringArray(
                mRes.getIdentifier(selectedTypeArray[inet], null, NS));
        log(TAG, String.format(""inetArray.length=%d"", inetArray.length));

        return mRes.getIdentifier(inetArray[level], null, NS);
    }


    static int convertMobileStrengthIcon(int stackedIcon) {
        if (mStacked2SingleIconLookup == null) {
            return stackedIcon;
        }
        int index = mStacked2SingleIconLookup.indexOfKey(stackedIcon);
        if (index >= 0) {
            return mStacked2SingleIconLookup.get(stackedIcon);
        }
        return stackedIcon;
    }

    static int getStackedVoiceIcon(int level) {
        int retValue = 0;
        switch(level){
            case SignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN:
                retValue = R.drawable.stat_sys_signal_0_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_POOR:
                retValue = R.drawable.stat_sys_signal_1_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_MODERATE:
                retValue = R.drawable.stat_sys_signal_2_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_GOOD:
                retValue = R.drawable.stat_sys_signal_3_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_GREAT:
                retValue = R.drawable.stat_sys_signal_4_2g;
                break;
            default:
                break;
        }
        return retValue;
    }

    static int getRoamingSignalIconId(int level, int inet){
        return TELEPHONY_SIGNAL_STRENGTH_ROAMING_R[inet][level];
    }

    static int[]  getSignalStrengthDes(int slot) {
        int[] resId = new int[SIGNAL_LEVEL_NUM];
        for (int i = 0; i < SIGNAL_LEVEL_NUM; i++) {
            resId[i] = mRes.getIdentifier(mSignalStrengthDesc[i], null, NS);
        }
        return resId;
    }

    private static void log(String tag, String str){
        if (DEBUG) {
            Log.d(tag, str);
        }
    }
","[0.933, 0.991]"
15,"['2b252c526c654de6d04ec0165b4b8f039b37f82b', 'fa63f69f0fdfc50fe92caa22dbe1b4b120807ed2']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java,"[(817, 817, 1), (900, 900, 1)]","        pw.println(""  mFiveGState="" + mFiveGState + "","");
","        pw.println(""  mFiveGState="" + mFiveGState + "","");
","        pw.println(""  mFiveGState="" + mFiveGState + "","");
","[1.0, 1.0]"
16,"['2edeff882ab756e76b3a028a1568d8774ddc0257', '6f47ceafbe6febe54aa5c376baed3415cdf848ad']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/wm/ScreenRotationAnimation.java,"[(32, 33, 2), (39, 39, 1)]","import android.os.IBinder;
import android.util.BoostFramework;
","import android.util.BoostFramework;
","import android.util.BoostFramework;
","[0.571, 1.0]"
17,"['2edeff882ab756e76b3a028a1568d8774ddc0257', '757dbb836469bbdd7eb8312deaf584fe0c99c17d']","['aospa-quartz-SAP-block_text', 'aospa-sapphire-SAP-block_text']",packages/SettingsLib/src/com/android/settingslib/bluetooth/CachedBluetoothDevice.java,"[(945, 951, 7), (970, 973, 4)]","            if (getPhonebookPermissionChoice() == CachedBluetoothDevice.ACCESS_UNKNOWN) {
                if ((mDevice.getBluetoothClass() != null) &&
                   (mDevice.getBluetoothClass().getDeviceClass()
                        == BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE ||
                    mDevice.getBluetoothClass().getDeviceClass()
                        == BluetoothClass.Device.AUDIO_VIDEO_WEARABLE_HEADSET)) {
                    setPhonebookPermissionChoice(CachedBluetoothDevice.ACCESS_ALLOWED);
","                if ((mDevice.getBluetoothClass() != null) &&
                   (mDevice.getBluetoothClass().getDeviceClass()
                        == BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE ||
                    mDevice.getBluetoothClass().getDeviceClass()
","                if ((mDevice.getBluetoothClass() != null) &&
                   (mDevice.getBluetoothClass().getDeviceClass()
                        == BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE ||
                    mDevice.getBluetoothClass().getDeviceClass()
","[0.505, 1.0]"
18,"['3a5272699e3e16fbfdc397480898bb27abeb2caa', '18970c4d9d55a44040fe6fb762dac93a077c64b5']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/locksettings/LockSettingsService.java,"[(1108, 1147, 40), (1122, 1160, 39)]","    public void retainPassword(String password) {
        if (LockPatternUtils.isDeviceEncryptionEnabled()) {
            if (password != null)
                mSavePassword = password;
            else
                mSavePassword = DEFAULT_PASSWORD;
        }
    }

    public void sanitizePassword() {
        if (LockPatternUtils.isDeviceEncryptionEnabled()) {
            mSavePassword = DEFAULT_PASSWORD;
        }
    }

    private boolean checkCryptKeeperPermissions() {
        boolean permission_err = false;
        try {
            mContext.enforceCallingOrSelfPermission(
                       android.Manifest.permission.CRYPT_KEEPER,
                       ""no permission to get the password"");
        } catch (SecurityException e) {
            permission_err = true;
        }
        return permission_err;
    }

    public String getPassword() {
       /** if calling process does't have crypt keeper or admin permissions,
         * throw the exception.
         */
       if (checkCryptKeeperPermissions())
            mContext.enforceCallingOrSelfPermission(
                    android.Manifest.permission.MANAGE_DEVICE_ADMINS,
                    ""no crypt_keeper or admin permission to get the password"");

       return mSavePassword;
    }

    private void setKeystorePassword(String password, int userHandle) {
","    public void retainPassword(String password) {
        if (LockPatternUtils.isDeviceEncryptionEnabled()) {
            if (password != null)
                mSavePassword = password;
            else
                mSavePassword = DEFAULT_PASSWORD;
        }
    }

    public void sanitizePassword() {
        if (LockPatternUtils.isDeviceEncryptionEnabled()) {
            mSavePassword = DEFAULT_PASSWORD;
        }
    }

    private boolean checkCryptKeeperPermissions() {
        boolean permission_err = false;
        try {
            mContext.enforceCallingOrSelfPermission(
                       android.Manifest.permission.CRYPT_KEEPER,
                       ""no permission to get the password"");
        } catch (SecurityException e) {
            permission_err = true;
        }
        return permission_err;
    }

    public String getPassword() {
       /** if calling process does't have crypt keeper or admin permissions,
         * throw the exception.
         */
       if (checkCryptKeeperPermissions())
            mContext.enforceCallingOrSelfPermission(
                    android.Manifest.permission.MANAGE_DEVICE_ADMINS,
                    ""no crypt_keeper or admin permission to get the password"");

       return mSavePassword;
    }

","    public void retainPassword(String password) {
        if (LockPatternUtils.isDeviceEncryptionEnabled()) {
            if (password != null)
                mSavePassword = password;
            else
                mSavePassword = DEFAULT_PASSWORD;
        }
    }

    public void sanitizePassword() {
        if (LockPatternUtils.isDeviceEncryptionEnabled()) {
            mSavePassword = DEFAULT_PASSWORD;
        }
    }

    private boolean checkCryptKeeperPermissions() {
        boolean permission_err = false;
        try {
            mContext.enforceCallingOrSelfPermission(
                       android.Manifest.permission.CRYPT_KEEPER,
                       ""no permission to get the password"");
        } catch (SecurityException e) {
            permission_err = true;
        }
        return permission_err;
    }

    public String getPassword() {
       /** if calling process does't have crypt keeper or admin permissions,
         * throw the exception.
         */
       if (checkCryptKeeperPermissions())
            mContext.enforceCallingOrSelfPermission(
                    android.Manifest.permission.MANAGE_DEVICE_ADMINS,
                    ""no crypt_keeper or admin permission to get the password"");

       return mSavePassword;
    }

","[0.947, 1.0]"
19,"['3a5272699e3e16fbfdc397480898bb27abeb2caa', '18970c4d9d55a44040fe6fb762dac93a077c64b5']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/locksettings/LockSettingsService.java,"[(1577, 1589, 13), (1684, 1696, 13)]","    private void clearUserKeyAuth(int userId, byte[] token, byte[] secret) throws RemoteException {
        if (DEBUG) Slog.d(TAG, ""clearUserKeyProtection user="" + userId);
        final UserInfo userInfo = mUserManager.getUserInfo(userId);
        final IStorageManager storageManager = mInjector.getStorageManager();
        final long callingId = Binder.clearCallingIdentity();
        try {
            storageManager.clearUserKeyAuth(userId, userInfo.serialNumber, token, secret);
        } finally {
            Binder.restoreCallingIdentity(callingId);
        }
    }

    private static byte[] secretFromCredential(String credential) throws RemoteException {
","    private void clearUserKeyAuth(int userId, byte[] token, byte[] secret) throws RemoteException {
        if (DEBUG) Slog.d(TAG, ""clearUserKeyProtection user="" + userId);
        final UserInfo userInfo = mUserManager.getUserInfo(userId);
        final IStorageManager storageManager = mInjector.getStorageManager();
        final long callingId = Binder.clearCallingIdentity();
        try {
            storageManager.clearUserKeyAuth(userId, userInfo.serialNumber, token, secret);
        } finally {
            Binder.restoreCallingIdentity(callingId);
        }
    }

    private static byte[] secretFromCredential(byte[] credential) throws RemoteException {
","    private void clearUserKeyAuth(int userId, byte[] token, byte[] secret) throws RemoteException {
        if (DEBUG) Slog.d(TAG, ""clearUserKeyProtection user="" + userId);
        final UserInfo userInfo = mUserManager.getUserInfo(userId);
        final IStorageManager storageManager = mInjector.getStorageManager();
        final long callingId = Binder.clearCallingIdentity();
        try {
            storageManager.clearUserKeyAuth(userId, userInfo.serialNumber, token, secret);
        } finally {
            Binder.restoreCallingIdentity(callingId);
        }
    }

    private static byte[] secretFromCredential(","[0.934, 0.934]"
20,"['3a5272699e3e16fbfdc397480898bb27abeb2caa', '7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/locksettings/LockSettingsService.java,"[(1577, 1589, 13), (1749, 1763, 15)]","    private void clearUserKeyAuth(int userId, byte[] token, byte[] secret) throws RemoteException {
        if (DEBUG) Slog.d(TAG, ""clearUserKeyProtection user="" + userId);
        final UserInfo userInfo = mUserManager.getUserInfo(userId);
        final IStorageManager storageManager = mInjector.getStorageManager();
        final long callingId = Binder.clearCallingIdentity();
        try {
            storageManager.clearUserKeyAuth(userId, userInfo.serialNumber, token, secret);
        } finally {
            Binder.restoreCallingIdentity(callingId);
        }
    }

    private static byte[] secretFromCredential(String credential) throws RemoteException {
","    private void clearUserKeyAuth(int userId, byte[] token, byte[] secret) {
        if (DEBUG) Slog.d(TAG, ""clearUserKeyProtection user="" + userId);
        final UserInfo userInfo = mUserManager.getUserInfo(userId);
        final IStorageManager storageManager = mInjector.getStorageManager();
        final long callingId = Binder.clearCallingIdentity();
        try {
            storageManager.clearUserKeyAuth(userId, userInfo.serialNumber, token, secret);
        } catch (RemoteException e) {
            throw new IllegalStateException(""clearUserKeyAuth failed user="" + userId);
        } finally {
            Binder.restoreCallingIdentity(callingId);
        }
    }

    private static byte[] secretFromCredential(byte[] credential) {
"," {
        if (DEBUG) Slog.d(TAG, ""clearUserKeyProtection user="" + userId);
        final UserInfo userInfo = mUserManager.getUserInfo(userId);
        final IStorageManager storageManager = mInjector.getStorageManager();
        final long callingId = Binder.clearCallingIdentity();
        try {
            storageManager.clearUserKeyAuth(userId, userInfo.serialNumber, token, secret);
        } ","[0.597, 0.534]"
21,"['3a5272699e3e16fbfdc397480898bb27abeb2caa', '2051462f672b5986ef321bf1de3657e7653864e8']","['aospa-quartz-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/locksettings/LockSettingsService.java,"[(1108, 1147, 40), (1267, 1306, 40)]","    public void retainPassword(String password) {
        if (LockPatternUtils.isDeviceEncryptionEnabled()) {
            if (password != null)
                mSavePassword = password;
            else
                mSavePassword = DEFAULT_PASSWORD;
        }
    }

    public void sanitizePassword() {
        if (LockPatternUtils.isDeviceEncryptionEnabled()) {
            mSavePassword = DEFAULT_PASSWORD;
        }
    }

    private boolean checkCryptKeeperPermissions() {
        boolean permission_err = false;
        try {
            mContext.enforceCallingOrSelfPermission(
                       android.Manifest.permission.CRYPT_KEEPER,
                       ""no permission to get the password"");
        } catch (SecurityException e) {
            permission_err = true;
        }
        return permission_err;
    }

    public String getPassword() {
       /** if calling process does't have crypt keeper or admin permissions,
         * throw the exception.
         */
       if (checkCryptKeeperPermissions())
            mContext.enforceCallingOrSelfPermission(
                    android.Manifest.permission.MANAGE_DEVICE_ADMINS,
                    ""no crypt_keeper or admin permission to get the password"");

       return mSavePassword;
    }

    private void setKeystorePassword(String password, int userHandle) {
","    public void retainPassword(String password) {
        if (LockPatternUtils.isDeviceEncryptionEnabled()) {
            if (password != null)
                mSavePassword = password;
            else
                mSavePassword = DEFAULT_PASSWORD;
        }
    }

    public void sanitizePassword() {
        if (LockPatternUtils.isDeviceEncryptionEnabled()) {
            mSavePassword = DEFAULT_PASSWORD;
        }
    }

    private boolean checkCryptKeeperPermissions() {
        boolean permission_err = false;
        try {
            mContext.enforceCallingOrSelfPermission(
                       android.Manifest.permission.CRYPT_KEEPER,
                       ""no permission to get the password"");
        } catch (SecurityException e) {
            permission_err = true;
        }
        return permission_err;
    }

    public String getPassword() {
       /** if calling process does't have crypt keeper or admin permissions,
         * throw the exception.
         */
       if (checkCryptKeeperPermissions())
            mContext.enforceCallingOrSelfPermission(
                    android.Manifest.permission.ACCESS_KEYGUARD_SECURE_STORAGE,
                    ""no crypt_keeper or admin permission to get the password"");

       return mSavePassword;
    }

    private void setKeystorePassword(byte[] password, int userHandle) {
","    public void retainPassword(String password) {
        if (LockPatternUtils.isDeviceEncryptionEnabled()) {
            if (password != null)
                mSavePassword = password;
            else
                mSavePassword = DEFAULT_PASSWORD;
        }
    }

    public void sanitizePassword() {
        if (LockPatternUtils.isDeviceEncryptionEnabled()) {
            mSavePassword = DEFAULT_PASSWORD;
        }
    }

    private boolean checkCryptKeeperPermissions() {
        boolean permission_err = false;
        try {
            mContext.enforceCallingOrSelfPermission(
                       android.Manifest.permission.CRYPT_KEEPER,
                       ""no permission to get the password"");
        } catch (SecurityException e) {
            permission_err = true;
        }
        return permission_err;
    }

    public String getPassword() {
       /** if calling process does't have crypt keeper or admin permissions,
         * throw the exception.
         */
       if (checkCryptKeeperPermissions())
            mContext.enforceCallingOrSelfPermission(
                    android.Manifest.permission.","[0.843, 0.837]"
22,"['4a30c150e58ec67edb92a7bec5ea48cebd6b90d4', '6fc85c43e31aad55eecd51d3b0de34715ae03810']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/am/ActivityManagerService.java,"[(552, 557, 6), (578, 582, 5)]","    /* Freq Aggr boost objects */
    public static BoostFramework mPerfServiceStartHint = null;
    /* UX perf event object */
    public static BoostFramework mUxPerf = new BoostFramework();

    final OomAdjuster mOomAdjuster;
","    /* Freq Aggr boost objects */
    public static BoostFramework mPerfServiceStartHint = null;
    /* UX perf event object */
    public static BoostFramework mUxPerf = new BoostFramework();
    public static boolean mForceStopKill = false;
","    /* Freq Aggr boost objects */
    public static BoostFramework mPerfServiceStartHint = null;
    /* UX perf event object */
    public static BoostFramework mUxPerf = new BoostFramework();
","[0.839, 0.794]"
23,"['4a30c150e58ec67edb92a7bec5ea48cebd6b90d4', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",packages/SettingsLib/src/com/android/settingslib/wifi/AccessPoint.java,"[(190, 199, 10), (225, 242, 18)]","    private static final int LEGACY_CAPABLE_BSSID = 0;
    private static final int HT_CAPABLE_BSSID = 1;
    private static final int VHT_CAPABLE_BSSID = 2;
    private static final int HE_CAPABLE_BSSID = 3;
    private static final int MAX_CAPABLE_BSSID = Integer.MAX_VALUE;

    private static final int WIFI_GENERATION_LEGACY = 0;
    private static final int WIFI_GENERATION_4 = 4;
    private static final int WIFI_GENERATION_5 = 5;
    private static final int WIFI_GENERATION_6 = 6;
","    private static final int LEGACY_CAPABLE_BSSID = 0;
    private static final int HT_CAPABLE_BSSID = 1;
    private static final int VHT_CAPABLE_BSSID = 2;
    private static final int HE_CAPABLE_BSSID = 3;
    private static final int MAX_CAPABLE_BSSID = Integer.MAX_VALUE;

    private static final int WIFI_GENERATION_LEGACY = 0;
    private static final int WIFI_GENERATION_4 = 4;
    private static final int WIFI_GENERATION_5 = 5;
    private static final int WIFI_GENERATION_6 = 6;

    /**
     * The number of distinct wifi levels.
     *
     * <p>Must keep in sync with {@link R.array.wifi_signal} and {@link WifiManager#RSSI_LEVELS}.
     */
    public static final int SIGNAL_LEVELS = 5;

","    private static final int LEGACY_CAPABLE_BSSID = 0;
    private static final int HT_CAPABLE_BSSID = 1;
    private static final int VHT_CAPABLE_BSSID = 2;
    private static final int HE_CAPABLE_BSSID = 3;
    private static final int MAX_CAPABLE_BSSID = Integer.MAX_VALUE;

    private static final int WIFI_GENERATION_LEGACY = 0;
    private static final int WIFI_GENERATION_4 = 4;
    private static final int WIFI_GENERATION_5 = 5;
    private static final int WIFI_GENERATION_6 = 6;
","[1.0, 0.697]"
24,"['4a30c150e58ec67edb92a7bec5ea48cebd6b90d4', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/locksettings/LockSettingsService.java,"[(2663, 2664, 2), (2806, 2806, 1)]","            // during boot.
            clearUserKeyAuth(userId, null, auth.deriveDiskEncryptionKey());
","            clearUserKeyAuth(userId, null, auth.deriveDiskEncryptionKey());
","            clearUserKeyAuth(userId, null, auth.deriveDiskEncryptionKey());
","[0.731, 1.0]"
25,"['4a30c150e58ec67edb92a7bec5ea48cebd6b90d4', '7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",packages/SystemUI/src/com/android/systemui/qs/QSPanel.java,"[(120, 121, 2), (137, 138, 2)]","
        updateResources();
","
        updateResources();
","
        updateResources();
","[1.0, 1.0]"
26,"['4e4914b22b779e6376bb00ae20636175b2a70d8c', '3d2fc559e13b7293212955f1858d443f4fe8234e']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",telecomm/java/android/telecom/ConnectionService.java,"[(184, 185, 2), (199, 200, 2)]","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","[1.0, 1.0]"
27,"['4e4914b22b779e6376bb00ae20636175b2a70d8c', 'af02bd5317cc0cced0a7646d5bbf407a181dda9c']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",telecomm/java/android/telecom/ConnectionService.java,"[(184, 185, 2), (198, 199, 2)]","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","[1.0, 1.0]"
28,"['4e4914b22b779e6376bb00ae20636175b2a70d8c', 'd28a4f6b38dbab44128b4319f665dd65c3e4ec2c']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",telecomm/java/android/telecom/ConnectionService.java,"[(184, 185, 2), (191, 192, 2)]","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","[1.0, 1.0]"
29,"['4e4914b22b779e6376bb00ae20636175b2a70d8c', '4e4914b22b779e6376bb00ae20636175b2a70d8c']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java,"[(144, 144, 1), (144, 144, 1)]","    private static final int MSG_LOCALE_CHANGED = 500;
","    private static final int MSG_LOCALE_CHANGED = 500;
","    private static final int MSG_LOCALE_CHANGED = 500;
","[1.0, 1.0]"
30,"['4e4914b22b779e6376bb00ae20636175b2a70d8c', '4e4914b22b779e6376bb00ae20636175b2a70d8c']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java,"[(334, 335, 2), (334, 335, 2)]","                case MSG_LOCALE_CHANGED:
                    handleLocaleChanged();
","                case MSG_LOCALE_CHANGED:
                    handleLocaleChanged();
","                case MSG_LOCALE_CHANGED:
                    handleLocaleChanged();
","[1.0, 1.0]"
31,"['4e4914b22b779e6376bb00ae20636175b2a70d8c', '4e4914b22b779e6376bb00ae20636175b2a70d8c']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java,"[(802, 803, 2), (802, 803, 2)]","            } else if (Intent.ACTION_LOCALE_CHANGED.equals(action)) {
                mHandler.sendEmptyMessage(MSG_LOCALE_CHANGED);
","            } else if (Intent.ACTION_LOCALE_CHANGED.equals(action)) {
                mHandler.sendEmptyMessage(MSG_LOCALE_CHANGED);
","            } else if (Intent.ACTION_LOCALE_CHANGED.equals(action)) {
                mHandler.sendEmptyMessage(MSG_LOCALE_CHANGED);
","[1.0, 1.0]"
32,"['4e4914b22b779e6376bb00ae20636175b2a70d8c', '4e4914b22b779e6376bb00ae20636175b2a70d8c']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",telecomm/java/android/telecom/Connection.java,"[(331, 337, 7), (331, 337, 7)]","    /**
     * Add participant in an active or conference call option
     *
     * @hide
     */
    public static final int CAPABILITY_ADD_PARTICIPANT = 0x02000000;

","    /**
     * Add participant in an active or conference call option
     *
     * @hide
     */
    public static final int CAPABILITY_ADD_PARTICIPANT = 0x02000000;

","    /**
     * Add participant in an active or conference call option
     *
     * @hide
     */
    public static final int CAPABILITY_ADD_PARTICIPANT = 0x02000000;

","[1.0, 1.0]"
33,"['4e4914b22b779e6376bb00ae20636175b2a70d8c', '4e4914b22b779e6376bb00ae20636175b2a70d8c']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",telecomm/java/android/telecom/ConnectionService.java,"[(184, 185, 2), (184, 185, 2)]","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","[1.0, 1.0]"
34,"['4e4914b22b779e6376bb00ae20636175b2a70d8c', '4e4914b22b779e6376bb00ae20636175b2a70d8c']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/phone/PanelView.java,"[(53, 54, 2), (53, 54, 2)]","import com.android.systemui.statusbar.policy.HeadsUpManager;
import android.util.BoostFramework;
","import com.android.systemui.statusbar.policy.HeadsUpManager;
import android.util.BoostFramework;
","import com.android.systemui.statusbar.policy.HeadsUpManager;
import android.util.BoostFramework;
","[1.0, 1.0]"
35,"['4e4914b22b779e6376bb00ae20636175b2a70d8c', '4e4914b22b779e6376bb00ae20636175b2a70d8c']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",telecomm/java/android/telecom/Call.java,"[(355, 359, 5), (355, 359, 5)]","        /**
         * Add participant in an active or conference call option
         * @hide
         */
        public static final int CAPABILITY_ADD_PARTICIPANT = 0x01000000;
","        /**
         * Add participant in an active or conference call option
         * @hide
         */
        public static final int CAPABILITY_ADD_PARTICIPANT = 0x01000000;
","        /**
         * Add participant in an active or conference call option
         * @hide
         */
        public static final int CAPABILITY_ADD_PARTICIPANT = 0x01000000;
","[1.0, 1.0]"
36,"['4e4914b22b779e6376bb00ae20636175b2a70d8c', '4e4914b22b779e6376bb00ae20636175b2a70d8c']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",telecomm/java/android/telecom/Call.java,"[(537, 538, 2), (537, 538, 2)]","            if (can(capabilities, CAPABILITY_ADD_PARTICIPANT)) {
                builder.append("" CAPABILITY_ADD_PARTICIPANT"");
","            if (can(capabilities, CAPABILITY_ADD_PARTICIPANT)) {
                builder.append("" CAPABILITY_ADD_PARTICIPANT"");
","            if (can(capabilities, CAPABILITY_ADD_PARTICIPANT)) {
                builder.append("" CAPABILITY_ADD_PARTICIPANT"");
","[1.0, 1.0]"
37,"['567b4cf7b54062947b5eabe6ecef7b70fbb7301b', '3d2fc559e13b7293212955f1858d443f4fe8234e']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/am/ActivityManagerConstants.java,"[(25, 26, 2), (28, 29, 2)]","import android.os.SystemProperties;
import android.os.Process;
","import android.os.SystemProperties;
import android.os.Process;
","import android.os.SystemProperties;
import android.os.Process;
","[1.0, 1.0]"
38,"['567b4cf7b54062947b5eabe6ecef7b70fbb7301b', '62f4dee264cabcd5595e6e4c0a6ab3228281d3e0']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/audio/AudioService.java,"[(3546, 3547, 2), (4056, 4056, 1)]","        Log.i(TAG, ""In startBluetoothSco()"");
        int scoAudioMode =
","        Log.i(TAG, ""In startBluetoothScoVirtualCall()"");
","        Log.i(TAG, ""In startBluetoothSco","[0.548, 0.702]"
39,"['567b4cf7b54062947b5eabe6ecef7b70fbb7301b', '62f4dee264cabcd5595e6e4c0a6ab3228281d3e0']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/audio/AudioService.java,"[(3546, 3547, 2), (4064, 4064, 1)]","        Log.i(TAG, ""In startBluetoothSco()"");
        int scoAudioMode =
","        Log.i(TAG, ""In startBluetoothScoInt(), scoAudioMode: "" + scoAudioMode);
","        Log.i(TAG, ""In startBluetoothSco","[0.548, 0.5]"
40,"['567b4cf7b54062947b5eabe6ecef7b70fbb7301b', '7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/audio/AudioService.java,"[(3024, 3025, 2), (3272, 3272, 1)]","            Log.i(TAG, ""In setMode(), calling disconnectBluetoothSco()"");
            disconnectBluetoothSco(newModeOwnerPid);
","            Log.i(TAG, ""In setMode(), calling disconnectBluetoothSco()"");
","            Log.i(TAG, ""In setMode(), calling disconnectBluetoothSco()"");
","[0.583, 1.0]"
41,"['567b4cf7b54062947b5eabe6ecef7b70fbb7301b', '27e7f8c2aa4ce0a2f59b3bf1969b06bfd1e9ebca']","['aospa-quartz-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/am/ActivityManagerConstants.java,"[(25, 26, 2), (29, 30, 2)]","import android.os.SystemProperties;
import android.os.Process;
","import android.os.Process;
import android.os.SystemProperties;
","import android.os.SystemProperties;
","[0.571, 0.571]"
42,"['567b4cf7b54062947b5eabe6ecef7b70fbb7301b', '3e8cb98421761bb7dfafe59a22a15fe2e176f272']","['aospa-quartz-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/audio/AudioService.java,"[(3546, 3547, 2), (5397, 5397, 1)]","        Log.i(TAG, ""In startBluetoothSco()"");
        int scoAudioMode =
","        Log.i(TAG, ""In startBluetoothScoVirtualCall()"");
","        Log.i(TAG, ""In startBluetoothSco","[0.548, 0.702]"
43,"['587cb520382d349c91bd59ada23fbefcdb44314f', '3933f277a025be704e68ea593536e492831a7e05']","['aospa-quartz-SAP-block_text', 'aospa-sapphire-SAP-block_text']",packages/SystemUI/src/com/android/systemui/qs/QSPanel.java,"[(288, 291, 4), (485, 490, 6)]","        for (TileRecord r : mRecords) {
            r.tile.clearState();
        }
        refreshAllTiles();
","        for (TileRecord r : mRecords) {
            r.tile.clearState();
        }
        if (mListening) {
            refreshAllTiles();
        }
","        for (TileRecord r : mRecords) {
            r.tile.clearState();
        }
        ","[0.827, 0.607]"
44,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(83, 85, 3), (83, 85, 3)]","            false,
            0
    );
","            false,
            0
    );
","            false,
            0
    );
","[1.0, 1.0]"
45,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(98, 100, 3), (98, 100, 3)]","            true,
            TelephonyIcons.QS_DATA_3G
    );
","            true,
            TelephonyIcons.QS_DATA_3G
    );
","            true,
            TelephonyIcons.QS_DATA_3G
    );
","[1.0, 1.0]"
46,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(98, 100, 3), (137, 139, 3)]","            true,
            TelephonyIcons.QS_DATA_3G
    );
","            false,
            TelephonyIcons.QS_DATA_E
    );
","e,
            TelephonyIcons.QS_DATA_","[0.603, 0.603]"
47,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(98, 100, 3), (152, 154, 3)]","            true,
            TelephonyIcons.QS_DATA_3G
    );
","            true,
            TelephonyIcons.QS_DATA_1X
    );
","            true,
            TelephonyIcons.QS_DATA_","[0.841, 0.841]"
48,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(98, 100, 3), (167, 169, 3)]","            true,
            TelephonyIcons.QS_DATA_3G
    );
","            false,
            TelephonyIcons.QS_DATA_G
    );
","e,
            TelephonyIcons.QS_DATA_","[0.603, 0.603]"
49,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(98, 100, 3), (182, 184, 3)]","            true,
            TelephonyIcons.QS_DATA_3G
    );
","            false,
            TelephonyIcons.QS_DATA_H
    );
","e,
            TelephonyIcons.QS_DATA_","[0.603, 0.603]"
50,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(98, 100, 3), (197, 199, 3)]","            true,
            TelephonyIcons.QS_DATA_3G
    );
","            true,
            TelephonyIcons.QS_DATA_4G
    );
","            true,
            TelephonyIcons.QS_DATA_","[0.841, 0.841]"
51,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(98, 100, 3), (212, 214, 3)]","            true,
            TelephonyIcons.QS_DATA_3G
    );
","            true,
            TelephonyIcons.QS_DATA_4G_PLUS
    );
","            true,
            TelephonyIcons.QS_DATA_","[0.841, 0.779]"
52,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(98, 100, 3), (227, 229, 3)]","            true,
            TelephonyIcons.QS_DATA_3G
    );
","            true,
            TelephonyIcons.QS_DATA_LTE
    );
","            true,
            TelephonyIcons.QS_DATA_","[0.841, 0.828]"
53,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(98, 100, 3), (242, 244, 3)]","            true,
            TelephonyIcons.QS_DATA_3G
    );
","            true,
            TelephonyIcons.QS_DATA_LTE_PLUS
    );
","            true,
            TelephonyIcons.QS_DATA_","[0.841, 0.768]"
54,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(111, 112, 2), (111, 112, 2)]","            0, 0, false, 0
    );
","            0, 0, false, 0
    );
","            0, 0, false, 0
    );
","[1.0, 1.0]"
55,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(137, 139, 3), (137, 139, 3)]","            false,
            TelephonyIcons.QS_DATA_E
    );
","            false,
            TelephonyIcons.QS_DATA_E
    );
","            false,
            TelephonyIcons.QS_DATA_E
    );
","[1.0, 1.0]"
56,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(137, 139, 3), (152, 154, 3)]","            false,
            TelephonyIcons.QS_DATA_E
    );
","            true,
            TelephonyIcons.QS_DATA_1X
    );
","e,
            TelephonyIcons.QS_DATA_","[0.603, 0.603]"
57,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(137, 139, 3), (167, 169, 3)]","            false,
            TelephonyIcons.QS_DATA_E
    );
","            false,
            TelephonyIcons.QS_DATA_G
    );
","            false,
            TelephonyIcons.QS_DATA_","[0.857, 0.857]"
58,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(137, 139, 3), (182, 184, 3)]","            false,
            TelephonyIcons.QS_DATA_E
    );
","            false,
            TelephonyIcons.QS_DATA_H
    );
","            false,
            TelephonyIcons.QS_DATA_","[0.857, 0.857]"
59,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(137, 139, 3), (197, 199, 3)]","            false,
            TelephonyIcons.QS_DATA_E
    );
","            true,
            TelephonyIcons.QS_DATA_4G
    );
","e,
            TelephonyIcons.QS_DATA_","[0.603, 0.603]"
60,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(137, 139, 3), (212, 214, 3)]","            false,
            TelephonyIcons.QS_DATA_E
    );
","            true,
            TelephonyIcons.QS_DATA_4G_PLUS
    );
","e,
            TelephonyIcons.QS_DATA_","[0.603, 0.559]"
61,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(137, 139, 3), (227, 229, 3)]","            false,
            TelephonyIcons.QS_DATA_E
    );
","            true,
            TelephonyIcons.QS_DATA_LTE
    );
","e,
            TelephonyIcons.QS_DATA_","[0.603, 0.594]"
62,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(137, 139, 3), (242, 244, 3)]","            false,
            TelephonyIcons.QS_DATA_E
    );
","            true,
            TelephonyIcons.QS_DATA_LTE_PLUS
    );
","e,
            TelephonyIcons.QS_DATA_","[0.603, 0.551]"
63,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(152, 154, 3), (152, 154, 3)]","            true,
            TelephonyIcons.QS_DATA_1X
    );
","            true,
            TelephonyIcons.QS_DATA_1X
    );
","            true,
            TelephonyIcons.QS_DATA_1X
    );
","[1.0, 1.0]"
64,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(152, 154, 3), (167, 169, 3)]","            true,
            TelephonyIcons.QS_DATA_1X
    );
","            false,
            TelephonyIcons.QS_DATA_G
    );
","e,
            TelephonyIcons.QS_DATA_","[0.603, 0.603]"
65,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(152, 154, 3), (182, 184, 3)]","            true,
            TelephonyIcons.QS_DATA_1X
    );
","            false,
            TelephonyIcons.QS_DATA_H
    );
","e,
            TelephonyIcons.QS_DATA_","[0.603, 0.603]"
66,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(152, 154, 3), (197, 199, 3)]","            true,
            TelephonyIcons.QS_DATA_1X
    );
","            true,
            TelephonyIcons.QS_DATA_4G
    );
","            true,
            TelephonyIcons.QS_DATA_","[0.841, 0.841]"
67,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(152, 154, 3), (212, 214, 3)]","            true,
            TelephonyIcons.QS_DATA_1X
    );
","            true,
            TelephonyIcons.QS_DATA_4G_PLUS
    );
","            true,
            TelephonyIcons.QS_DATA_","[0.841, 0.779]"
68,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(152, 154, 3), (227, 229, 3)]","            true,
            TelephonyIcons.QS_DATA_1X
    );
","            true,
            TelephonyIcons.QS_DATA_LTE
    );
","            true,
            TelephonyIcons.QS_DATA_","[0.841, 0.828]"
69,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(152, 154, 3), (242, 244, 3)]","            true,
            TelephonyIcons.QS_DATA_1X
    );
","            true,
            TelephonyIcons.QS_DATA_LTE_PLUS
    );
","            true,
            TelephonyIcons.QS_DATA_","[0.841, 0.768]"
70,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(167, 169, 3), (167, 169, 3)]","            false,
            TelephonyIcons.QS_DATA_G
    );
","            false,
            TelephonyIcons.QS_DATA_G
    );
","            false,
            TelephonyIcons.QS_DATA_G
    );
","[1.0, 1.0]"
71,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(167, 169, 3), (182, 184, 3)]","            false,
            TelephonyIcons.QS_DATA_G
    );
","            false,
            TelephonyIcons.QS_DATA_H
    );
","            false,
            TelephonyIcons.QS_DATA_","[0.857, 0.857]"
72,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(167, 169, 3), (197, 199, 3)]","            false,
            TelephonyIcons.QS_DATA_G
    );
","            true,
            TelephonyIcons.QS_DATA_4G
    );
","e,
            TelephonyIcons.QS_DATA_","[0.603, 0.603]"
73,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(167, 169, 3), (212, 214, 3)]","            false,
            TelephonyIcons.QS_DATA_G
    );
","            true,
            TelephonyIcons.QS_DATA_4G_PLUS
    );
","e,
            TelephonyIcons.QS_DATA_","[0.603, 0.559]"
74,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(167, 169, 3), (227, 229, 3)]","            false,
            TelephonyIcons.QS_DATA_G
    );
","            true,
            TelephonyIcons.QS_DATA_LTE
    );
","e,
            TelephonyIcons.QS_DATA_","[0.603, 0.594]"
75,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(167, 169, 3), (242, 244, 3)]","            false,
            TelephonyIcons.QS_DATA_G
    );
","            true,
            TelephonyIcons.QS_DATA_LTE_PLUS
    );
","e,
            TelephonyIcons.QS_DATA_","[0.603, 0.551]"
76,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(182, 184, 3), (182, 184, 3)]","            false,
            TelephonyIcons.QS_DATA_H
    );
","            false,
            TelephonyIcons.QS_DATA_H
    );
","            false,
            TelephonyIcons.QS_DATA_H
    );
","[1.0, 1.0]"
77,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(182, 184, 3), (197, 199, 3)]","            false,
            TelephonyIcons.QS_DATA_H
    );
","            true,
            TelephonyIcons.QS_DATA_4G
    );
","e,
            TelephonyIcons.QS_DATA_","[0.603, 0.603]"
78,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(182, 184, 3), (212, 214, 3)]","            false,
            TelephonyIcons.QS_DATA_H
    );
","            true,
            TelephonyIcons.QS_DATA_4G_PLUS
    );
","e,
            TelephonyIcons.QS_DATA_","[0.603, 0.559]"
79,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(182, 184, 3), (227, 229, 3)]","            false,
            TelephonyIcons.QS_DATA_H
    );
","            true,
            TelephonyIcons.QS_DATA_LTE
    );
","e,
            TelephonyIcons.QS_DATA_","[0.603, 0.594]"
80,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(182, 184, 3), (242, 244, 3)]","            false,
            TelephonyIcons.QS_DATA_H
    );
","            true,
            TelephonyIcons.QS_DATA_LTE_PLUS
    );
","e,
            TelephonyIcons.QS_DATA_","[0.603, 0.551]"
81,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(197, 199, 3), (197, 199, 3)]","            true,
            TelephonyIcons.QS_DATA_4G
    );
","            true,
            TelephonyIcons.QS_DATA_4G
    );
","            true,
            TelephonyIcons.QS_DATA_4G
    );
","[1.0, 1.0]"
82,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(197, 199, 3), (212, 214, 3)]","            true,
            TelephonyIcons.QS_DATA_4G
    );
","            true,
            TelephonyIcons.QS_DATA_4G_PLUS
    );
","            true,
            TelephonyIcons.QS_DATA_4G","[0.873, 0.809]"
83,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(197, 199, 3), (227, 229, 3)]","            true,
            TelephonyIcons.QS_DATA_4G
    );
","            true,
            TelephonyIcons.QS_DATA_LTE
    );
","            true,
            TelephonyIcons.QS_DATA_","[0.841, 0.828]"
84,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(197, 199, 3), (242, 244, 3)]","            true,
            TelephonyIcons.QS_DATA_4G
    );
","            true,
            TelephonyIcons.QS_DATA_LTE_PLUS
    );
","            true,
            TelephonyIcons.QS_DATA_","[0.841, 0.768]"
85,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(212, 214, 3), (212, 214, 3)]","            true,
            TelephonyIcons.QS_DATA_4G_PLUS
    );
","            true,
            TelephonyIcons.QS_DATA_4G_PLUS
    );
","            true,
            TelephonyIcons.QS_DATA_4G_PLUS
    );
","[1.0, 1.0]"
86,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(212, 214, 3), (227, 229, 3)]","            true,
            TelephonyIcons.QS_DATA_4G_PLUS
    );
","            true,
            TelephonyIcons.QS_DATA_LTE
    );
","            true,
            TelephonyIcons.QS_DATA_","[0.779, 0.828]"
87,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(212, 214, 3), (242, 244, 3)]","            true,
            TelephonyIcons.QS_DATA_4G_PLUS
    );
","            true,
            TelephonyIcons.QS_DATA_LTE_PLUS
    );
","            true,
            TelephonyIcons.QS_DATA_","[0.779, 0.768]"
88,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(227, 229, 3), (227, 229, 3)]","            true,
            TelephonyIcons.QS_DATA_LTE
    );
","            true,
            TelephonyIcons.QS_DATA_LTE
    );
","            true,
            TelephonyIcons.QS_DATA_LTE
    );
","[1.0, 1.0]"
89,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(227, 229, 3), (242, 244, 3)]","            true,
            TelephonyIcons.QS_DATA_LTE
    );
","            true,
            TelephonyIcons.QS_DATA_LTE_PLUS
    );
","            true,
            TelephonyIcons.QS_DATA_LTE","[0.875, 0.812]"
90,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(242, 244, 3), (242, 244, 3)]","            true,
            TelephonyIcons.QS_DATA_LTE_PLUS
    );
","            true,
            TelephonyIcons.QS_DATA_LTE_PLUS
    );
","            true,
            TelephonyIcons.QS_DATA_LTE_PLUS
    );
","[1.0, 1.0]"
91,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/TelephonyIcons.java,"[(255, 661, 407), (255, 661, 407)]","            R.string.accessibility_cell_data_off,
            TelephonyIcons.ICON_DATA_DISABLED,
            false,
            TelephonyIcons.QS_ICON_DATA_DISABLED
    );

    static final int DATA_TYPE_UNKNOWN = 0;
    static final int DATA_TYPE_G = 1;
    static final int DATA_TYPE_E = 2;
    static final int DATA_TYPE_2G = 3;
    static final int DATA_TYPE_3G = 4;
    static final int DATA_TYPE_4G = 5;
    static final int DATA_TYPE_H = 6;
    static final int DATA_TYPE_HP = 7;
    static final int DATA_TYPE_1X = 8;
    static final int DATA_TYPE_LTE = 9;
    static final int DATA_TYPE_4G_PLUS = 10;

    static final int SIGNAL_STRENGTH_TYPE_G = 0;
    static final int SIGNAL_STRENGTH_TYPE_E = 1;
    static final int SIGNAL_STRENGTH_TYPE_3G = 2;
    static final int SIGNAL_STRENGTH_TYPE_4G = 3;
    static final int SIGNAL_STRENGTH_TYPE_H = 4;
    static final int SIGNAL_STRENGTH_TYPE_HP = 5;
    static final int SIGNAL_STRENGTH_TYPE_1X = 6;
    static final int SIGNAL_STRENGTH_TYPE_CDMA = 7;
    static final int SIGNAL_STRENGTH_TYPE_UMTS = 8;
    static final int SIGNAL_STRENGTH_TYPE_4G_PLUS = 9;

    static final int DEFAULT_SUB = 0;
    static final int INET_TYPE_NUM = 2;
    static final int SIGNAL_LEVEL_NUM = SignalStrength.NUM_SIGNAL_STRENGTH_BINS;
    static final String TAG = ""TelephonyIcons"";
    static final String NS = ""com.android.systemui"";
    static final boolean DEBUG = Log.isLoggable(TAG, Log.DEBUG);;

    static String[] mDataTypeArray, mDataTypeGenerationArray;
    static String[] mDataTypeDescriptionArray, mDataTypeGenerationDescArray;
    static String[] mDataActivityArray;
    static String[] mSignalStrengthArray, mSignalStrengthRoamingArray;
    static String[] mSignalNullArray;
    static String[] mSignalStrengthDesc;

    static int[] mSelectedDataTypeIcon;
    static int[] mSelectedQSDataTypeIcon;
    static String[] mSelectedDataTypeDesc;
    static int[] mSelectedDataActivityIndex;
    static int[] mSelectedSignalStreagthIndex;
    static SparseArray<Integer> mStacked2SingleIconLookup;

    private static Resources mRes;
    private static boolean isInitiated = false;

    static void readIconsFromXml(Context context) {
        if (isInitiated) {
            log(TAG, ""readIconsFromXml, already read!"");
            return;
        }

        mRes = context.getResources();
        try {
            mDataTypeArray = mRes.getStringArray(R.array.multi_data_type);
            mDataTypeDescriptionArray = mRes.getStringArray(
                    R.array.telephony_data_type_description);
            mDataTypeGenerationArray = mRes.getStringArray(
                    R.array.telephony_data_type_generation);
            mDataTypeGenerationDescArray = mRes.getStringArray(
                    R.array.telephony_data_type_generation_description);
            mDataActivityArray = mRes.getStringArray(R.array.multi_data_activity);
            mSignalStrengthArray = mRes.getStringArray(R.array.multi_signal_strength);
            mSignalStrengthRoamingArray = mRes.getStringArray(
                    R.array.multi_signal_strength_roaming);
            mSignalNullArray = mRes.getStringArray(R.array.multi_signal_null);
            mSignalStrengthDesc = mRes.getStringArray(R.array.signal_strength_description);
            initStacked2SingleIconLookup();
        } catch (android.content.res.Resources.NotFoundException e) {
            isInitiated = false;
            log(TAG, ""readIconsFromXml, exception happened: "" + e);
            return;
        }

        if (mSelectedDataTypeIcon == null
                && mDataTypeArray.length != 0) {
            mSelectedDataTypeIcon = new int[mDataTypeArray.length];
        }
        if (mSelectedQSDataTypeIcon == null
                && mDataTypeArray.length != 0) {
            mSelectedQSDataTypeIcon = new int[mDataTypeArray.length];
        }
        if (mSelectedDataTypeDesc == null
                && mDataTypeArray.length != 0) {
            mSelectedDataTypeDesc = new String[mDataTypeArray.length];
        }
        if (mSelectedDataActivityIndex == null
                && mDataActivityArray.length != 0) {
            mSelectedDataActivityIndex = new int[mDataActivityArray.length];
        }
        if (mSelectedSignalStreagthIndex == null
                && mSignalStrengthArray.length != 0) {
            mSelectedSignalStreagthIndex = new int[mSignalStrengthArray.length];
        }
        isInitiated = true;
    }

    static void initStacked2SingleIconLookup() {
        mStacked2SingleIconLookup = new SparseArray<>();
        TypedArray stackedIcons = mRes.obtainTypedArray(R.array.stacked_signal_icons);
        TypedArray singleIcons = mRes.obtainTypedArray(R.array.single_signal_icons);

        mStacked2SingleIconLookup.clear();
        for (int i = 0; i < stackedIcons.length() && i < singleIcons.length(); i++) {
            mStacked2SingleIconLookup.put(stackedIcons.getResourceId(i,0),
                    singleIcons.getResourceId(i,0));
        }
        stackedIcons.recycle();
        singleIcons.recycle();
        log(TAG, ""initStacked2SingleIconLookup: size="" + mStacked2SingleIconLookup.size());
    }

    static int getSignalNullIcon(int slot) {
        if (mSignalNullArray == null) {
            return 0;
        }
        String resName = mSignalNullArray[slot];
        log(TAG, ""null signal icon name: "" + resName);
        int resId = mRes.getIdentifier(resName, null, NS);
        return resId;
    }

    static void updateDataType(int slot, int type, boolean showAtLeast3G,
                               boolean show4GforLte, boolean hspaDistinguishable, int inet) {
        log(TAG, ""updateDataType ""
                + String.format(""slot=%d, type=%d, inetCondition=%d"",
                slot, type, inet)
                + "" showAtLeast3G="" + String.valueOf(showAtLeast3G)
                + "" show4GforLte="" + String.valueOf(show4GforLte)
                + "" hspaDistinguishable="" + String.valueOf(hspaDistinguishable));

        String resName = mDataTypeArray[slot];
        int resId = mRes.getIdentifier(resName, null, NS);
        String[] dataTypeArray = mRes.getStringArray(resId);

        log(TAG, ""data type item name: "" + resName + "" id:"" + resId);

        switch (type) {
            case TelephonyManager.NETWORK_TYPE_UNKNOWN:
                if (!showAtLeast3G) {
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = 0;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedDataActivityIndex[slot] = 0;
                    mSelectedSignalStreagthIndex[slot] = 0;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_EDGE:
                if (!showAtLeast3G) {
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_E;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_E;
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_E;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_UMTS:
            case TelephonyManager.NETWORK_TYPE_TD_SCDMA:
                mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                        dataTypeArray[type], null, NS);
                mSelectedQSDataTypeIcon[slot] = ICON_3G;
                mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_UMTS;
                break;
            case TelephonyManager.NETWORK_TYPE_HSDPA:
            case TelephonyManager.NETWORK_TYPE_HSUPA:
            case TelephonyManager.NETWORK_TYPE_HSPA:
                if (hspaDistinguishable) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_H;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_H;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_H;
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[0], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_3G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[0];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                }
                break;
            case TelephonyManager.NETWORK_TYPE_HSPAP:
                if (hspaDistinguishable) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_HP;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_H;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_HP;
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[0], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_3G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[0];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                }
                break;
            case TelephonyManager.NETWORK_TYPE_CDMA:
                if (!showAtLeast3G) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_1X;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_1X;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_CDMA;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_1xRTT:
                if (!showAtLeast3G) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_1X;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_1X;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_1X;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_EVDO_0: //fall through
            case TelephonyManager.NETWORK_TYPE_EVDO_A:
            case TelephonyManager.NETWORK_TYPE_EVDO_B:
            case TelephonyManager.NETWORK_TYPE_EHRPD:
                mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                        dataTypeArray[type], null, NS);
                mSelectedQSDataTypeIcon[slot] = ICON_3G;
                mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                break;
            case TelephonyManager.NETWORK_TYPE_LTE:
            case TelephonyManager.NETWORK_TYPE_LTE_CA:
                if (show4GforLte) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_4G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[1], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_4G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[1];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_4G;

                    if ( type == TelephonyManager.NETWORK_TYPE_LTE_CA) {
                        //Select 4G+ icon.
                        mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                                mDataTypeGenerationArray[2], null, NS);
                        mSelectedQSDataTypeIcon[slot] = ICON_4G_PLUS;
                        mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_4G_PLUS;
                        mSelectedDataActivityIndex[slot] = DATA_TYPE_4G_PLUS;
                    }
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_LTE;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_LTE;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_4G;
                }
                break;
            case TelephonyManager.NETWORK_TYPE_GPRS:
            case TelephonyManager.NETWORK_TYPE_GSM:
                if (!showAtLeast3G) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_G;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_G;
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[0], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_3G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[0];;
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                }
                break;
            default:
                mSelectedDataActivityIndex[slot] = DATA_TYPE_UNKNOWN;
                mSelectedDataTypeIcon[slot] = 0;
                mSelectedQSDataTypeIcon[slot] = 0;
                mSelectedDataTypeDesc[slot] = """";
                mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_G;
                break;
        }
        log(TAG, ""updateDataType "" + String.format(
                ""mSelectedDataTypeIcon[%d]=%d, mSelectedDataActivityIndex=%d"",
                slot, mSelectedDataTypeIcon[slot], mSelectedDataActivityIndex[slot]));
    }


    static int getQSDataTypeIcon(int slot) {
        return mSelectedQSDataTypeIcon[slot];
    }

    static int getDataTypeIcon(int slot) {
        log(TAG, ""getDataTypeIcon "" + String.format(""sub=%d"", slot));
        return mSelectedDataTypeIcon[slot];
    }

    static int getDataTypeDesc(int slot) {
        return mRes.getIdentifier(mSelectedDataTypeDesc[slot], null, NS);
    }

    static int getDataActivity(int slot, int activity) {
        log(TAG, String.format(""getDataActivity, slot=%d, activity=%d"",
                slot, activity));

        String[] dataActivityArray = mRes.getStringArray(
                mRes.getIdentifier(mDataActivityArray[slot], null, NS));
        String[] selectedTypeArray = mRes.getStringArray(mRes.getIdentifier(
                dataActivityArray[mSelectedDataActivityIndex[slot]], null, NS));

        return mRes.getIdentifier(selectedTypeArray[activity], null, NS);
    }

    static int getSignalStrengthIcon(int slot, int inet, int level, boolean roaming) {
        log(TAG, ""getSignalStrengthIcon: "" + String.format(
                ""slot=%d, inetCondition=%d, level=%d, roaming=%b"", slot, inet, level, roaming));

        String[] signalStrengthArray, selectedTypeArray;

        signalStrengthArray = mRes.getStringArray(mRes.getIdentifier(!roaming ?
                mSignalStrengthArray[slot] : mSignalStrengthRoamingArray[slot], null, NS));
        log(TAG, String.format(""signalStrengthArray.length=%d"", signalStrengthArray.length));

        selectedTypeArray = mRes.getStringArray(mRes.getIdentifier(
                signalStrengthArray[mSelectedSignalStreagthIndex[slot]], null, NS));
        log(TAG, String.format(""selectedTypeArray.length=%d"", selectedTypeArray.length));

        String[] inetArray = mRes.getStringArray(
                mRes.getIdentifier(selectedTypeArray[inet], null, NS));
        log(TAG, String.format(""inetArray.length=%d"", inetArray.length));

        return mRes.getIdentifier(inetArray[level], null, NS);
    }


    static int convertMobileStrengthIcon(int stackedIcon) {
        if (mStacked2SingleIconLookup == null) {
            return stackedIcon;
        }
        int index = mStacked2SingleIconLookup.indexOfKey(stackedIcon);
        if (index >= 0) {
            return mStacked2SingleIconLookup.get(stackedIcon);
        }
        return stackedIcon;
    }

    static int getStackedVoiceIcon(int level) {
        int retValue = 0;
        switch(level){
            case SignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN:
                retValue = R.drawable.stat_sys_signal_0_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_POOR:
                retValue = R.drawable.stat_sys_signal_1_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_MODERATE:
                retValue = R.drawable.stat_sys_signal_2_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_GOOD:
                retValue = R.drawable.stat_sys_signal_3_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_GREAT:
                retValue = R.drawable.stat_sys_signal_4_2g;
                break;
            default:
                break;
        }
        return retValue;
    }

    static int getRoamingSignalIconId(int level, int inet){
        return TELEPHONY_SIGNAL_STRENGTH_ROAMING_R[inet][level];
    }

    static int[]  getSignalStrengthDes(int slot) {
        int[] resId = new int[SIGNAL_LEVEL_NUM];
        for (int i = 0; i < SIGNAL_LEVEL_NUM; i++) {
            resId[i] = mRes.getIdentifier(mSignalStrengthDesc[i], null, NS);
        }
        return resId;
    }

    private static void log(String tag, String str){
        if (DEBUG) {
            Log.d(tag, str);
        }
    }
","            R.string.accessibility_cell_data_off,
            TelephonyIcons.ICON_DATA_DISABLED,
            false,
            TelephonyIcons.QS_ICON_DATA_DISABLED
    );

    static final int DATA_TYPE_UNKNOWN = 0;
    static final int DATA_TYPE_G = 1;
    static final int DATA_TYPE_E = 2;
    static final int DATA_TYPE_2G = 3;
    static final int DATA_TYPE_3G = 4;
    static final int DATA_TYPE_4G = 5;
    static final int DATA_TYPE_H = 6;
    static final int DATA_TYPE_HP = 7;
    static final int DATA_TYPE_1X = 8;
    static final int DATA_TYPE_LTE = 9;
    static final int DATA_TYPE_4G_PLUS = 10;

    static final int SIGNAL_STRENGTH_TYPE_G = 0;
    static final int SIGNAL_STRENGTH_TYPE_E = 1;
    static final int SIGNAL_STRENGTH_TYPE_3G = 2;
    static final int SIGNAL_STRENGTH_TYPE_4G = 3;
    static final int SIGNAL_STRENGTH_TYPE_H = 4;
    static final int SIGNAL_STRENGTH_TYPE_HP = 5;
    static final int SIGNAL_STRENGTH_TYPE_1X = 6;
    static final int SIGNAL_STRENGTH_TYPE_CDMA = 7;
    static final int SIGNAL_STRENGTH_TYPE_UMTS = 8;
    static final int SIGNAL_STRENGTH_TYPE_4G_PLUS = 9;

    static final int DEFAULT_SUB = 0;
    static final int INET_TYPE_NUM = 2;
    static final int SIGNAL_LEVEL_NUM = SignalStrength.NUM_SIGNAL_STRENGTH_BINS;
    static final String TAG = ""TelephonyIcons"";
    static final String NS = ""com.android.systemui"";
    static final boolean DEBUG = Log.isLoggable(TAG, Log.DEBUG);;

    static String[] mDataTypeArray, mDataTypeGenerationArray;
    static String[] mDataTypeDescriptionArray, mDataTypeGenerationDescArray;
    static String[] mDataActivityArray;
    static String[] mSignalStrengthArray, mSignalStrengthRoamingArray;
    static String[] mSignalNullArray;
    static String[] mSignalStrengthDesc;

    static int[] mSelectedDataTypeIcon;
    static int[] mSelectedQSDataTypeIcon;
    static String[] mSelectedDataTypeDesc;
    static int[] mSelectedDataActivityIndex;
    static int[] mSelectedSignalStreagthIndex;
    static SparseArray<Integer> mStacked2SingleIconLookup;

    private static Resources mRes;
    private static boolean isInitiated = false;

    static void readIconsFromXml(Context context) {
        if (isInitiated) {
            log(TAG, ""readIconsFromXml, already read!"");
            return;
        }

        mRes = context.getResources();
        try {
            mDataTypeArray = mRes.getStringArray(R.array.multi_data_type);
            mDataTypeDescriptionArray = mRes.getStringArray(
                    R.array.telephony_data_type_description);
            mDataTypeGenerationArray = mRes.getStringArray(
                    R.array.telephony_data_type_generation);
            mDataTypeGenerationDescArray = mRes.getStringArray(
                    R.array.telephony_data_type_generation_description);
            mDataActivityArray = mRes.getStringArray(R.array.multi_data_activity);
            mSignalStrengthArray = mRes.getStringArray(R.array.multi_signal_strength);
            mSignalStrengthRoamingArray = mRes.getStringArray(
                    R.array.multi_signal_strength_roaming);
            mSignalNullArray = mRes.getStringArray(R.array.multi_signal_null);
            mSignalStrengthDesc = mRes.getStringArray(R.array.signal_strength_description);
            initStacked2SingleIconLookup();
        } catch (android.content.res.Resources.NotFoundException e) {
            isInitiated = false;
            log(TAG, ""readIconsFromXml, exception happened: "" + e);
            return;
        }

        if (mSelectedDataTypeIcon == null
                && mDataTypeArray.length != 0) {
            mSelectedDataTypeIcon = new int[mDataTypeArray.length];
        }
        if (mSelectedQSDataTypeIcon == null
                && mDataTypeArray.length != 0) {
            mSelectedQSDataTypeIcon = new int[mDataTypeArray.length];
        }
        if (mSelectedDataTypeDesc == null
                && mDataTypeArray.length != 0) {
            mSelectedDataTypeDesc = new String[mDataTypeArray.length];
        }
        if (mSelectedDataActivityIndex == null
                && mDataActivityArray.length != 0) {
            mSelectedDataActivityIndex = new int[mDataActivityArray.length];
        }
        if (mSelectedSignalStreagthIndex == null
                && mSignalStrengthArray.length != 0) {
            mSelectedSignalStreagthIndex = new int[mSignalStrengthArray.length];
        }
        isInitiated = true;
    }

    static void initStacked2SingleIconLookup() {
        mStacked2SingleIconLookup = new SparseArray<>();
        TypedArray stackedIcons = mRes.obtainTypedArray(R.array.stacked_signal_icons);
        TypedArray singleIcons = mRes.obtainTypedArray(R.array.single_signal_icons);

        mStacked2SingleIconLookup.clear();
        for (int i = 0; i < stackedIcons.length() && i < singleIcons.length(); i++) {
            mStacked2SingleIconLookup.put(stackedIcons.getResourceId(i,0),
                    singleIcons.getResourceId(i,0));
        }
        stackedIcons.recycle();
        singleIcons.recycle();
        log(TAG, ""initStacked2SingleIconLookup: size="" + mStacked2SingleIconLookup.size());
    }

    static int getSignalNullIcon(int slot) {
        if (mSignalNullArray == null) {
            return 0;
        }
        String resName = mSignalNullArray[slot];
        log(TAG, ""null signal icon name: "" + resName);
        int resId = mRes.getIdentifier(resName, null, NS);
        return resId;
    }

    static void updateDataType(int slot, int type, boolean showAtLeast3G,
                               boolean show4GforLte, boolean hspaDistinguishable, int inet) {
        log(TAG, ""updateDataType ""
                + String.format(""slot=%d, type=%d, inetCondition=%d"",
                slot, type, inet)
                + "" showAtLeast3G="" + String.valueOf(showAtLeast3G)
                + "" show4GforLte="" + String.valueOf(show4GforLte)
                + "" hspaDistinguishable="" + String.valueOf(hspaDistinguishable));

        String resName = mDataTypeArray[slot];
        int resId = mRes.getIdentifier(resName, null, NS);
        String[] dataTypeArray = mRes.getStringArray(resId);

        log(TAG, ""data type item name: "" + resName + "" id:"" + resId);

        switch (type) {
            case TelephonyManager.NETWORK_TYPE_UNKNOWN:
                if (!showAtLeast3G) {
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = 0;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedDataActivityIndex[slot] = 0;
                    mSelectedSignalStreagthIndex[slot] = 0;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_EDGE:
                if (!showAtLeast3G) {
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_E;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_E;
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_E;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_UMTS:
            case TelephonyManager.NETWORK_TYPE_TD_SCDMA:
                mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                        dataTypeArray[type], null, NS);
                mSelectedQSDataTypeIcon[slot] = ICON_3G;
                mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_UMTS;
                break;
            case TelephonyManager.NETWORK_TYPE_HSDPA:
            case TelephonyManager.NETWORK_TYPE_HSUPA:
            case TelephonyManager.NETWORK_TYPE_HSPA:
                if (hspaDistinguishable) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_H;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_H;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_H;
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[0], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_3G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[0];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                }
                break;
            case TelephonyManager.NETWORK_TYPE_HSPAP:
                if (hspaDistinguishable) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_HP;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_H;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_HP;
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[0], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_3G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[0];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                }
                break;
            case TelephonyManager.NETWORK_TYPE_CDMA:
                if (!showAtLeast3G) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_1X;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_1X;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_CDMA;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_1xRTT:
                if (!showAtLeast3G) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_1X;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_1X;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_1X;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_EVDO_0: //fall through
            case TelephonyManager.NETWORK_TYPE_EVDO_A:
            case TelephonyManager.NETWORK_TYPE_EVDO_B:
            case TelephonyManager.NETWORK_TYPE_EHRPD:
                mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                        dataTypeArray[type], null, NS);
                mSelectedQSDataTypeIcon[slot] = ICON_3G;
                mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                break;
            case TelephonyManager.NETWORK_TYPE_LTE:
            case TelephonyManager.NETWORK_TYPE_LTE_CA:
                if (show4GforLte) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_4G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[1], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_4G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[1];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_4G;

                    if ( type == TelephonyManager.NETWORK_TYPE_LTE_CA) {
                        //Select 4G+ icon.
                        mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                                mDataTypeGenerationArray[2], null, NS);
                        mSelectedQSDataTypeIcon[slot] = ICON_4G_PLUS;
                        mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_4G_PLUS;
                        mSelectedDataActivityIndex[slot] = DATA_TYPE_4G_PLUS;
                    }
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_LTE;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_LTE;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_4G;
                }
                break;
            case TelephonyManager.NETWORK_TYPE_GPRS:
            case TelephonyManager.NETWORK_TYPE_GSM:
                if (!showAtLeast3G) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_G;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_G;
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[0], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_3G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[0];;
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                }
                break;
            default:
                mSelectedDataActivityIndex[slot] = DATA_TYPE_UNKNOWN;
                mSelectedDataTypeIcon[slot] = 0;
                mSelectedQSDataTypeIcon[slot] = 0;
                mSelectedDataTypeDesc[slot] = """";
                mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_G;
                break;
        }
        log(TAG, ""updateDataType "" + String.format(
                ""mSelectedDataTypeIcon[%d]=%d, mSelectedDataActivityIndex=%d"",
                slot, mSelectedDataTypeIcon[slot], mSelectedDataActivityIndex[slot]));
    }


    static int getQSDataTypeIcon(int slot) {
        return mSelectedQSDataTypeIcon[slot];
    }

    static int getDataTypeIcon(int slot) {
        log(TAG, ""getDataTypeIcon "" + String.format(""sub=%d"", slot));
        return mSelectedDataTypeIcon[slot];
    }

    static int getDataTypeDesc(int slot) {
        return mRes.getIdentifier(mSelectedDataTypeDesc[slot], null, NS);
    }

    static int getDataActivity(int slot, int activity) {
        log(TAG, String.format(""getDataActivity, slot=%d, activity=%d"",
                slot, activity));

        String[] dataActivityArray = mRes.getStringArray(
                mRes.getIdentifier(mDataActivityArray[slot], null, NS));
        String[] selectedTypeArray = mRes.getStringArray(mRes.getIdentifier(
                dataActivityArray[mSelectedDataActivityIndex[slot]], null, NS));

        return mRes.getIdentifier(selectedTypeArray[activity], null, NS);
    }

    static int getSignalStrengthIcon(int slot, int inet, int level, boolean roaming) {
        log(TAG, ""getSignalStrengthIcon: "" + String.format(
                ""slot=%d, inetCondition=%d, level=%d, roaming=%b"", slot, inet, level, roaming));

        String[] signalStrengthArray, selectedTypeArray;

        signalStrengthArray = mRes.getStringArray(mRes.getIdentifier(!roaming ?
                mSignalStrengthArray[slot] : mSignalStrengthRoamingArray[slot], null, NS));
        log(TAG, String.format(""signalStrengthArray.length=%d"", signalStrengthArray.length));

        selectedTypeArray = mRes.getStringArray(mRes.getIdentifier(
                signalStrengthArray[mSelectedSignalStreagthIndex[slot]], null, NS));
        log(TAG, String.format(""selectedTypeArray.length=%d"", selectedTypeArray.length));

        String[] inetArray = mRes.getStringArray(
                mRes.getIdentifier(selectedTypeArray[inet], null, NS));
        log(TAG, String.format(""inetArray.length=%d"", inetArray.length));

        return mRes.getIdentifier(inetArray[level], null, NS);
    }


    static int convertMobileStrengthIcon(int stackedIcon) {
        if (mStacked2SingleIconLookup == null) {
            return stackedIcon;
        }
        int index = mStacked2SingleIconLookup.indexOfKey(stackedIcon);
        if (index >= 0) {
            return mStacked2SingleIconLookup.get(stackedIcon);
        }
        return stackedIcon;
    }

    static int getStackedVoiceIcon(int level) {
        int retValue = 0;
        switch(level){
            case SignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN:
                retValue = R.drawable.stat_sys_signal_0_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_POOR:
                retValue = R.drawable.stat_sys_signal_1_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_MODERATE:
                retValue = R.drawable.stat_sys_signal_2_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_GOOD:
                retValue = R.drawable.stat_sys_signal_3_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_GREAT:
                retValue = R.drawable.stat_sys_signal_4_2g;
                break;
            default:
                break;
        }
        return retValue;
    }

    static int getRoamingSignalIconId(int level, int inet){
        return TELEPHONY_SIGNAL_STRENGTH_ROAMING_R[inet][level];
    }

    static int[]  getSignalStrengthDes(int slot) {
        int[] resId = new int[SIGNAL_LEVEL_NUM];
        for (int i = 0; i < SIGNAL_LEVEL_NUM; i++) {
            resId[i] = mRes.getIdentifier(mSignalStrengthDesc[i], null, NS);
        }
        return resId;
    }

    private static void log(String tag, String str){
        if (DEBUG) {
            Log.d(tag, str);
        }
    }
","            R.string.accessibility_cell_data_off,
            TelephonyIcons.ICON_DATA_DISABLED,
            false,
            TelephonyIcons.QS_ICON_DATA_DISABLED
    );

    static final int DATA_TYPE_UNKNOWN = 0;
    static final int DATA_TYPE_G = 1;
    static final int DATA_TYPE_E = 2;
    static final int DATA_TYPE_2G = 3;
    static final int DATA_TYPE_3G = 4;
    static final int DATA_TYPE_4G = 5;
    static final int DATA_TYPE_H = 6;
    static final int DATA_TYPE_HP = 7;
    static final int DATA_TYPE_1X = 8;
    static final int DATA_TYPE_LTE = 9;
    static final int DATA_TYPE_4G_PLUS = 10;

    static final int SIGNAL_STRENGTH_TYPE_G = 0;
    static final int SIGNAL_STRENGTH_TYPE_E = 1;
    static final int SIGNAL_STRENGTH_TYPE_3G = 2;
    static final int SIGNAL_STRENGTH_TYPE_4G = 3;
    static final int SIGNAL_STRENGTH_TYPE_H = 4;
    static final int SIGNAL_STRENGTH_TYPE_HP = 5;
    static final int SIGNAL_STRENGTH_TYPE_1X = 6;
    static final int SIGNAL_STRENGTH_TYPE_CDMA = 7;
    static final int SIGNAL_STRENGTH_TYPE_UMTS = 8;
    static final int SIGNAL_STRENGTH_TYPE_4G_PLUS = 9;

    static final int DEFAULT_SUB = 0;
    static final int INET_TYPE_NUM = 2;
    static final int SIGNAL_LEVEL_NUM = SignalStrength.NUM_SIGNAL_STRENGTH_BINS;
    static final String TAG = ""TelephonyIcons"";
    static final String NS = ""com.android.systemui"";
    static final boolean DEBUG = Log.isLoggable(TAG, Log.DEBUG);;

    static String[] mDataTypeArray, mDataTypeGenerationArray;
    static String[] mDataTypeDescriptionArray, mDataTypeGenerationDescArray;
    static String[] mDataActivityArray;
    static String[] mSignalStrengthArray, mSignalStrengthRoamingArray;
    static String[] mSignalNullArray;
    static String[] mSignalStrengthDesc;

    static int[] mSelectedDataTypeIcon;
    static int[] mSelectedQSDataTypeIcon;
    static String[] mSelectedDataTypeDesc;
    static int[] mSelectedDataActivityIndex;
    static int[] mSelectedSignalStreagthIndex;
    static SparseArray<Integer> mStacked2SingleIconLookup;

    private static Resources mRes;
    private static boolean isInitiated = false;

    static void readIconsFromXml(Context context) {
        if (isInitiated) {
            log(TAG, ""readIconsFromXml, already read!"");
            return;
        }

        mRes = context.getResources();
        try {
            mDataTypeArray = mRes.getStringArray(R.array.multi_data_type);
            mDataTypeDescriptionArray = mRes.getStringArray(
                    R.array.telephony_data_type_description);
            mDataTypeGenerationArray = mRes.getStringArray(
                    R.array.telephony_data_type_generation);
            mDataTypeGenerationDescArray = mRes.getStringArray(
                    R.array.telephony_data_type_generation_description);
            mDataActivityArray = mRes.getStringArray(R.array.multi_data_activity);
            mSignalStrengthArray = mRes.getStringArray(R.array.multi_signal_strength);
            mSignalStrengthRoamingArray = mRes.getStringArray(
                    R.array.multi_signal_strength_roaming);
            mSignalNullArray = mRes.getStringArray(R.array.multi_signal_null);
            mSignalStrengthDesc = mRes.getStringArray(R.array.signal_strength_description);
            initStacked2SingleIconLookup();
        } catch (android.content.res.Resources.NotFoundException e) {
            isInitiated = false;
            log(TAG, ""readIconsFromXml, exception happened: "" + e);
            return;
        }

        if (mSelectedDataTypeIcon == null
                && mDataTypeArray.length != 0) {
            mSelectedDataTypeIcon = new int[mDataTypeArray.length];
        }
        if (mSelectedQSDataTypeIcon == null
                && mDataTypeArray.length != 0) {
            mSelectedQSDataTypeIcon = new int[mDataTypeArray.length];
        }
        if (mSelectedDataTypeDesc == null
                && mDataTypeArray.length != 0) {
            mSelectedDataTypeDesc = new String[mDataTypeArray.length];
        }
        if (mSelectedDataActivityIndex == null
                && mDataActivityArray.length != 0) {
            mSelectedDataActivityIndex = new int[mDataActivityArray.length];
        }
        if (mSelectedSignalStreagthIndex == null
                && mSignalStrengthArray.length != 0) {
            mSelectedSignalStreagthIndex = new int[mSignalStrengthArray.length];
        }
        isInitiated = true;
    }

    static void initStacked2SingleIconLookup() {
        mStacked2SingleIconLookup = new SparseArray<>();
        TypedArray stackedIcons = mRes.obtainTypedArray(R.array.stacked_signal_icons);
        TypedArray singleIcons = mRes.obtainTypedArray(R.array.single_signal_icons);

        mStacked2SingleIconLookup.clear();
        for (int i = 0; i < stackedIcons.length() && i < singleIcons.length(); i++) {
            mStacked2SingleIconLookup.put(stackedIcons.getResourceId(i,0),
                    singleIcons.getResourceId(i,0));
        }
        stackedIcons.recycle();
        singleIcons.recycle();
        log(TAG, ""initStacked2SingleIconLookup: size="" + mStacked2SingleIconLookup.size());
    }

    static int getSignalNullIcon(int slot) {
        if (mSignalNullArray == null) {
            return 0;
        }
        String resName = mSignalNullArray[slot];
        log(TAG, ""null signal icon name: "" + resName);
        int resId = mRes.getIdentifier(resName, null, NS);
        return resId;
    }

    static void updateDataType(int slot, int type, boolean showAtLeast3G,
                               boolean show4GforLte, boolean hspaDistinguishable, int inet) {
        log(TAG, ""updateDataType ""
                + String.format(""slot=%d, type=%d, inetCondition=%d"",
                slot, type, inet)
                + "" showAtLeast3G="" + String.valueOf(showAtLeast3G)
                + "" show4GforLte="" + String.valueOf(show4GforLte)
                + "" hspaDistinguishable="" + String.valueOf(hspaDistinguishable));

        String resName = mDataTypeArray[slot];
        int resId = mRes.getIdentifier(resName, null, NS);
        String[] dataTypeArray = mRes.getStringArray(resId);

        log(TAG, ""data type item name: "" + resName + "" id:"" + resId);

        switch (type) {
            case TelephonyManager.NETWORK_TYPE_UNKNOWN:
                if (!showAtLeast3G) {
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = 0;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedDataActivityIndex[slot] = 0;
                    mSelectedSignalStreagthIndex[slot] = 0;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_EDGE:
                if (!showAtLeast3G) {
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_E;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_E;
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_E;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_UMTS:
            case TelephonyManager.NETWORK_TYPE_TD_SCDMA:
                mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                        dataTypeArray[type], null, NS);
                mSelectedQSDataTypeIcon[slot] = ICON_3G;
                mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_UMTS;
                break;
            case TelephonyManager.NETWORK_TYPE_HSDPA:
            case TelephonyManager.NETWORK_TYPE_HSUPA:
            case TelephonyManager.NETWORK_TYPE_HSPA:
                if (hspaDistinguishable) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_H;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_H;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_H;
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[0], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_3G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[0];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                }
                break;
            case TelephonyManager.NETWORK_TYPE_HSPAP:
                if (hspaDistinguishable) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_HP;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_H;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_HP;
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[0], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_3G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[0];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                }
                break;
            case TelephonyManager.NETWORK_TYPE_CDMA:
                if (!showAtLeast3G) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_1X;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_1X;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_CDMA;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_1xRTT:
                if (!showAtLeast3G) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_1X;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_1X;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_1X;
                    break;
                } else {
                    // fall through
                }
            case TelephonyManager.NETWORK_TYPE_EVDO_0: //fall through
            case TelephonyManager.NETWORK_TYPE_EVDO_A:
            case TelephonyManager.NETWORK_TYPE_EVDO_B:
            case TelephonyManager.NETWORK_TYPE_EHRPD:
                mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                        dataTypeArray[type], null, NS);
                mSelectedQSDataTypeIcon[slot] = ICON_3G;
                mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                break;
            case TelephonyManager.NETWORK_TYPE_LTE:
            case TelephonyManager.NETWORK_TYPE_LTE_CA:
                if (show4GforLte) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_4G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[1], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_4G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[1];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_4G;

                    if ( type == TelephonyManager.NETWORK_TYPE_LTE_CA) {
                        //Select 4G+ icon.
                        mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                                mDataTypeGenerationArray[2], null, NS);
                        mSelectedQSDataTypeIcon[slot] = ICON_4G_PLUS;
                        mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_4G_PLUS;
                        mSelectedDataActivityIndex[slot] = DATA_TYPE_4G_PLUS;
                    }
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_LTE;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_LTE;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_4G;
                }
                break;
            case TelephonyManager.NETWORK_TYPE_GPRS:
            case TelephonyManager.NETWORK_TYPE_GSM:
                if (!showAtLeast3G) {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            dataTypeArray[type], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_G;
                    mSelectedDataTypeDesc[slot] = mDataTypeDescriptionArray[type];
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_G;
                } else {
                    mSelectedDataActivityIndex[slot] = DATA_TYPE_3G;
                    mSelectedDataTypeIcon[slot] = mRes.getIdentifier(
                            mDataTypeGenerationArray[0], null, NS);
                    mSelectedQSDataTypeIcon[slot] = ICON_3G;
                    mSelectedDataTypeDesc[slot] = mDataTypeGenerationDescArray[0];;
                    mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_3G;
                }
                break;
            default:
                mSelectedDataActivityIndex[slot] = DATA_TYPE_UNKNOWN;
                mSelectedDataTypeIcon[slot] = 0;
                mSelectedQSDataTypeIcon[slot] = 0;
                mSelectedDataTypeDesc[slot] = """";
                mSelectedSignalStreagthIndex[slot] = SIGNAL_STRENGTH_TYPE_G;
                break;
        }
        log(TAG, ""updateDataType "" + String.format(
                ""mSelectedDataTypeIcon[%d]=%d, mSelectedDataActivityIndex=%d"",
                slot, mSelectedDataTypeIcon[slot], mSelectedDataActivityIndex[slot]));
    }


    static int getQSDataTypeIcon(int slot) {
        return mSelectedQSDataTypeIcon[slot];
    }

    static int getDataTypeIcon(int slot) {
        log(TAG, ""getDataTypeIcon "" + String.format(""sub=%d"", slot));
        return mSelectedDataTypeIcon[slot];
    }

    static int getDataTypeDesc(int slot) {
        return mRes.getIdentifier(mSelectedDataTypeDesc[slot], null, NS);
    }

    static int getDataActivity(int slot, int activity) {
        log(TAG, String.format(""getDataActivity, slot=%d, activity=%d"",
                slot, activity));

        String[] dataActivityArray = mRes.getStringArray(
                mRes.getIdentifier(mDataActivityArray[slot], null, NS));
        String[] selectedTypeArray = mRes.getStringArray(mRes.getIdentifier(
                dataActivityArray[mSelectedDataActivityIndex[slot]], null, NS));

        return mRes.getIdentifier(selectedTypeArray[activity], null, NS);
    }

    static int getSignalStrengthIcon(int slot, int inet, int level, boolean roaming) {
        log(TAG, ""getSignalStrengthIcon: "" + String.format(
                ""slot=%d, inetCondition=%d, level=%d, roaming=%b"", slot, inet, level, roaming));

        String[] signalStrengthArray, selectedTypeArray;

        signalStrengthArray = mRes.getStringArray(mRes.getIdentifier(!roaming ?
                mSignalStrengthArray[slot] : mSignalStrengthRoamingArray[slot], null, NS));
        log(TAG, String.format(""signalStrengthArray.length=%d"", signalStrengthArray.length));

        selectedTypeArray = mRes.getStringArray(mRes.getIdentifier(
                signalStrengthArray[mSelectedSignalStreagthIndex[slot]], null, NS));
        log(TAG, String.format(""selectedTypeArray.length=%d"", selectedTypeArray.length));

        String[] inetArray = mRes.getStringArray(
                mRes.getIdentifier(selectedTypeArray[inet], null, NS));
        log(TAG, String.format(""inetArray.length=%d"", inetArray.length));

        return mRes.getIdentifier(inetArray[level], null, NS);
    }


    static int convertMobileStrengthIcon(int stackedIcon) {
        if (mStacked2SingleIconLookup == null) {
            return stackedIcon;
        }
        int index = mStacked2SingleIconLookup.indexOfKey(stackedIcon);
        if (index >= 0) {
            return mStacked2SingleIconLookup.get(stackedIcon);
        }
        return stackedIcon;
    }

    static int getStackedVoiceIcon(int level) {
        int retValue = 0;
        switch(level){
            case SignalStrength.SIGNAL_STRENGTH_NONE_OR_UNKNOWN:
                retValue = R.drawable.stat_sys_signal_0_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_POOR:
                retValue = R.drawable.stat_sys_signal_1_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_MODERATE:
                retValue = R.drawable.stat_sys_signal_2_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_GOOD:
                retValue = R.drawable.stat_sys_signal_3_2g;
                break;
            case SignalStrength.SIGNAL_STRENGTH_GREAT:
                retValue = R.drawable.stat_sys_signal_4_2g;
                break;
            default:
                break;
        }
        return retValue;
    }

    static int getRoamingSignalIconId(int level, int inet){
        return TELEPHONY_SIGNAL_STRENGTH_ROAMING_R[inet][level];
    }

    static int[]  getSignalStrengthDes(int slot) {
        int[] resId = new int[SIGNAL_LEVEL_NUM];
        for (int i = 0; i < SIGNAL_LEVEL_NUM; i++) {
            resId[i] = mRes.getIdentifier(mSignalStrengthDesc[i], null, NS);
        }
        return resId;
    }

    private static void log(String tag, String str){
        if (DEBUG) {
            Log.d(tag, str);
        }
    }
","[1.0, 1.0]"
92,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java,"[(271, 276, 6), (271, 276, 6)]","            if (mConfig.readIconsFromXml) {
                return getIcons().mSingleSignalIcon;
            }else {
                return SignalDrawable.getState(level, getNumLevels(),
                        mCurrentState.inetCondition == 0);
            }
","            if (mConfig.readIconsFromXml) {
                return getIcons().mSingleSignalIcon;
            }else {
                return SignalDrawable.getState(level, getNumLevels(),
                        mCurrentState.inetCondition == 0);
            }
","            if (mConfig.readIconsFromXml) {
                return getIcons().mSingleSignalIcon;
            }else {
                return SignalDrawable.getState(level, getNumLevels(),
                        mCurrentState.inetCondition == 0);
            }
","[1.0, 1.0]"
93,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java,"[(836, 847, 12), (836, 847, 12)]","                int discContentDesc, int dataContentDesc, int dataType, boolean isWide,
                int qsDataType) {
                this(name, sbIcons, qsIcons, contentDesc, sbNullState, qsNullState, sbDiscState,
                        qsDiscState, discContentDesc, dataContentDesc, dataType, isWide,
                        qsDataType, 0, 0, 0, 0);
        }

        public MobileIconGroup(String name, int[][] sbIcons, int[][] qsIcons, int[] contentDesc,
                int sbNullState, int qsNullState, int sbDiscState, int qsDiscState,
                int discContentDesc, int dataContentDesc, int dataType, boolean isWide,
                int qsDataType, int singleSignalIcon, int stackedDataIcon,
                int stackedVoicelIcon, int activityId) {
","                int discContentDesc, int dataContentDesc, int dataType, boolean isWide,
                int qsDataType) {
                this(name, sbIcons, qsIcons, contentDesc, sbNullState, qsNullState, sbDiscState,
                        qsDiscState, discContentDesc, dataContentDesc, dataType, isWide,
                        qsDataType, 0, 0, 0, 0);
        }

        public MobileIconGroup(String name, int[][] sbIcons, int[][] qsIcons, int[] contentDesc,
                int sbNullState, int qsNullState, int sbDiscState, int qsDiscState,
                int discContentDesc, int dataContentDesc, int dataType, boolean isWide,
                int qsDataType, int singleSignalIcon, int stackedDataIcon,
                int stackedVoicelIcon, int activityId) {
","                int discContentDesc, int dataContentDesc, int dataType, boolean isWide,
                int qsDataType) {
                this(name, sbIcons, qsIcons, contentDesc, sbNullState, qsNullState, sbDiscState,
                        qsDiscState, discContentDesc, dataContentDesc, dataType, isWide,
                        qsDataType, 0, 0, 0, 0);
        }

        public MobileIconGroup(String name, int[][] sbIcons, int[][] qsIcons, int[] contentDesc,
                int sbNullState, int qsNullState, int sbDiscState, int qsDiscState,
                int discContentDesc, int dataContentDesc, int dataType, boolean isWide,
                int qsDataType, int singleSignalIcon, int stackedDataIcon,
                int stackedVoicelIcon, int activityId) {
","[1.0, 1.0]"
94,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java,"[(853, 857, 5), (853, 857, 5)]","            mQsDataType = qsDataType;
            mSingleSignalIcon = singleSignalIcon;
            mStackedDataIcon = stackedDataIcon;
            mStackedVoiceIcon = stackedVoicelIcon;
            mActivityId = activityId;
","            mQsDataType = qsDataType;
            mSingleSignalIcon = singleSignalIcon;
            mStackedDataIcon = stackedDataIcon;
            mStackedVoiceIcon = stackedVoicelIcon;
            mActivityId = activityId;
","            mQsDataType = qsDataType;
            mSingleSignalIcon = singleSignalIcon;
            mStackedDataIcon = stackedDataIcon;
            mStackedVoiceIcon = stackedVoicelIcon;
            mActivityId = activityId;
","[1.0, 1.0]"
95,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/phone/PanelView.java,"[(53, 53, 1), (53, 53, 1)]","import android.util.BoostFramework;
","import android.util.BoostFramework;
","import android.util.BoostFramework;
","[1.0, 1.0]"
96,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/phone/PanelView.java,"[(230, 240, 11), (230, 240, 11)]","        mContext.getContentResolver().registerContentObserver(
                Settings.System.getUriFor(Settings.System.HAPTIC_FEEDBACK_ENABLED), true,
                mVibrationObserver);
        mVibrationObserver.onChange(false /* selfChange */);

        mPerf = new BoostFramework();
    }

    public void updateHapticFeedBackEnabled() {
        mVibrationEnabled = Settings.System.getIntForUser(mContext.getContentResolver(),
                Settings.System.HAPTIC_FEEDBACK_ENABLED, 0, UserHandle.USER_CURRENT) != 0;
","        mContext.getContentResolver().registerContentObserver(
                Settings.System.getUriFor(Settings.System.HAPTIC_FEEDBACK_ENABLED), true,
                mVibrationObserver);
        mVibrationObserver.onChange(false /* selfChange */);

        mPerf = new BoostFramework();
    }

    public void updateHapticFeedBackEnabled() {
        mVibrationEnabled = Settings.System.getIntForUser(mContext.getContentResolver(),
                Settings.System.HAPTIC_FEEDBACK_ENABLED, 0, UserHandle.USER_CURRENT) != 0;
","        mContext.getContentResolver().registerContentObserver(
                Settings.System.getUriFor(Settings.System.HAPTIC_FEEDBACK_ENABLED), true,
                mVibrationObserver);
        mVibrationObserver.onChange(false /* selfChange */);

        mPerf = new BoostFramework();
    }

    public void updateHapticFeedBackEnabled() {
        mVibrationEnabled = Settings.System.getIntForUser(mContext.getContentResolver(),
                Settings.System.HAPTIC_FEEDBACK_ENABLED, 0, UserHandle.USER_CURRENT) != 0;
","[1.0, 1.0]"
97,"['595572aed3270fda20949d9c19381969d40ecfd4', '595572aed3270fda20949d9c19381969d40ecfd4']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",services/core/java/com/android/server/am/ActivityStack.java,"[(1459, 1464, 6), (1459, 1464, 6)]","
        if (mActivityTrigger != null) {
            mActivityTrigger.activityPauseTrigger(prev.intent, prev.info, prev.appInfo);
        }

        mResumedActivity = null;
","
        if (mActivityTrigger != null) {
            mActivityTrigger.activityPauseTrigger(prev.intent, prev.info, prev.appInfo);
        }

        mResumedActivity = null;
","
        if (mActivityTrigger != null) {
            mActivityTrigger.activityPauseTrigger(prev.intent, prev.info, prev.appInfo);
        }

        mResumedActivity = null;
","[1.0, 1.0]"
98,"['657230bb5e95ec8560c534360cac5a25fd743129', '6f47ceafbe6febe54aa5c376baed3415cdf848ad']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java,"[(28, 30, 3), (32, 36, 5)]","import android.telephony.ims.ImsMmTelManager;
import android.telephony.ims.ImsReasonInfo;
import android.telephony.ims.stub.ImsRegistrationImplBase;
","import android.telephony.CellSignalStrengthNr;
import android.telephony.DisplayInfo;
import android.telephony.ims.ImsMmTelManager;
import android.telephony.ims.ImsReasonInfo;
import android.telephony.ims.feature.MmTelFeature;
","import android.telephony.ims.ImsMmTelManager;
import android.telephony.ims.ImsReasonInfo;
import android.telephony.ims.","[0.799, 0.527]"
99,"['657230bb5e95ec8560c534360cac5a25fd743129', 'd28a4f6b38dbab44128b4319f665dd65c3e4ec2c']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java,"[(28, 30, 3), (36, 39, 4)]","import android.telephony.ims.ImsMmTelManager;
import android.telephony.ims.ImsReasonInfo;
import android.telephony.ims.stub.ImsRegistrationImplBase;
","import android.telephony.CellSignalStrengthNr;
import android.telephony.ims.ImsMmTelManager;
import android.telephony.ims.ImsReasonInfo;
import android.telephony.ims.feature.MmTelFeature;
","import android.telephony.ims.ImsMmTelManager;
import android.telephony.ims.ImsReasonInfo;
import android.telephony.ims.","[0.799, 0.633]"
100,"['657230bb5e95ec8560c534360cac5a25fd743129', 'edb6252578f9b76151e5125a7fb1b16823a68418']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java,"[(28, 30, 3), (29, 32, 4)]","import android.telephony.ims.ImsMmTelManager;
import android.telephony.ims.ImsReasonInfo;
import android.telephony.ims.stub.ImsRegistrationImplBase;
","import android.telephony.CellSignalStrengthNr;
import android.telephony.ims.ImsMmTelManager;
import android.telephony.ims.ImsReasonInfo;
import android.telephony.ims.feature.MmTelFeature;
","import android.telephony.ims.ImsMmTelManager;
import android.telephony.ims.ImsReasonInfo;
import android.telephony.ims.","[0.799, 0.633]"
101,"['657230bb5e95ec8560c534360cac5a25fd743129', '4e4914b22b779e6376bb00ae20636175b2a70d8c']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java,"[(156, 156, 1), (144, 144, 1)]","    private static final int MSG_LOCALE_CHANGED = 500;
","    private static final int MSG_LOCALE_CHANGED = 500;
","    private static final int MSG_LOCALE_CHANGED = 500;
","[1.0, 1.0]"
102,"['6e3be19b8a58c265a2c3ff4b9cbabdb6a4ae9bf6', '4e4914b22b779e6376bb00ae20636175b2a70d8c']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java,"[(151, 151, 1), (144, 144, 1)]","    private static final int MSG_LOCALE_CHANGED = 500;
","    private static final int MSG_LOCALE_CHANGED = 500;
","    private static final int MSG_LOCALE_CHANGED = 500;
","[1.0, 1.0]"
103,"['6e44ad255823e1b7f2b23386d61af655c19adb49', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/Watchdog.java,"[(599, 599, 1), (688, 688, 1)]","                                subject, null, finalStack, null);
","                                    subject, null, finalStack, null);
","                                subject, null, finalStack, null);
","[1.0, 0.943]"
104,"['6e44ad255823e1b7f2b23386d61af655c19adb49', '8faa0d981413f18b2468dde1b1fe71e248df0df1']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/Watchdog.java,"[(599, 599, 1), (695, 695, 1)]","                                subject, null, finalStack, null);
","                                    subject, cpuInfo, finalStack, null);
","                                subject, ","[0.621, 0.562]"
105,"['81b587a542e8381268a9ba8e7461712ef23cd11f', 'e85435d4d9a2f7122bd5c97ad0a25c768d124a0e']","['aospa-quartz-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/am/ActiveServices.java,"[(2459, 2487, 29), (3186, 3210, 25)]","            if(SERVICE_RESCHEDULE) {
                boolean shouldDelay = false;
                ActivityRecord top_rc = null;
                ActivityStack stack = mAm.mStackSupervisor.mRootActivityContainer.getTopDisplayFocusedStack();
                if(stack != null) {
                    top_rc = stack.topRunningActivityLocked();
                }

                boolean isPersistent
                        = !((r.serviceInfo.applicationInfo.flags&ApplicationInfo.FLAG_PERSISTENT) == 0);
                if(top_rc != null) {
                    if(top_rc.launching && !r.shortInstanceName.contains(top_rc.packageName)
                            && !isPersistent) {
                        shouldDelay = true;
                    }
                }
                if(!shouldDelay) {
                    bringUpServiceLocked(r, r.intent.getIntent().getFlags(), r.createdFromFg, true, false);
                } else {
                    if (DEBUG_DELAYED_SERVICE) {
                        Slog.v(TAG, ""Reschedule service restart due to app launch""
                              +"" r.shortInstanceName ""+r.shortInstanceName+"" r.app = ""+r.app);
                    }
                    r.resetRestartCounter();
                    scheduleServiceRestartLocked(r, true);
                }
            } else {
                bringUpServiceLocked(r, r.intent.getIntent().getFlags(), r.createdFromFg, true, false);
            }
","            if(SERVICE_RESCHEDULE) {
                boolean shouldDelay = false;
                ActivityRecord top_rc = mAm.mTaskSupervisor.getTopResumedActivity();

                boolean isPersistent
                        = !((r.serviceInfo.applicationInfo.flags&ApplicationInfo.FLAG_PERSISTENT) == 0);
                if(top_rc != null) {
                    if(top_rc.launching && !r.shortInstanceName.contains(top_rc.packageName)
                            && !isPersistent) {
                        shouldDelay = true;
                    }
                }
                if(!shouldDelay) {
                    bringUpServiceLocked(r, r.intent.getIntent().getFlags(), r.createdFromFg, true, false);
                } else {
                    if (DEBUG_DELAYED_SERVICE) {
                        Slog.v(TAG, ""Reschedule service restart due to app launch""
                              +"" r.shortInstanceName ""+r.shortInstanceName+"" r.app = ""+r.app);
                    }
                    r.resetRestartCounter();
                    scheduleServiceRestartLocked(r, true);
                }
            } else {
                bringUpServiceLocked(r, r.intent.getIntent().getFlags(), r.createdFromFg, true, false);
            }
","

                boolean isPersistent
                        = !((r.serviceInfo.applicationInfo.flags&ApplicationInfo.FLAG_PERSISTENT) == 0);
                if(top_rc != null) {
                    if(top_rc.launching && !r.shortInstanceName.contains(top_rc.packageName)
                            && !isPersistent) {
                        shouldDelay = true;
                    }
                }
                if(!shouldDelay) {
                    bringUpServiceLocked(r, r.intent.getIntent().getFlags(), r.createdFromFg, true, false);
                } else {
                    if (DEBUG_DELAYED_SERVICE) {
                        Slog.v(TAG, ""Reschedule service restart due to app launch""
                              +"" r.shortInstanceName ""+r.shortInstanceName+"" r.app = ""+r.app);
                    }
                    r.resetRestartCounter();
                    scheduleServiceRestartLocked(r, true);
                }
            } else {
                bringUpServiceLocked(r, r.intent.getIntent().getFlags(), r.createdFromFg, true, false);
            }
","[0.753, 0.867]"
106,"['88b45c586d461df38b866d529bc98d1dfa3e8838', '18970c4d9d55a44040fe6fb762dac93a077c64b5']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/connectivity/NetworkAgentInfo.java,"[(19, 22, 4), (19, 22, 4)]","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED;

","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED;

","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED;

","[1.0, 1.0]"
107,"['88b45c586d461df38b866d529bc98d1dfa3e8838', '24f36fd2514856aaafe6a32a99050e272a6bd361']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/connectivity/NetworkAgentInfo.java,"[(19, 22, 4), (19, 20, 2)]","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED;

","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
","[0.652, 1.0]"
108,"['88b45c586d461df38b866d529bc98d1dfa3e8838', '3d2fc559e13b7293212955f1858d443f4fe8234e']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/connectivity/NetworkAgentInfo.java,"[(19, 22, 4), (19, 20, 2)]","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED;

","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
","[0.652, 1.0]"
109,"['88b45c586d461df38b866d529bc98d1dfa3e8838', '6fc85c43e31aad55eecd51d3b0de34715ae03810']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/am/ActivityManagerService.java,"[(545, 548, 4), (578, 582, 5)]","    /* Freq Aggr boost objects */
    public static BoostFramework mPerfServiceStartHint = null;
    /* UX perf event object */
    public static BoostFramework mUxPerf = new BoostFramework();
","    /* Freq Aggr boost objects */
    public static BoostFramework mPerfServiceStartHint = null;
    /* UX perf event object */
    public static BoostFramework mUxPerf = new BoostFramework();
    public static boolean mForceStopKill = false;
","    /* Freq Aggr boost objects */
    public static BoostFramework mPerfServiceStartHint = null;
    /* UX perf event object */
    public static BoostFramework mUxPerf = new BoostFramework();
","[1.0, 0.794]"
110,"['88b45c586d461df38b866d529bc98d1dfa3e8838', '8faa0d981413f18b2468dde1b1fe71e248df0df1']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/connectivity/NetworkAgentInfo.java,"[(19, 22, 4), (19, 22, 4)]","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED;

","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED;
import static android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED;
","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_","[0.943, 0.7]"
111,"['88b45c586d461df38b866d529bc98d1dfa3e8838', 'af02bd5317cc0cced0a7646d5bbf407a181dda9c']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/connectivity/NetworkAgentInfo.java,"[(19, 22, 4), (19, 21, 3)]","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED;

","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED;
","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED;
","[0.995, 1.0]"
112,"['8d21ad0d966c1e9f96e5a65144efad2582391957', '18970c4d9d55a44040fe6fb762dac93a077c64b5']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/ConnectivityService.java,"[(2083, 2092, 10), (2270, 2288, 19)]","    private void updateTcpBufferSizes(NetworkAgentInfo nai) {
        if (isDefaultNetwork(nai) == false) {
            return;
        }

        String tcpBufferSizes = nai.linkProperties.getTcpBufferSizes();
        if(nai.networkCapabilities.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR)){
            tcpBufferSizes = NetPluginDelegate.get5GTcpBuffers(tcpBufferSizes,
                nai.networkCapabilities.getNetworkSpecifier());
        }
","    // Overridden for testing purposes to avoid writing to SystemProperties.
    @VisibleForTesting
    protected MockableSystemProperties getSystemProperties() {
        return new MockableSystemProperties();
    }

    private void updateTcpBufferSizes(NetworkAgentInfo nai) {
        if (isDefaultNetwork(nai) == false) {
            return;
        }

        String tcpBufferSizes = nai.linkProperties.getTcpBufferSizes();
        if(nai.networkCapabilities.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR)){
            tcpBufferSizes = NetPluginDelegate.get5GTcpBuffers(tcpBufferSizes,
                nai.networkCapabilities.getNetworkSpecifier());
        }
        updateTcpBufferSizes(tcpBufferSizes);
    }

","    private void updateTcpBufferSizes(NetworkAgentInfo nai) {
        if (isDefaultNetwork(nai) == false) {
            return;
        }

        String tcpBufferSizes = nai.linkProperties.getTcpBufferSizes();
        if(nai.networkCapabilities.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR)){
            tcpBufferSizes = NetPluginDelegate.get5GTcpBuffers(tcpBufferSizes,
                nai.networkCapabilities.getNetworkSpecifier());
        }
","[1.0, 0.627]"
113,"['8d21ad0d966c1e9f96e5a65144efad2582391957', '757dbb836469bbdd7eb8312deaf584fe0c99c17d']","['aospa-quartz-SAP-block_text', 'aospa-sapphire-SAP-block_text']",packages/SettingsLib/src/com/android/settingslib/wifi/AccessPoint.java,"[(167, 167, 1), (236, 236, 1)]","    public static final int SECURITY_DPP = 7;
","    public static final int SECURITY_DPP = 7;
","    public static final int SECURITY_DPP = 7;
","[1.0, 1.0]"
114,"['a97ca47ee3713a075711c311c49e3951264007ef', '18970c4d9d55a44040fe6fb762dac93a077c64b5']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",location/java/android/location/LocationManager.java,"[(1780, 1781, 2), (2329, 2329, 1)]","        android.util.SeempLog.record(43);
        return false;
","        android.util.SeempLog.record(48);
",        android.util.SeempLog.record(4,"[0.594, 0.905]"
115,"['a97ca47ee3713a075711c311c49e3951264007ef', '27e7f8c2aa4ce0a2f59b3bf1969b06bfd1e9ebca']","['aospa-quartz-SAP-block_text', 'aospa-sapphire-SAP-block_text']",location/java/android/location/LocationManager.java,"[(1780, 1781, 2), (943, 943, 1)]","        android.util.SeempLog.record(43);
        return false;
","        android.util.SeempLog.record(47);
",        android.util.SeempLog.record(4,"[0.594, 0.905]"
116,"['a97ca47ee3713a075711c311c49e3951264007ef', '7fd6edc3a3ff37a750641d5e192835fe217f6050']","['aospa-quartz-SAP-block_text', 'aospa-sapphire-SAP-block_text']",location/java/android/location/LocationManager.java,"[(1780, 1781, 2), (716, 716, 1)]","        android.util.SeempLog.record(43);
        return false;
","        android.util.SeempLog.record(46);
",        android.util.SeempLog.record(4,"[0.594, 0.905]"
117,"['af01b38e0a0664bc87b649248b0c13fbe0925193', 'af01b38e0a0664bc87b649248b0c13fbe0925193']","['aospa-quartz-SAP-block_text', 'aospa-topaz-SAP-block_text']",services/usb/java/com/android/server/usb/UsbDeviceManager.java,"[(1346, 1350, 5), (1346, 1350, 5)]","        private String getChargingFunctions() {
            String func = SystemProperties.get(getPersistProp(true),
                    UsbManager.USB_FUNCTION_NONE);
            if (UsbManager.USB_FUNCTION_NONE.equals(func)) {
                func = UsbManager.USB_FUNCTION_MTP;
","        private String getChargingFunctions() {
            String func = SystemProperties.get(getPersistProp(true),
                    UsbManager.USB_FUNCTION_NONE);
            if (UsbManager.USB_FUNCTION_NONE.equals(func)) {
                func = UsbManager.USB_FUNCTION_MTP;
","        private String getChargingFunctions() {
            String func = SystemProperties.get(getPersistProp(true),
                    UsbManager.USB_FUNCTION_NONE);
            if (UsbManager.USB_FUNCTION_NONE.equals(func)) {
                func = UsbManager.USB_FUNCTION_MTP;
","[1.0, 1.0]"
118,"['b76115be4efabffaa6febc57cec47acc2f933c79', '18970c4d9d55a44040fe6fb762dac93a077c64b5']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",telephony/java/android/telephony/DisconnectCause.java,"[(593, 656, 64), (651, 714, 64)]","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","[1.0, 1.0]"
119,"['b76115be4efabffaa6febc57cec47acc2f933c79', '43ceded8caaffead0a2a1967f42a4ef4bb658ced']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",wifi/java/android/net/wifi/WifiConfiguration.java,"[(2059, 2060, 2), (2486, 2487, 2)]","        } else if (allowedKeyManagement.get(KeyMgmt.DPP)) {
            return KeyMgmt.DPP;
","        } else if (allowedKeyManagement.get(KeyMgmt.DPP)) {
            key = SSID + KeyMgmt.strings[KeyMgmt.DPP];
","        } else if (allowedKeyManagement.get(KeyMgmt.DPP)) {
            ","[0.783, 0.626]"
120,"['b76115be4efabffaa6febc57cec47acc2f933c79', '43ceded8caaffead0a2a1967f42a4ef4bb658ced']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",wifi/java/android/net/wifi/WifiConfiguration.java,"[(2098, 2099, 2), (2486, 2487, 2)]","            } else if (allowedKeyManagement.get(KeyMgmt.DPP)) {
                key = SSID + KeyMgmt.strings[KeyMgmt.DPP];
","        } else if (allowedKeyManagement.get(KeyMgmt.DPP)) {
            key = SSID + KeyMgmt.strings[KeyMgmt.DPP];
","        } else if (allowedKeyManagement.get(KeyMgmt.DPP)) {
            ","[0.585, 0.626]"
121,"['b76115be4efabffaa6febc57cec47acc2f933c79', '6fc85c43e31aad55eecd51d3b0de34715ae03810']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",telephony/java/android/telephony/DisconnectCause.java,"[(593, 656, 64), (669, 732, 64)]","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","[1.0, 1.0]"
122,"['b76115be4efabffaa6febc57cec47acc2f933c79', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",telephony/java/android/telephony/DisconnectCause.java,"[(593, 656, 64), (677, 740, 64)]","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","[1.0, 1.0]"
123,"['b76115be4efabffaa6febc57cec47acc2f933c79', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java,"[(46, 48, 3), (51, 53, 3)]","import com.android.internal.telephony.PhoneConstants;
import com.android.internal.telephony.PhoneConstants.DataState;
import com.android.settingslib.graph.SignalDrawable;
","import com.android.internal.telephony.cdma.EriInfo;
import com.android.internal.telephony.PhoneConstants;
import com.android.internal.telephony.PhoneConstants.DataState;
","import com.android.internal.telephony.PhoneConstants;
import com.android.internal.telephony.PhoneConstants.DataState;
","[0.69, 0.694]"
124,"['b76115be4efabffaa6febc57cec47acc2f933c79', '7fe8671fd7b5388dd9be6295dbea6d31209468f9']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",telephony/java/android/telephony/DisconnectCause.java,"[(593, 656, 64), (642, 705, 64)]","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","[1.0, 1.0]"
125,"['b76115be4efabffaa6febc57cec47acc2f933c79', '8faa0d981413f18b2468dde1b1fe71e248df0df1']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",wifi/java/android/net/wifi/WifiConfiguration.java,"[(2059, 2060, 2), (2637, 2638, 2)]","        } else if (allowedKeyManagement.get(KeyMgmt.DPP)) {
            return KeyMgmt.DPP;
","        } else if (allowedKeyManagement.get(KeyMgmt.DPP)) {
            key = SSID + KeyMgmt.strings[KeyMgmt.DPP];
","        } else if (allowedKeyManagement.get(KeyMgmt.DPP)) {
            ","[0.783, 0.626]"
126,"['b76115be4efabffaa6febc57cec47acc2f933c79', '8faa0d981413f18b2468dde1b1fe71e248df0df1']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",wifi/java/android/net/wifi/WifiConfiguration.java,"[(2098, 2099, 2), (2637, 2638, 2)]","            } else if (allowedKeyManagement.get(KeyMgmt.DPP)) {
                key = SSID + KeyMgmt.strings[KeyMgmt.DPP];
","        } else if (allowedKeyManagement.get(KeyMgmt.DPP)) {
            key = SSID + KeyMgmt.strings[KeyMgmt.DPP];
","        } else if (allowedKeyManagement.get(KeyMgmt.DPP)) {
            ","[0.585, 0.626]"
127,"['b76115be4efabffaa6febc57cec47acc2f933c79', 'd28a4f6b38dbab44128b4319f665dd65c3e4ec2c']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java,"[(46, 48, 3), (54, 56, 3)]","import com.android.internal.telephony.PhoneConstants;
import com.android.internal.telephony.PhoneConstants.DataState;
import com.android.settingslib.graph.SignalDrawable;
","import com.android.internal.telephony.TelephonyIntents;
import com.android.internal.telephony.PhoneConstants;
import com.android.internal.telephony.PhoneConstants.DataState;
","import com.android.internal.telephony.PhoneConstants;
import com.android.internal.telephony.PhoneConstants.DataState;
","[0.69, 0.678]"
128,"['b76115be4efabffaa6febc57cec47acc2f933c79', 'fa63f69f0fdfc50fe92caa22dbe1b4b120807ed2']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/am/ActiveServices.java,"[(2273, 2282, 10), (2541, 2550, 10)]","                + r.shortName + "" in "" + r.restartDelay + ""ms"");

        if (SERVICE_RESCHEDULE && DEBUG_DELAYED_SERVICE) {
            for (int i=mRestartingServices.size()-1; i>=0; i--) {
                ServiceRecord r2 = mRestartingServices.get(i);
                Slog.w(TAG,""Restarting list - i ""+i+"" r2.nextRestartTime ""
                           +r2.nextRestartTime+"" r2.name ""+r2.name);
            }
        }

","                + r.shortInstanceName + "" in "" + r.restartDelay + ""ms"");

        if (SERVICE_RESCHEDULE && DEBUG_DELAYED_SERVICE) {
            for (int i=mRestartingServices.size()-1; i>=0; i--) {
                ServiceRecord r2 = mRestartingServices.get(i);
                Slog.w(TAG,""Restarting list - i ""+i+"" r2.nextRestartTime ""
                           +r2.nextRestartTime+"" r2.name ""+r2.name);
            }
        }

","Name + "" in "" + r.restartDelay + ""ms"");

        if (SERVICE_RESCHEDULE && DEBUG_DELAYED_SERVICE) {
            for (int i=mRestartingServices.size()-1; i>=0; i--) {
                ServiceRecord r2 = mRestartingServices.get(i);
                Slog.w(TAG,""Restarting list - i ""+i+"" r2.nextRestartTime ""
                           +r2.nextRestartTime+"" r2.name ""+r2.name);
            }
        }

","[0.941, 0.923]"
129,"['b76115be4efabffaa6febc57cec47acc2f933c79', '757dbb836469bbdd7eb8312deaf584fe0c99c17d']","['aospa-quartz-SAP-block_text', 'aospa-sapphire-SAP-block_text']",packages/SettingsLib/src/com/android/settingslib/wifi/AccessPoint.java,"[(166, 166, 1), (236, 236, 1)]","    public static final int SECURITY_DPP = 6;
","    public static final int SECURITY_DPP = 7;
",    public static final int SECURITY_DPP = ,"[0.935, 0.935]"
130,"['ddcaa93e851eb5e57692799446f2ef3fe31436ae', '18970c4d9d55a44040fe6fb762dac93a077c64b5']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",telephony/java/android/telephony/DisconnectCause.java,"[(570, 633, 64), (651, 714, 64)]","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","[1.0, 1.0]"
131,"['ddcaa93e851eb5e57692799446f2ef3fe31436ae', '6fc85c43e31aad55eecd51d3b0de34715ae03810']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",telephony/java/android/telephony/DisconnectCause.java,"[(570, 633, 64), (669, 732, 64)]","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","[1.0, 1.0]"
132,"['ddcaa93e851eb5e57692799446f2ef3fe31436ae', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",telephony/java/android/telephony/DisconnectCause.java,"[(570, 633, 64), (677, 740, 64)]","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","[1.0, 1.0]"
133,"['ddcaa93e851eb5e57692799446f2ef3fe31436ae', '7fe8671fd7b5388dd9be6295dbea6d31209468f9']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",telephony/java/android/telephony/DisconnectCause.java,"[(570, 633, 64), (642, 705, 64)]","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","[1.0, 1.0]"
134,"['ddcaa93e851eb5e57692799446f2ef3fe31436ae', 'ae1b3a8f3221dbe692fd90d414cfe5040538c264']","['aospa-quartz-SAP-block_text', 'aospa-ruby-SAP-block_text']",packages/SettingsLib/src/com/android/settingslib/bluetooth/LocalBluetoothProfileManager.java,"[(33, 33, 1), (33, 34, 2)]","import android.bluetooth.BluetoothDun;
","import android.bluetooth.BluetoothDun;
import android.bluetooth.BluetoothSap;
","import android.bluetooth.BluetoothDun;
","[1.0, 0.5]"
135,"['ddcaa93e851eb5e57692799446f2ef3fe31436ae', '2051462f672b5986ef321bf1de3657e7653864e8']","['aospa-quartz-SAP-block_text', 'aospa-sapphire-SAP-block_text']",packages/SettingsLib/src/com/android/settingslib/bluetooth/CachedBluetoothDevice.java,"[(110, 123, 14), (152, 180, 29)]","    /* Gets Device for seondary TWS device
     * @param mDevice Primary TWS device  to get secondary
     * @return Description of the device
     */

    private BluetoothDevice getTwsPeerDevice() {
      BluetoothAdapter bluetoothAdapter;
      BluetoothDevice peerDevice = null;
      if (mDevice.isTwsPlusDevice()) {
        bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        String peerAddress = mDevice.getTwsPlusPeerAddress();
        peerDevice = bluetoothAdapter.getRemoteDevice(peerAddress);
      }
      return peerDevice;
","        mTwspBatteryState = -1;
        mTwspBatteryLevel = -1;
    }

    CachedBluetoothDevice(CachedBluetoothDevice cachedDevice) {
        mContext = cachedDevice.mContext;
        mLocalAdapter = BluetoothAdapter.getDefaultAdapter();
        mProfileManager = cachedDevice.mProfileManager;
        mDevice = cachedDevice.mDevice;
        fillData();
        mHiSyncId = BluetoothHearingAid.HI_SYNC_ID_INVALID;
        mTwspBatteryState = -1;
        mTwspBatteryLevel = -1;
    }

    /* Gets Device for seondary TWS device
     * @param mDevice Primary TWS device  to get secondary
     * @return Description of the device
     */

    private BluetoothDevice getTwsPeerDevice() {
      BluetoothAdapter bluetoothAdapter;
      BluetoothDevice peerDevice = null;
      if (mDevice.isTwsPlusDevice()) {
        bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        String peerAddress = mDevice.getTwsPlusPeerAddress();
        peerDevice = bluetoothAdapter.getRemoteDevice(peerAddress);
      }
      return peerDevice;
","    /* Gets Device for seondary TWS device
     * @param mDevice Primary TWS device  to get secondary
     * @return Description of the device
     */

    private BluetoothDevice getTwsPeerDevice() {
      BluetoothAdapter bluetoothAdapter;
      BluetoothDevice peerDevice = null;
      if (mDevice.isTwsPlusDevice()) {
        bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        String peerAddress = mDevice.getTwsPlusPeerAddress();
        peerDevice = bluetoothAdapter.getRemoteDevice(peerAddress);
      }
      return peerDevice;
","[1.0, 0.531]"
136,"['18970c4d9d55a44040fe6fb762dac93a077c64b5', '2051462f672b5986ef321bf1de3657e7653864e8']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/locksettings/LockSettingsService.java,"[(1122, 1160, 39), (1267, 1306, 40)]","    public void retainPassword(String password) {
        if (LockPatternUtils.isDeviceEncryptionEnabled()) {
            if (password != null)
                mSavePassword = password;
            else
                mSavePassword = DEFAULT_PASSWORD;
        }
    }

    public void sanitizePassword() {
        if (LockPatternUtils.isDeviceEncryptionEnabled()) {
            mSavePassword = DEFAULT_PASSWORD;
        }
    }

    private boolean checkCryptKeeperPermissions() {
        boolean permission_err = false;
        try {
            mContext.enforceCallingOrSelfPermission(
                       android.Manifest.permission.CRYPT_KEEPER,
                       ""no permission to get the password"");
        } catch (SecurityException e) {
            permission_err = true;
        }
        return permission_err;
    }

    public String getPassword() {
       /** if calling process does't have crypt keeper or admin permissions,
         * throw the exception.
         */
       if (checkCryptKeeperPermissions())
            mContext.enforceCallingOrSelfPermission(
                    android.Manifest.permission.MANAGE_DEVICE_ADMINS,
                    ""no crypt_keeper or admin permission to get the password"");

       return mSavePassword;
    }

","    public void retainPassword(String password) {
        if (LockPatternUtils.isDeviceEncryptionEnabled()) {
            if (password != null)
                mSavePassword = password;
            else
                mSavePassword = DEFAULT_PASSWORD;
        }
    }

    public void sanitizePassword() {
        if (LockPatternUtils.isDeviceEncryptionEnabled()) {
            mSavePassword = DEFAULT_PASSWORD;
        }
    }

    private boolean checkCryptKeeperPermissions() {
        boolean permission_err = false;
        try {
            mContext.enforceCallingOrSelfPermission(
                       android.Manifest.permission.CRYPT_KEEPER,
                       ""no permission to get the password"");
        } catch (SecurityException e) {
            permission_err = true;
        }
        return permission_err;
    }

    public String getPassword() {
       /** if calling process does't have crypt keeper or admin permissions,
         * throw the exception.
         */
       if (checkCryptKeeperPermissions())
            mContext.enforceCallingOrSelfPermission(
                    android.Manifest.permission.ACCESS_KEYGUARD_SECURE_STORAGE,
                    ""no crypt_keeper or admin permission to get the password"");

       return mSavePassword;
    }

    private void setKeystorePassword(byte[] password, int userHandle) {
","    public void retainPassword(String password) {
        if (LockPatternUtils.isDeviceEncryptionEnabled()) {
            if (password != null)
                mSavePassword = password;
            else
                mSavePassword = DEFAULT_PASSWORD;
        }
    }

    public void sanitizePassword() {
        if (LockPatternUtils.isDeviceEncryptionEnabled()) {
            mSavePassword = DEFAULT_PASSWORD;
        }
    }

    private boolean checkCryptKeeperPermissions() {
        boolean permission_err = false;
        try {
            mContext.enforceCallingOrSelfPermission(
                       android.Manifest.permission.CRYPT_KEEPER,
                       ""no permission to get the password"");
        } catch (SecurityException e) {
            permission_err = true;
        }
        return permission_err;
    }

    public String getPassword() {
       /** if calling process does't have crypt keeper or admin permissions,
         * throw the exception.
         */
       if (checkCryptKeeperPermissions())
            mContext.enforceCallingOrSelfPermission(
                    android.Manifest.permission.","[0.891, 0.837]"
137,"['18970c4d9d55a44040fe6fb762dac93a077c64b5', '26017c68ee11d3f2d54ca731119c8dc4ddb842cf']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/audio/AudioDeviceInventory.java,"[(846, 846, 1), (1305, 1305, 1)]","            delay = SystemProperties.getInt(""audio.sys.noisy.broadcast.delay"", 700);
","            delay = SystemProperties.getInt(""audio.sys.noisy.broadcast.delay"", 700);
","            delay = SystemProperties.getInt(""audio.sys.noisy.broadcast.delay"", 700);
","[1.0, 1.0]"
138,"['18970c4d9d55a44040fe6fb762dac93a077c64b5', '27e7f8c2aa4ce0a2f59b3bf1969b06bfd1e9ebca']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",location/java/android/location/LocationManager.java,"[(2329, 2329, 1), (943, 943, 1)]","        android.util.SeempLog.record(48);
","        android.util.SeempLog.record(47);
",        android.util.SeempLog.record(4,"[0.905, 0.905]"
139,"['18970c4d9d55a44040fe6fb762dac93a077c64b5', '27e7f8c2aa4ce0a2f59b3bf1969b06bfd1e9ebca']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/pm/PackageManagerService.java,"[(16283, 16285, 3), (16154, 16156, 3)]","        if (pkgName != null)
            acquireUxPerfLock(BoostFramework.UXE_EVENT_PKG_INSTALL, pkgName, 0);
        synchronized (mPackages) {
","        if (DEBUG_INSTALL) Slog.d(TAG, ""New package installed in "" + pkg.getCodePath());
        if (pkgName != null)
            acquireUxPerfLock(BoostFramework.UXE_EVENT_PKG_INSTALL, pkgName, 0);
","        if (pkgName != null)
            acquireUxPerfLock(BoostFramework.UXE_EVENT_PKG_INSTALL, pkgName, 0);
","[0.759, 0.553]"
140,"['18970c4d9d55a44040fe6fb762dac93a077c64b5', '7fd6edc3a3ff37a750641d5e192835fe217f6050']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",location/java/android/location/LocationManager.java,"[(2329, 2329, 1), (716, 716, 1)]","        android.util.SeempLog.record(48);
","        android.util.SeempLog.record(46);
",        android.util.SeempLog.record(4,"[0.905, 0.905]"
141,"['240d78276b3206717587bea012131945c6f60179', '6e3be19b8a58c265a2c3ff4b9cbabdb6a4ae9bf6']","['aospa-ruby-SAP-block_text', 'aospa-quartz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/HotspotControllerImpl.java,"[(235, 247, 13), (190, 204, 15)]","    public void onNumClientsChanged(int numConnectedDevices) {
        // Do nothing - we don't care about changing anything here.
    }

    @Override
    public void onStaConnected(String Macaddr, int numConnectedDevices) {
        mNumConnectedDevices = numConnectedDevices;
        fireHotspotChangedCallback();
    }

    @Override
    public void onStaDisconnected(String Macaddr, int numConnectedDevices) {
        mNumConnectedDevices = numConnectedDevices;
","    @Override
    public void onNumClientsChanged(int numConnectedDevices) {
        // Do nothing - we don't care about changing anything here.
    }

    @Override
    public void onStaConnected(String Macaddr, int numConnectedDevices) {
        mNumConnectedDevices = numConnectedDevices;
        fireHotspotChangedCallback(isHotspotEnabled(), numConnectedDevices);
    }

    @Override
    public void onStaDisconnected(String Macaddr, int numConnectedDevices) {
        mNumConnectedDevices = numConnectedDevices;
        fireHotspotChangedCallback(isHotspotEnabled(), numConnectedDevices);
","    public void onNumClientsChanged(int numConnectedDevices) {
        // Do nothing - we don't care about changing anything here.
    }

    @Override
    public void onStaConnected(String Macaddr, int numConnectedDevices) {
        mNumConnectedDevices = numConnectedDevices;
        fireHotspotChangedCallback(","[0.672, 0.525]"
142,"['240d78276b3206717587bea012131945c6f60179', 'ddcaa93e851eb5e57692799446f2ef3fe31436ae']","['aospa-ruby-SAP-block_text', 'aospa-quartz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/policy/HotspotControllerImpl.java,"[(235, 247, 13), (190, 204, 15)]","    public void onNumClientsChanged(int numConnectedDevices) {
        // Do nothing - we don't care about changing anything here.
    }

    @Override
    public void onStaConnected(String Macaddr, int numConnectedDevices) {
        mNumConnectedDevices = numConnectedDevices;
        fireHotspotChangedCallback();
    }

    @Override
    public void onStaDisconnected(String Macaddr, int numConnectedDevices) {
        mNumConnectedDevices = numConnectedDevices;
","    @Override
    public void onNumClientsChanged(int numConnectedDevices) {
        // Do nothing - we don't care about changing anything here.
    }

    @Override
    public void onStaConnected(String Macaddr, int numConnectedDevices) {
        mNumConnectedDevices = numConnectedDevices;
        fireHotspotChangedCallback(isHotspotEnabled(), numConnectedDevices);
    }

    @Override
    public void onStaDisconnected(String Macaddr, int numConnectedDevices) {
        mNumConnectedDevices = numConnectedDevices;
        fireHotspotChangedCallback(isHotspotEnabled(), numConnectedDevices);
","    public void onNumClientsChanged(int numConnectedDevices) {
        // Do nothing - we don't care about changing anything here.
    }

    @Override
    public void onStaConnected(String Macaddr, int numConnectedDevices) {
        mNumConnectedDevices = numConnectedDevices;
        fireHotspotChangedCallback(","[0.672, 0.525]"
143,"['24adcf1303bc4e0f0203c9ea0c691d7faa0c2aba', '27e7f8c2aa4ce0a2f59b3bf1969b06bfd1e9ebca']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",packages/SettingsLib/src/com/android/settingslib/wifi/WifiEntryPreference.java,"[(67, 69, 3), (67, 69, 3)]","    private int mWifiStandard;
    private boolean mVhtMax8SpatialStreamsSupport;
    private boolean mHe8ssCapableAp;
","    private int mWifiStandard;
    private boolean mVhtMax8SpatialStreamsSupport;
    private boolean mHe8ssCapableAp;
","    private int mWifiStandard;
    private boolean mVhtMax8SpatialStreamsSupport;
    private boolean mHe8ssCapableAp;
","[1.0, 1.0]"
144,"['24adcf1303bc4e0f0203c9ea0c691d7faa0c2aba', '27e7f8c2aa4ce0a2f59b3bf1969b06bfd1e9ebca']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",packages/SettingsLib/src/com/android/settingslib/wifi/WifiEntryPreference.java,"[(142, 152, 11), (142, 152, 11)]","        final int standard = mWifiEntry.getWifiStandard();
        final boolean vhtMax8SpatialStreamsSupport = mWifiEntry.isVhtMax8SpatialStreamsSupported();
        final boolean he8ssCapableAp = mWifiEntry.isHe8ssCapableAp();

        if (level != mLevel || standard != mWifiStandard || he8ssCapableAp != mHe8ssCapableAp ||
                vhtMax8SpatialStreamsSupport != mVhtMax8SpatialStreamsSupport) {
            mLevel = level;
            mWifiStandard = standard;
            mHe8ssCapableAp = he8ssCapableAp;
            mVhtMax8SpatialStreamsSupport = vhtMax8SpatialStreamsSupport;
            updateIcon(mLevel, mWifiStandard, mHe8ssCapableAp && mVhtMax8SpatialStreamsSupport);
","        final int standard = mWifiEntry.getWifiStandard();
        final boolean vhtMax8SpatialStreamsSupport = mWifiEntry.isVhtMax8SpatialStreamsSupported();
        final boolean he8ssCapableAp = mWifiEntry.isHe8ssCapableAp();

        if (level != mLevel || standard != mWifiStandard || he8ssCapableAp != mHe8ssCapableAp ||
                vhtMax8SpatialStreamsSupport != mVhtMax8SpatialStreamsSupport) {
            mLevel = level;
            mWifiStandard = standard;
            mHe8ssCapableAp = he8ssCapableAp;
            mVhtMax8SpatialStreamsSupport = vhtMax8SpatialStreamsSupport;
            updateIcon(mLevel, mWifiStandard, mHe8ssCapableAp && mVhtMax8SpatialStreamsSupport);
","        final int standard = mWifiEntry.getWifiStandard();
        final boolean vhtMax8SpatialStreamsSupport = mWifiEntry.isVhtMax8SpatialStreamsSupported();
        final boolean he8ssCapableAp = mWifiEntry.isHe8ssCapableAp();

        if (level != mLevel || standard != mWifiStandard || he8ssCapableAp != mHe8ssCapableAp ||
                vhtMax8SpatialStreamsSupport != mVhtMax8SpatialStreamsSupport) {
            mLevel = level;
            mWifiStandard = standard;
            mHe8ssCapableAp = he8ssCapableAp;
            mVhtMax8SpatialStreamsSupport = vhtMax8SpatialStreamsSupport;
            updateIcon(mLevel, mWifiStandard, mHe8ssCapableAp && mVhtMax8SpatialStreamsSupport);
","[1.0, 1.0]"
145,"['24adcf1303bc4e0f0203c9ea0c691d7faa0c2aba', '27e7f8c2aa4ce0a2f59b3bf1969b06bfd1e9ebca']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",packages/SettingsLib/src/com/android/settingslib/wifi/WifiEntryPreference.java,"[(211, 211, 1), (211, 211, 1)]","    private void updateIcon(int level, int standard, boolean isReady) {
","    private void updateIcon(int level, int standard, boolean isReady) {
","    private void updateIcon(int level, int standard, boolean isReady) {
","[1.0, 1.0]"
146,"['24adcf1303bc4e0f0203c9ea0c691d7faa0c2aba', '27e7f8c2aa4ce0a2f59b3bf1969b06bfd1e9ebca']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",packages/SettingsLib/src/com/android/settingslib/wifi/WifiEntryPreference.java,"[(217, 217, 1), (217, 217, 1)]","        final Drawable drawable = mIconInjector.getIcon(level, standard, isReady);
","        final Drawable drawable = mIconInjector.getIcon(level, standard, isReady);
","        final Drawable drawable = mIconInjector.getIcon(level, standard, isReady);
","[1.0, 1.0]"
147,"['24adcf1303bc4e0f0203c9ea0c691d7faa0c2aba', '27e7f8c2aa4ce0a2f59b3bf1969b06bfd1e9ebca']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/audio/AudioService.java,"[(3715, 3716, 2), (3719, 3720, 2)]","            Log.i(TAG, ""In binderDied(), calling setModeOwnerPid()"");
            mDeviceBroker.postSetModeOwnerPid(newModeOwnerPid);
","            Log.i(TAG, ""In binderDied(), calling setModeOwnerPid()"");
            mDeviceBroker.postSetModeOwnerPid(newModeOwnerPid);
","            Log.i(TAG, ""In binderDied(), calling setModeOwnerPid()"");
            mDeviceBroker.postSetModeOwnerPid(newModeOwnerPid);
","[1.0, 1.0]"
148,"['24adcf1303bc4e0f0203c9ea0c691d7faa0c2aba', '27e7f8c2aa4ce0a2f59b3bf1969b06bfd1e9ebca']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",packages/SettingsLib/src/com/android/settingslib/Utils.java,"[(380, 380, 1), (380, 380, 1)]","        return getWifiIconResource(level, 0 /* standard */, false /* isReady */);
","        return getWifiIconResource(level, 0 /* standard */, false /* isReady */);
","        return getWifiIconResource(level, 0 /* standard */, false /* isReady */);
","[1.0, 1.0]"
149,"['24adcf1303bc4e0f0203c9ea0c691d7faa0c2aba', '27e7f8c2aa4ce0a2f59b3bf1969b06bfd1e9ebca']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",packages/SettingsLib/src/com/android/settingslib/Utils.java,"[(386, 407, 22), (386, 407, 22)]","     * @param level The number of bars to show (0-4)
     * @throws IllegalArgumentException if an invalid RSSI level is given.
     */
    public static int getWifiIconResource(int level, int standard, boolean isReady) {
        if (level < 0 || level >= WIFI_PIE.length) {
            throw new IllegalArgumentException(""No Wifi icon found for level: "" + level);
        }

        switch (standard) {
            case 4:
                return WIFI_4_PIE[level];
            case 5:
                if (isReady) {
                    return WIFI_6_PIE[level];
                } else {
                    return WIFI_5_PIE[level];
                }
            case 6:
                return WIFI_6_PIE[level];
            default:
                return WIFI_PIE[level];
       }
","     * @param level The number of bars to show (0-4)
     * @throws IllegalArgumentException if an invalid RSSI level is given.
     */
    public static int getWifiIconResource(int level, int standard, boolean isReady) {
        if (level < 0 || level >= WIFI_PIE.length) {
            throw new IllegalArgumentException(""No Wifi icon found for level: "" + level);
        }

        switch (standard) {
            case 4:
                return WIFI_4_PIE[level];
            case 5:
                if (isReady) {
                    return WIFI_6_PIE[level];
                } else {
                    return WIFI_5_PIE[level];
                }
            case 6:
                return WIFI_6_PIE[level];
            default:
                return WIFI_PIE[level];
       }
","     * @param level The number of bars to show (0-4)
     * @throws IllegalArgumentException if an invalid RSSI level is given.
     */
    public static int getWifiIconResource(int level, int standard, boolean isReady) {
        if (level < 0 || level >= WIFI_PIE.length) {
            throw new IllegalArgumentException(""No Wifi icon found for level: "" + level);
        }

        switch (standard) {
            case 4:
                return WIFI_4_PIE[level];
            case 5:
                if (isReady) {
                    return WIFI_6_PIE[level];
                } else {
                    return WIFI_5_PIE[level];
                }
            case 6:
                return WIFI_6_PIE[level];
            default:
                return WIFI_PIE[level];
       }
","[1.0, 1.0]"
150,"['24adcf1303bc4e0f0203c9ea0c691d7faa0c2aba', '27e7f8c2aa4ce0a2f59b3bf1969b06bfd1e9ebca']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/BluetoothManagerService.java,"[(98, 98, 1), (99, 99, 1)]","    private static final String BLUETOOTH_PRIVILEGED_PERM = android.Manifest.permission.BLUETOOTH_PRIVILEGED;
","    private static final String BLUETOOTH_PRIVILEGED_PERM = android.Manifest.permission.BLUETOOTH_PRIVILEGED;
","    private static final String BLUETOOTH_PRIVILEGED_PERM = android.Manifest.permission.BLUETOOTH_PRIVILEGED;
","[1.0, 1.0]"
151,"['24adcf1303bc4e0f0203c9ea0c691d7faa0c2aba', '27e7f8c2aa4ce0a2f59b3bf1969b06bfd1e9ebca']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/am/CachedAppOptimizer.java,"[(286, 358, 73), (286, 358, 73)]","        Process.setThreadGroupAndCpuset(mCachedAppOptimizerThread.getThreadId(),
                Process.THREAD_GROUP_SYSTEM);
        setAppCompactProperties();
    }

    private void setAppCompactProperties() {
        boolean useCompaction =
                    Boolean.valueOf(mPerf.perfGetProp(""vendor.appcompact.enable_app_compact"",
                        ""false""));
        int someCompactionType =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.some_compact_type"",
                        String.valueOf(COMPACT_ACTION_ANON_FLAG)));
        int fullCompactionType =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.full_compact_type"",
                        String.valueOf(COMPACT_ACTION_ANON_FLAG)));
        int compactThrottleSomeSome =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.compact_throttle_somesome"",
                        String.valueOf(DEFAULT_COMPACT_THROTTLE_1)));
        int compactThrottleSomeFull =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.compact_throttle_somefull"",
                        String.valueOf(DEFAULT_COMPACT_THROTTLE_2)));
        int compactThrottleFullSome =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.compact_throttle_fullsome"",
                        String.valueOf(DEFAULT_COMPACT_THROTTLE_3)));
        int compactThrottleFullFull =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.compact_throttle_fullfull"",
                        String.valueOf(DEFAULT_COMPACT_THROTTLE_4)));
        int compactThrottleBfgs =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.compact_throttle_bfgs"",
                        String.valueOf(DEFAULT_COMPACT_THROTTLE_5)));
        int compactThrottlePersistent =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.compact_throttle_persistent"",
                        String.valueOf(DEFAULT_COMPACT_THROTTLE_6)));
        int fullRssThrottleKB =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.rss_throttle_kb"",
                        String.valueOf(DEFAULT_COMPACT_FULL_RSS_THROTTLE_KB)));
        int deltaRssThrottleKB =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.delta_rss_throttle_kb"",
                        String.valueOf(DEFAULT_COMPACT_FULL_DELTA_RSS_THROTTLE_KB)));

        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_ACTION_1,
                        String.valueOf(someCompactionType), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_ACTION_2,
                        String.valueOf(fullCompactionType), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_THROTTLE_1,
                        String.valueOf(compactThrottleSomeSome), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_THROTTLE_2,
                        String.valueOf(compactThrottleSomeFull), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_THROTTLE_3,
                        String.valueOf(compactThrottleFullSome), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_THROTTLE_4,
                        String.valueOf(compactThrottleFullFull), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_THROTTLE_5,
                        String.valueOf(compactThrottleBfgs), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_THROTTLE_6,
                        String.valueOf(compactThrottlePersistent), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_FULL_RSS_THROTTLE_KB,
                        String.valueOf(fullRssThrottleKB), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_FULL_DELTA_RSS_THROTTLE_KB,
                        String.valueOf(deltaRssThrottleKB), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_USE_COMPACTION,
                        String.valueOf(useCompaction), true);
","        Process.setThreadGroupAndCpuset(mCachedAppOptimizerThread.getThreadId(),
                Process.THREAD_GROUP_SYSTEM);
        setAppCompactProperties();
    }

    private void setAppCompactProperties() {
        boolean useCompaction =
                    Boolean.valueOf(mPerf.perfGetProp(""vendor.appcompact.enable_app_compact"",
                        ""false""));
        int someCompactionType =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.some_compact_type"",
                        String.valueOf(COMPACT_ACTION_ANON_FLAG)));
        int fullCompactionType =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.full_compact_type"",
                        String.valueOf(COMPACT_ACTION_ANON_FLAG)));
        int compactThrottleSomeSome =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.compact_throttle_somesome"",
                        String.valueOf(DEFAULT_COMPACT_THROTTLE_1)));
        int compactThrottleSomeFull =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.compact_throttle_somefull"",
                        String.valueOf(DEFAULT_COMPACT_THROTTLE_2)));
        int compactThrottleFullSome =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.compact_throttle_fullsome"",
                        String.valueOf(DEFAULT_COMPACT_THROTTLE_3)));
        int compactThrottleFullFull =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.compact_throttle_fullfull"",
                        String.valueOf(DEFAULT_COMPACT_THROTTLE_4)));
        int compactThrottleBfgs =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.compact_throttle_bfgs"",
                        String.valueOf(DEFAULT_COMPACT_THROTTLE_5)));
        int compactThrottlePersistent =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.compact_throttle_persistent"",
                        String.valueOf(DEFAULT_COMPACT_THROTTLE_6)));
        int fullRssThrottleKB =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.rss_throttle_kb"",
                        String.valueOf(DEFAULT_COMPACT_FULL_RSS_THROTTLE_KB)));
        int deltaRssThrottleKB =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.delta_rss_throttle_kb"",
                        String.valueOf(DEFAULT_COMPACT_FULL_DELTA_RSS_THROTTLE_KB)));

        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_ACTION_1,
                        String.valueOf(someCompactionType), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_ACTION_2,
                        String.valueOf(fullCompactionType), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_THROTTLE_1,
                        String.valueOf(compactThrottleSomeSome), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_THROTTLE_2,
                        String.valueOf(compactThrottleSomeFull), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_THROTTLE_3,
                        String.valueOf(compactThrottleFullSome), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_THROTTLE_4,
                        String.valueOf(compactThrottleFullFull), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_THROTTLE_5,
                        String.valueOf(compactThrottleBfgs), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_THROTTLE_6,
                        String.valueOf(compactThrottlePersistent), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_FULL_RSS_THROTTLE_KB,
                        String.valueOf(fullRssThrottleKB), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_FULL_DELTA_RSS_THROTTLE_KB,
                        String.valueOf(deltaRssThrottleKB), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_USE_COMPACTION,
                        String.valueOf(useCompaction), true);
","        Process.setThreadGroupAndCpuset(mCachedAppOptimizerThread.getThreadId(),
                Process.THREAD_GROUP_SYSTEM);
        setAppCompactProperties();
    }

    private void setAppCompactProperties() {
        boolean useCompaction =
                    Boolean.valueOf(mPerf.perfGetProp(""vendor.appcompact.enable_app_compact"",
                        ""false""));
        int someCompactionType =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.some_compact_type"",
                        String.valueOf(COMPACT_ACTION_ANON_FLAG)));
        int fullCompactionType =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.full_compact_type"",
                        String.valueOf(COMPACT_ACTION_ANON_FLAG)));
        int compactThrottleSomeSome =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.compact_throttle_somesome"",
                        String.valueOf(DEFAULT_COMPACT_THROTTLE_1)));
        int compactThrottleSomeFull =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.compact_throttle_somefull"",
                        String.valueOf(DEFAULT_COMPACT_THROTTLE_2)));
        int compactThrottleFullSome =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.compact_throttle_fullsome"",
                        String.valueOf(DEFAULT_COMPACT_THROTTLE_3)));
        int compactThrottleFullFull =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.compact_throttle_fullfull"",
                        String.valueOf(DEFAULT_COMPACT_THROTTLE_4)));
        int compactThrottleBfgs =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.compact_throttle_bfgs"",
                        String.valueOf(DEFAULT_COMPACT_THROTTLE_5)));
        int compactThrottlePersistent =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.compact_throttle_persistent"",
                        String.valueOf(DEFAULT_COMPACT_THROTTLE_6)));
        int fullRssThrottleKB =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.rss_throttle_kb"",
                        String.valueOf(DEFAULT_COMPACT_FULL_RSS_THROTTLE_KB)));
        int deltaRssThrottleKB =
                    Integer.valueOf(mPerf.perfGetProp(""vendor.appcompact.delta_rss_throttle_kb"",
                        String.valueOf(DEFAULT_COMPACT_FULL_DELTA_RSS_THROTTLE_KB)));

        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_ACTION_1,
                        String.valueOf(someCompactionType), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_ACTION_2,
                        String.valueOf(fullCompactionType), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_THROTTLE_1,
                        String.valueOf(compactThrottleSomeSome), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_THROTTLE_2,
                        String.valueOf(compactThrottleSomeFull), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_THROTTLE_3,
                        String.valueOf(compactThrottleFullSome), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_THROTTLE_4,
                        String.valueOf(compactThrottleFullFull), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_THROTTLE_5,
                        String.valueOf(compactThrottleBfgs), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_THROTTLE_6,
                        String.valueOf(compactThrottlePersistent), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_FULL_RSS_THROTTLE_KB,
                        String.valueOf(fullRssThrottleKB), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_COMPACT_FULL_DELTA_RSS_THROTTLE_KB,
                        String.valueOf(deltaRssThrottleKB), true);
        DeviceConfig.setProperty(
                    DeviceConfig.NAMESPACE_ACTIVITY_MANAGER, KEY_USE_COMPACTION,
                        String.valueOf(useCompaction), true);
","[1.0, 1.0]"
152,"['24adcf1303bc4e0f0203c9ea0c691d7faa0c2aba', '449f659b21d039b8692602294b040038ac1e6ccb']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/bluetooth/BluetoothCodecConfig.java,"[(64, 78, 15), (64, 78, 15)]","    public static final int SOURCE_CODEC_TYPE_APTX_ADAPTIVE = 4;

    public static final int SOURCE_CODEC_TYPE_LDAC = 5;

    public static final int SOURCE_CODEC_TYPE_APTX_TWSP = 6;

    public static final int SOURCE_CODEC_TYPE_MAX = 7;

    /* CELT is not an A2DP Codec and only used to fetch encoder
    ** format for BA usecase, moving out of a2dp codec value list
    */
    public static final int SOURCE_CODEC_TYPE_CELT = 8;

    public static final int SOURCE_CODEC_TYPE_LC3 = 9;

","    public static final int SOURCE_CODEC_TYPE_APTX_ADAPTIVE = 4;

    public static final int SOURCE_CODEC_TYPE_LDAC = 5;

    public static final int SOURCE_CODEC_TYPE_APTX_TWSP = 6;

    public static final int SOURCE_CODEC_TYPE_MAX = 7;

    /* CELT is not an A2DP Codec and only used to fetch encoder
    ** format for BA usecase, moving out of a2dp codec value list
    */
    public static final int SOURCE_CODEC_TYPE_CELT = 8;

   public static final int SOURCE_CODEC_TYPE_LC3 = 9;

","    public static final int SOURCE_CODEC_TYPE_APTX_ADAPTIVE = 4;

    public static final int SOURCE_CODEC_TYPE_LDAC = 5;

    public static final int SOURCE_CODEC_TYPE_APTX_TWSP = 6;

    public static final int SOURCE_CODEC_TYPE_MAX = 7;

    /* CELT is not an A2DP Codec and only used to fetch encoder
    ** format for BA usecase, moving out of a2dp codec value list
    */
    public static final int SOURCE_CODEC_TYPE_CELT = 8;

   ","[0.892, 0.894]"
153,"['24adcf1303bc4e0f0203c9ea0c691d7faa0c2aba', '8abdf0e95a5d15a310b6df69d33a4510a0b44b4a']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",packages/SystemUI/src/com/android/systemui/ScreenDecorations.java,"[(597, 597, 1), (597, 597, 1)]","        int newRoundedDefault = mContext.getResources().getDimensionPixelSize(
","        int newRoundedDefault = mContext.getResources().getDimensionPixelSize(
","        int newRoundedDefault = mContext.getResources().getDimensionPixelSize(
","[1.0, 1.0]"
154,"['3d2fc559e13b7293212955f1858d443f4fe8234e', '2051462f672b5986ef321bf1de3657e7653864e8']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",packages/SystemUI/src/com/android/systemui/qs/tiles/HotspotTile.java,"[(20, 21, 2), (19, 20, 2)]","import android.content.ComponentName;
import android.content.Context;
","import android.annotation.Nullable;
import android.content.Context;
","e;
import android.content.Context;
","[0.5, 0.515]"
155,"['3d2fc559e13b7293212955f1858d443f4fe8234e', '27e7f8c2aa4ce0a2f59b3bf1969b06bfd1e9ebca']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/am/ActivityManagerConstants.java,"[(28, 29, 2), (29, 30, 2)]","import android.os.SystemProperties;
import android.os.Process;
","import android.os.Process;
import android.os.SystemProperties;
","import android.os.SystemProperties;
","[0.571, 0.571]"
156,"['3d2fc559e13b7293212955f1858d443f4fe8234e', '337095f9d277c566cb888bc3adbac16576f1ae70']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/display/LocalDisplayAdapter.java,"[(544, 565, 22), (609, 628, 20)]","                    mInfo.type = Display.TYPE_BUILT_IN;
                    mInfo.touch = DisplayDeviceInfo.TOUCH_INTERNAL;
                } else if (isBuiltIn) {
                    mInfo.type = Display.TYPE_BUILT_IN;
                    mInfo.touch = DisplayDeviceInfo.TOUCH_INTERNAL;
                    mInfo.name = getContext().getResources().getString(
                            com.android.internal.R.string.display_manager_built_in_display_name);
                    mInfo.flags |= DisplayDeviceInfo.FLAG_ROTATES_WITH_CONTENT;

                    if (SystemProperties.getBoolean(
                                    ""vendor.display.builtin_presentation"", false)) {
                        mInfo.flags |= DisplayDeviceInfo.FLAG_PRESENTATION;
                    } else {
                        mInfo.flags |= DisplayDeviceInfo.FLAG_PRIVATE;
                    }

                    if (!SystemProperties.getBoolean(
                                    ""vendor.display.builtin_mirroring"", false)) {
                        mInfo.flags |= DisplayDeviceInfo.FLAG_OWN_CONTENT_ONLY;
                    }

                    mInfo.setAssumedDensityForExternalDisplay(config.width, config.height);
","                } else if (isBuiltIn) {
                    mInfo.type = Display.TYPE_INTERNAL;
                    mInfo.touch = DisplayDeviceInfo.TOUCH_INTERNAL;
                    mInfo.name = getContext().getResources().getString(
                            com.android.internal.R.string.display_manager_built_in_display_name);
                    mInfo.flags |= DisplayDeviceInfo.FLAG_ROTATES_WITH_CONTENT;

                    if (SystemProperties.getBoolean(
                                    ""vendor.display.builtin_presentation"", false)) {
                        mInfo.flags |= DisplayDeviceInfo.FLAG_PRESENTATION;
                    } else {
                        mInfo.flags |= DisplayDeviceInfo.FLAG_PRIVATE;
                    }

                    if (!SystemProperties.getBoolean(
                                    ""vendor.display.builtin_mirroring"", false)) {
                        mInfo.flags |= DisplayDeviceInfo.FLAG_OWN_CONTENT_ONLY;
                    }

                    mInfo.setAssumedDensityForExternalDisplay(config.width, config.height);
",";
                    mInfo.touch = DisplayDeviceInfo.TOUCH_INTERNAL;
                    mInfo.name = getContext().getResources().getString(
                            com.android.internal.R.string.display_manager_built_in_display_name);
                    mInfo.flags |= DisplayDeviceInfo.FLAG_ROTATES_WITH_CONTENT;

                    if (SystemProperties.getBoolean(
                                    ""vendor.display.builtin_presentation"", false)) {
                        mInfo.flags |= DisplayDeviceInfo.FLAG_PRESENTATION;
                    } else {
                        mInfo.flags |= DisplayDeviceInfo.FLAG_PRIVATE;
                    }

                    if (!SystemProperties.getBoolean(
                                    ""vendor.display.builtin_mirroring"", false)) {
                        mInfo.flags |= DisplayDeviceInfo.FLAG_OWN_CONTENT_ONLY;
                    }

                    mInfo.setAssumedDensityForExternalDisplay(config.width, config.height);
","[0.819, 0.913]"
157,"['3d2fc559e13b7293212955f1858d443f4fe8234e', '4e4914b22b779e6376bb00ae20636175b2a70d8c']","['aospa-ruby-SAP-block_text', 'aospa-topaz-SAP-block_text']",telecomm/java/android/telecom/ConnectionService.java,"[(199, 200, 2), (184, 185, 2)]","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","[1.0, 1.0]"
158,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', '337095f9d277c566cb888bc3adbac16576f1ae70']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/am/ProcessList.java,"[(409, 412, 4), (512, 515, 4)]","    /**
     * BoostFramework Object
     */
    public static BoostFramework mPerfServiceStartHint = new BoostFramework();
","    /**
     * BoostFramework Object
     */
    public static BoostFramework mPerfServiceStartHint = new BoostFramework();
","    /**
     * BoostFramework Object
     */
    public static BoostFramework mPerfServiceStartHint = new BoostFramework();
","[1.0, 1.0]"
159,"['62f4dee264cabcd5595e6e4c0a6ab3228281d3e0', '337095f9d277c566cb888bc3adbac16576f1ae70']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/am/ActiveServices.java,"[(3198, 3204, 7), (3626, 3632, 7)]","                    app.services.remove(r);
                    r.app = null;
                    if (SERVICE_RESCHEDULE && DEBUG_DELAYED_SERVICE) {
                    Slog.w(TAG, "" Failed to create Service !!!! .""
                           +""This will introduce huge delay...  ""
                           +r.shortInstanceName + "" in "" + r.restartDelay + ""ms"");
                    }
","                    app.stopService(r);
                    r.app = null;
                    if (SERVICE_RESCHEDULE && DEBUG_DELAYED_SERVICE) {
                    Slog.w(TAG, "" Failed to create Service !!!! .""
                           +""This will introduce huge delay...  ""
                           +r.shortInstanceName + "" in "" + r.restartDelay + ""ms"");
                    }
","e(r);
                    r.app = null;
                    if (SERVICE_RESCHEDULE && DEBUG_DELAYED_SERVICE) {
                    Slog.w(TAG, "" Failed to create Service !!!! .""
                           +""This will introduce huge delay...  ""
                           +r.shortInstanceName + "" in "" + r.restartDelay + ""ms"");
                    }
","[0.902, 0.911]"
160,"['62f4dee264cabcd5595e6e4c0a6ab3228281d3e0', '3e8cb98421761bb7dfafe59a22a15fe2e176f272']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/audio/AudioService.java,"[(4039, 4044, 6), (5369, 5374, 6)]","        Log.i(TAG, ""In startBluetoothSco()"");
        BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();
        if ((adapter == null) || (adapter.getState() != BluetoothAdapter.STATE_ON)) {
             Log.i(TAG, ""startBluetoothSco(), BT is not turned ON or adapter is null"");
             return;
        }
","        Log.i(TAG, ""In startBluetoothSco()"");
        BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();
        if ((adapter == null) || (adapter.getState() != BluetoothAdapter.STATE_ON)) {
             Log.i(TAG, ""startBluetoothSco(), BT is not turned ON or adapter is null"");
             return;
        }
","        Log.i(TAG, ""In startBluetoothSco()"");
        BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();
        if ((adapter == null) || (adapter.getState() != BluetoothAdapter.STATE_ON)) {
             Log.i(TAG, ""startBluetoothSco(), BT is not turned ON or adapter is null"");
             return;
        }
","[1.0, 1.0]"
161,"['62f4dee264cabcd5595e6e4c0a6ab3228281d3e0', '3e8cb98421761bb7dfafe59a22a15fe2e176f272']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/audio/AudioService.java,"[(4056, 4056, 1), (5397, 5397, 1)]","        Log.i(TAG, ""In startBluetoothScoVirtualCall()"");
","        Log.i(TAG, ""In startBluetoothScoVirtualCall()"");
","        Log.i(TAG, ""In startBluetoothScoVirtualCall()"");
","[1.0, 1.0]"
162,"['62f4dee264cabcd5595e6e4c0a6ab3228281d3e0', '3e8cb98421761bb7dfafe59a22a15fe2e176f272']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/audio/AudioService.java,"[(4064, 4064, 1), (5397, 5397, 1)]","        Log.i(TAG, ""In startBluetoothScoInt(), scoAudioMode: "" + scoAudioMode);
","        Log.i(TAG, ""In startBluetoothScoVirtualCall()"");
","        Log.i(TAG, ""In startBluetoothSco","[0.5, 0.702]"
163,"['69bee5bb55994d647b678b2cb2ce1becd3d77b32', '27e7f8c2aa4ce0a2f59b3bf1969b06bfd1e9ebca']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/wm/TaskDisplayArea.java,"[(147, 154, 8), (158, 162, 5)]","    public static boolean mPerfSendTapHint = false;
    public static boolean mIsPerfBoostAcquired = false;
    public static int mPerfHandle = -1;
    public BoostFramework mPerfBoost = null;
    public BoostFramework mUxPerf = null;

    TaskDisplayArea(DisplayContent displayContent, WindowManagerService service) {
        super(service, Type.ANY, ""TaskContainers"", FEATURE_TASK_CONTAINER);
","    public static boolean mPerfSendTapHint = false;
    public static boolean mIsPerfBoostAcquired = false;
    public static int mPerfHandle = -1;
    public BoostFramework mPerfBoost = null;
    public BoostFramework mUxPerf = null;
","    public static boolean mPerfSendTapHint = false;
    public static boolean mIsPerfBoostAcquired = false;
    public static int mPerfHandle = -1;
    public BoostFramework mPerfBoost = null;
    public BoostFramework mUxPerf = null;
","[0.595, 1.0]"
164,"['69bee5bb55994d647b678b2cb2ce1becd3d77b32', '449f659b21d039b8692602294b040038ac1e6ccb']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/wm/TaskDisplayArea.java,"[(147, 154, 8), (159, 164, 6)]","    public static boolean mPerfSendTapHint = false;
    public static boolean mIsPerfBoostAcquired = false;
    public static int mPerfHandle = -1;
    public BoostFramework mPerfBoost = null;
    public BoostFramework mUxPerf = null;

    TaskDisplayArea(DisplayContent displayContent, WindowManagerService service) {
        super(service, Type.ANY, ""TaskContainers"", FEATURE_TASK_CONTAINER);
","    public static boolean mPerfSendTapHint = false;
    public static boolean mIsPerfBoostAcquired = false;
    public static int mPerfHandle = -1;
    public BoostFramework mPerfBoost = null;
    public BoostFramework mUxPerf = null;

","    public static boolean mPerfSendTapHint = false;
    public static boolean mIsPerfBoostAcquired = false;
    public static int mPerfHandle = -1;
    public BoostFramework mPerfBoost = null;
    public BoostFramework mUxPerf = null;

","[0.597, 1.0]"
165,"['6f47ceafbe6febe54aa5c376baed3415cdf848ad', '337095f9d277c566cb888bc3adbac16576f1ae70']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/content/pm/ApplicationInfo.java,"[(2211, 2212, 2), (2266, 2266, 1)]","    /** {@hide} */ public void setGwpAsanEnabled(@Nullable Boolean value) { enableGwpAsan = value; }
    /** {@hide} */ public void setOverrideRes(int overrideResolution) { overrideRes = overrideResolution; }
","    /** {@hide} */ public void setOverrideRes(int overrideResolution) { overrideRes = overrideResolution; }
","    /** {@hide} */ public void setOverrideRes(int overrideResolution) { overrideRes = overrideResolution; }
","[0.517, 1.0]"
166,"['71998c3d8b36220df1be12fe6e1ba7eda81cde41', '21cdef883cc867db55340b25d5c95e19b12ab383']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/Watchdog.java,"[(688, 688, 1), (747, 747, 1)]","                                    subject, null, finalStack, null);
","                                    subject, report.toString(), finalStack, null);
","                                    subject, ","[0.643, 0.542]"
167,"['71998c3d8b36220df1be12fe6e1ba7eda81cde41', '24818fca475a6726f5ef0cae42149615079af6e9']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/wm/ActivityRecord.java,"[(1662, 1664, 3), (1742, 1744, 3)]","
        if (mPerf == null)
            mPerf = new BoostFramework();
","
        if (mPerf == null)
            mPerf = new BoostFramework();
","
        if (mPerf == null)
            mPerf = new BoostFramework();
","[1.0, 1.0]"
168,"['71998c3d8b36220df1be12fe6e1ba7eda81cde41', 'b03d6d43646266d456c22154a1f6fd945bf79f83']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/wm/ActivityRecord.java,"[(1662, 1664, 3), (1668, 1669, 2)]","
        if (mPerf == null)
            mPerf = new BoostFramework();
","        if (mPerf == null)
            mPerf = new BoostFramework();
","        if (mPerf == null)
            mPerf = new BoostFramework();
","[0.986, 1.0]"
169,"['7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2', '24818fca475a6726f5ef0cae42149615079af6e9']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/audio/AudioService.java,"[(3238, 3239, 2), (4165, 4166, 2)]","        Log.i(TAG, ""setMode(mode = "" + mode + "", callingPackage = "" +
                  callingPackage + "", Process ID: "" + Binder.getCallingPid());
","        Log.i(TAG, ""setMode(mode = "" + mode + "", callingPackage = "" +
                  callingPackage + "", Process ID: "" + Binder.getCallingPid());
","        Log.i(TAG, ""setMode(mode = "" + mode + "", callingPackage = "" +
                  callingPackage + "", Process ID: "" + Binder.getCallingPid());
","[1.0, 1.0]"
170,"['7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2', '24818fca475a6726f5ef0cae42149615079af6e9']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",telephony/java/com/android/internal/telephony/uicc/IccUtils.java,"[(31, 31, 1), (32, 32, 1)]","import java.nio.charset.Charset;
","import java.nio.charset.Charset;
","import java.nio.charset.Charset;
","[1.0, 1.0]"
171,"['7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2', '27e7f8c2aa4ce0a2f59b3bf1969b06bfd1e9ebca']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/audio/AudioDeviceBroker.java,"[(929, 944, 16), (1092, 1108, 17)]","                } break;
                case MSG_L_A2DP_ACTIVE_DEVICE_CHANGE_EXT: {
                    final BtDeviceConnectionInfo info = (BtDeviceConnectionInfo) msg.obj;
                    AudioService.sDeviceLogger.log((new AudioEventLogger.StringEvent(
                    ""handleBluetoothA2dpActiveDeviceChangeExt ""
                           + "" state="" + info.mState
                           // only querying address as this is the only readily available
                           // field on the device
                           + "" addr="" + info.mDevice.getAddress()
                           + "" prof="" + info.mProfile + "" supprNoisy="" + info.mSupprNoisy
                           + "" vol="" + info.mVolume)).printLog(TAG));
                    synchronized (mDeviceStateLock) {
                        mDeviceInventory.handleBluetoothA2dpActiveDeviceChangeExt(
                                info.mDevice, info.mState, info.mProfile,
                                info.mSupprNoisy, info.mVolume);
                    }
","                case MSG_L_A2DP_ACTIVE_DEVICE_CHANGE_EXT: {
                    final BtDeviceConnectionInfo info = (BtDeviceConnectionInfo) msg.obj;
                    AudioService.sDeviceLogger.log((new AudioEventLogger.StringEvent(
                    ""handleBluetoothA2dpActiveDeviceChangeExt ""
                           + "" state="" + info.mState
                           // only querying address as this is the only readily available
                           // field on the device
                           + "" addr="" + info.mDevice.getAddress()
                           + "" prof="" + info.mProfile + "" supprNoisy="" + info.mSupprNoisy
                           + "" vol="" + info.mVolume)).printLog(TAG));
                    synchronized (mDeviceStateLock) {
                        mDeviceInventory.handleBluetoothA2dpActiveDeviceChangeExt(
                                info.mDevice, info.mState, info.mProfile,
                                info.mSupprNoisy, info.mVolume);
                    }
                } break;
                case MSG_IL_SAVE_PREF_DEVICE_FOR_STRATEGY: {
","                case MSG_L_A2DP_ACTIVE_DEVICE_CHANGE_EXT: {
                    final BtDeviceConnectionInfo info = (BtDeviceConnectionInfo) msg.obj;
                    AudioService.sDeviceLogger.log((new AudioEventLogger.StringEvent(
                    ""handleBluetoothA2dpActiveDeviceChangeExt ""
                           + "" state="" + info.mState
                           // only querying address as this is the only readily available
                           // field on the device
                           + "" addr="" + info.mDevice.getAddress()
                           + "" prof="" + info.mProfile + "" supprNoisy="" + info.mSupprNoisy
                           + "" vol="" + info.mVolume)).printLog(TAG));
                    synchronized (mDeviceStateLock) {
                        mDeviceInventory.handleBluetoothA2dpActiveDeviceChangeExt(
                                info.mDevice, info.mState, info.mProfile,
                                info.mSupprNoisy, info.mVolume);
                    }
","[0.976, 0.922]"
172,"['7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2', '337095f9d277c566cb888bc3adbac16576f1ae70']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/am/OomAdjuster.java,"[(583, 596, 14), (1151, 1160, 10)]","        if ((numBServices > mBServiceAppThreshold) && (true == mService.mAllowLowerMemLevel)
                && (selectedAppRecord != null)) {
            ProcessList.setOomAdj(selectedAppRecord.pid, selectedAppRecord.info.uid,
                    ProcessList.CACHED_APP_MAX_ADJ);
            selectedAppRecord.setAdj = selectedAppRecord.curAdj;
            if (DEBUG_OOM_ADJ) Slog.d(TAG,""app.processName = "" + selectedAppRecord.processName
                        + "" app.pid = "" + selectedAppRecord.pid + "" is moved to higher adj"");
        }

        mService.incrementProcStateSeqAndNotifyAppsLocked();

        mNumServiceProcs = mNewNumServiceProcs;

        boolean allChanged = mService.updateLowMemStateLocked(numCached, numEmpty, numTrimming);
","        if ((numBServices > mBServiceAppThreshold) && (true == mService.mAppProfiler.allowLowerMemLevelLocked())
                && (selectedAppRecord != null)) {
            ProcessList.setOomAdj(selectedAppRecord.pid, selectedAppRecord.info.uid,
                    ProcessList.CACHED_APP_MAX_ADJ);
            selectedAppRecord.setAdj = selectedAppRecord.curAdj;
            if (DEBUG_OOM_ADJ) Slog.d(TAG,""app.processName = "" + selectedAppRecord.processName
                        + "" app.pid = "" + selectedAppRecord.pid + "" is moved to higher adj"");
        }

        mProcessList.incrementProcStateSeqAndNotifyAppsLocked(activeUids);
",")
                && (selectedAppRecord != null)) {
            ProcessList.setOomAdj(selectedAppRecord.pid, selectedAppRecord.info.uid,
                    ProcessList.CACHED_APP_MAX_ADJ);
            selectedAppRecord.setAdj = selectedAppRecord.curAdj;
            if (DEBUG_OOM_ADJ) Slog.d(TAG,""app.processName = "" + selectedAppRecord.processName
                        + "" app.pid = "" + selectedAppRecord.pid + "" is moved to higher adj"");
        }

        m","[0.615, 0.724]"
173,"['7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2', '337095f9d277c566cb888bc3adbac16576f1ae70']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/phone/KeyguardBottomAreaView.java,"[(120, 121, 2), (121, 122, 2)]","    private EmergencyCarrierArea mEmergencyCarrierArea;
    private final UnlockMethodCache mUnlockMethodCache;
","    private EmergencyCarrierArea mEmergencyCarrierArea;

","    private EmergencyCarrierArea mEmergencyCarrierArea;
","[0.5, 0.982]"
174,"['7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2', '449f659b21d039b8692602294b040038ac1e6ccb']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/audio/AudioDeviceBroker.java,"[(221, 223, 3), (303, 306, 4)]","            if (AudioService.DEBUG_SCO) {
                Log.i(TAG, ""In isSpeakerphoneOn(), mForcedUseForCommExt: "" +mForcedUseForCommExt);
            }
","            if (AudioService.DEBUG_SCO) {
                Log.i(TAG, ""In isSpeakerphoneOn(), mForcedUseForCommExt: "" +mForcedUseForCommExt);
            }
            return (mForcedUseForCommExt == AudioSystem.FORCE_SPEAKER);
","            if (AudioService.DEBUG_SCO) {
                Log.i(TAG, ""In isSpeakerphoneOn(), mForcedUseForCommExt: "" +mForcedUseForCommExt);
            }
","[1.0, 0.683]"
175,"['7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2', '8abdf0e95a5d15a310b6df69d33a4510a0b44b4a']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",packages/SystemUI/src/com/android/systemui/util/sensors/AsyncSensorManager.java,"[(100, 102, 3), (100, 107, 8)]","        if ( sensor == null ) {
            Log.e(TAG, ""sensor cannot be null \n"" + Log.getStackTraceString(new Throwable()));
            return false;
","        if ( sensor == null ) {
            Log.e(TAG, ""sensor cannot be null \n"" + Log.getStackTraceString(new Throwable()));
            return false;
        }
        mHandler.post(() -> {
            if ( sensor == null ) {
                Log.e(TAG, ""sensor cannot be null"");
            }
","        if ( sensor == null ) {
            Log.e(TAG, ""sensor cannot be null \n"" + Log.getStackTraceString(new Throwable()));
            return false;
","[1.0, 0.517]"
176,"['7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2', '74a21b989f82a6a024f29085ad324e939472bed1']","['aospa-ruby-SAP-block_text', 'aospa-topaz-SAP-block_text']",core/java/android/hardware/camera2/CameraManager.java,"[(24, 24, 1), (26, 26, 1)]","import android.app.ActivityThread;
","import android.app.ActivityThread;
","import android.app.ActivityThread;
","[1.0, 1.0]"
177,"['82ca638edd627c1b70aae1505f06c8ddaef731d2', '7fd6edc3a3ff37a750641d5e192835fe217f6050']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/BluetoothManagerService.java,"[(1308, 1310, 3), (1347, 1349, 3)]","        if (isBluetoothAvailableForBinding() == false) {
            Slog.w(TAG, ""bindBluetoothProfileService:Trying to bind to profile: ""
                       + bluetoothProfile + "", while Bluetooth is disabled"");
","        if (isBluetoothAvailableForBinding() == false) {
            Slog.w(TAG, ""bindBluetoothProfileService:Trying to bind to profile: ""
                       + bluetoothProfile + "", while Bluetooth is disabled"");
","        if (isBluetoothAvailableForBinding() == false) {
            Slog.w(TAG, ""bindBluetoothProfileService:Trying to bind to profile: ""
                       + bluetoothProfile + "", while Bluetooth is disabled"");
","[1.0, 1.0]"
178,"['8faa0d981413f18b2468dde1b1fe71e248df0df1', '21cdef883cc867db55340b25d5c95e19b12ab383']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/Watchdog.java,"[(695, 695, 1), (747, 747, 1)]","                                    subject, cpuInfo, finalStack, null);
","                                    subject, report.toString(), finalStack, null);
","                                    subject, ","[0.616, 0.542]"
179,"['a33382db0bb0bc29bab84f1e5ee36d682bea593e', '337095f9d277c566cb888bc3adbac16576f1ae70']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/content/pm/ApplicationInfo.java,"[(2190, 2190, 1), (2266, 2266, 1)]","    /** {@hide} */ public void setOverrideRes(int overrideResolution) { overrideRes = overrideResolution; }
","    /** {@hide} */ public void setOverrideRes(int overrideResolution) { overrideRes = overrideResolution; }
","    /** {@hide} */ public void setOverrideRes(int overrideResolution) { overrideRes = overrideResolution; }
","[1.0, 1.0]"
180,"['a33382db0bb0bc29bab84f1e5ee36d682bea593e', '337095f9d277c566cb888bc3adbac16576f1ae70']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/content/pm/ApplicationInfo.java,"[(2202, 2202, 1), (2280, 2280, 1)]","    /** {@hide} */ public int canOverrideRes() { return overrideRes; }
","    /** {@hide} */ public int canOverrideRes() { return overrideRes; }
","    /** {@hide} */ public int canOverrideRes() { return overrideRes; }
","[1.0, 1.0]"
181,"['a9736185db896fe2edde0281d71102b35327b7f8', '02a7ee5d65cb8d40fd1dde9aaf6b5ead9222a5a6']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/app/ActivityManagerInternal.java,"[(431, 432, 2), (638, 639, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
182,"['a9736185db896fe2edde0281d71102b35327b7f8', '1b62159ffcebb2c102e129b2e778a8f65b7e5948']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/app/ActivityManagerInternal.java,"[(431, 432, 2), (587, 588, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
183,"['a9736185db896fe2edde0281d71102b35327b7f8', '2051462f672b5986ef321bf1de3657e7653864e8']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/app/ActivityManagerInternal.java,"[(431, 432, 2), (574, 575, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
184,"['a9736185db896fe2edde0281d71102b35327b7f8', '24818fca475a6726f5ef0cae42149615079af6e9']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/app/ActivityManagerInternal.java,"[(431, 432, 2), (542, 543, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
185,"['a9736185db896fe2edde0281d71102b35327b7f8', '3933f277a025be704e68ea593536e492831a7e05']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/app/ActivityManagerInternal.java,"[(431, 432, 2), (479, 480, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
186,"['a9736185db896fe2edde0281d71102b35327b7f8', '9272406e82304c5a2a8124c75eedb4b5fdf7273a']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/app/ActivityManagerInternal.java,"[(431, 432, 2), (444, 445, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
187,"['a9736185db896fe2edde0281d71102b35327b7f8', 'e85435d4d9a2f7122bd5c97ad0a25c768d124a0e']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/app/ActivityManagerInternal.java,"[(431, 432, 2), (490, 491, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
188,"['ae1b3a8f3221dbe692fd90d414cfe5040538c264', '27e7f8c2aa4ce0a2f59b3bf1969b06bfd1e9ebca']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/audio/AudioDeviceBroker.java,"[(931, 945, 15), (1092, 1108, 17)]","                case MSG_L_A2DP_ACTIVE_DEVICE_CHANGE_EXT: {
                    final BtDeviceConnectionInfo info = (BtDeviceConnectionInfo) msg.obj;
                    AudioService.sDeviceLogger.log((new AudioEventLogger.StringEvent(
                    ""handleBluetoothA2dpActiveDeviceChangeExt ""
                           + "" state="" + info.mState
                           // only querying address as this is the only readily available
                           // field on the device
                           + "" addr="" + info.mDevice.getAddress()
                           + "" prof="" + info.mProfile + "" supprNoisy="" + info.mSupprNoisy
                           + "" vol="" + info.mVolume)).printLog(TAG));
                    synchronized (mDeviceStateLock) {
                        mDeviceInventory.handleBluetoothA2dpActiveDeviceChangeExt(
                                info.mDevice, info.mState, info.mProfile,
                                info.mSupprNoisy, info.mVolume);
                    }
","                case MSG_L_A2DP_ACTIVE_DEVICE_CHANGE_EXT: {
                    final BtDeviceConnectionInfo info = (BtDeviceConnectionInfo) msg.obj;
                    AudioService.sDeviceLogger.log((new AudioEventLogger.StringEvent(
                    ""handleBluetoothA2dpActiveDeviceChangeExt ""
                           + "" state="" + info.mState
                           // only querying address as this is the only readily available
                           // field on the device
                           + "" addr="" + info.mDevice.getAddress()
                           + "" prof="" + info.mProfile + "" supprNoisy="" + info.mSupprNoisy
                           + "" vol="" + info.mVolume)).printLog(TAG));
                    synchronized (mDeviceStateLock) {
                        mDeviceInventory.handleBluetoothA2dpActiveDeviceChangeExt(
                                info.mDevice, info.mState, info.mProfile,
                                info.mSupprNoisy, info.mVolume);
                    }
                } break;
                case MSG_IL_SAVE_PREF_DEVICE_FOR_STRATEGY: {
","                case MSG_L_A2DP_ACTIVE_DEVICE_CHANGE_EXT: {
                    final BtDeviceConnectionInfo info = (BtDeviceConnectionInfo) msg.obj;
                    AudioService.sDeviceLogger.log((new AudioEventLogger.StringEvent(
                    ""handleBluetoothA2dpActiveDeviceChangeExt ""
                           + "" state="" + info.mState
                           // only querying address as this is the only readily available
                           // field on the device
                           + "" addr="" + info.mDevice.getAddress()
                           + "" prof="" + info.mProfile + "" supprNoisy="" + info.mSupprNoisy
                           + "" vol="" + info.mVolume)).printLog(TAG));
                    synchronized (mDeviceStateLock) {
                        mDeviceInventory.handleBluetoothA2dpActiveDeviceChangeExt(
                                info.mDevice, info.mState, info.mProfile,
                                info.mSupprNoisy, info.mVolume);
                    }
","[1.0, 0.922]"
189,"['ae1b3a8f3221dbe692fd90d414cfe5040538c264', '27e7f8c2aa4ce0a2f59b3bf1969b06bfd1e9ebca']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/pm/PackageManagerService.java,"[(15147, 15149, 3), (16154, 16156, 3)]","        if (DEBUG_INSTALL) Slog.d(TAG, ""New package installed in "" + pkg.codePath);
        if (pkgName != null)
            acquireUxPerfLock(BoostFramework.UXE_EVENT_PKG_INSTALL, pkgName, 0);
","        if (DEBUG_INSTALL) Slog.d(TAG, ""New package installed in "" + pkg.getCodePath());
        if (pkgName != null)
            acquireUxPerfLock(BoostFramework.UXE_EVENT_PKG_INSTALL, pkgName, 0);
",");
        if (pkgName != null)
            acquireUxPerfLock(BoostFramework.UXE_EVENT_PKG_INSTALL, pkgName, 0);
","[0.582, 0.568]"
190,"['ae1b3a8f3221dbe692fd90d414cfe5040538c264', 'ac442e0398fe7344f66cbbd4d2af15b1bfdbf46b']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/wm/ActivityRecord.java,"[(4679, 4684, 6), (5094, 5099, 6)]","            mStackSupervisor.updateHomeProcess(task.getChildAt(0).app);
            try {
                mStackSupervisor.new PreferredAppsTask().execute();
            } catch (Exception e) {
                Slog.v (TAG, ""Exception: "" + e);
            }
","            mStackSupervisor.updateHomeProcess(task.getBottomMostActivity().app);
            try {
                mStackSupervisor.new PreferredAppsTask().execute();
            } catch (Exception e) {
                Slog.v (TAG, ""Exception: "" + e);
            }
",").app);
            try {
                mStackSupervisor.new PreferredAppsTask().execute();
            } catch (Exception e) {
                Slog.v (TAG, ""Exception: "" + e);
            }
","[0.751, 0.723]"
191,"['af02bd5317cc0cced0a7646d5bbf407a181dda9c', '24818fca475a6726f5ef0cae42149615079af6e9']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/audio/AudioService.java,"[(3473, 3475, 3), (4165, 4166, 2)]","        Log.i(TAG, ""setMode(mode = "" + mode + "", callingPackage = "" +
                  callingPackage + "", Process ID: "" + Binder.getCallingPid());
        if (DEBUG_MODE) { Log.v(TAG, ""setMode(mode="" + mode + "", callingPackage="" + callingPackage + "")""); }
","        Log.i(TAG, ""setMode(mode = "" + mode + "", callingPackage = "" +
                  callingPackage + "", Process ID: "" + Binder.getCallingPid());
","        Log.i(TAG, ""setMode(mode = "" + mode + "", callingPackage = "" +
                  callingPackage + "", Process ID: "" + Binder.getCallingPid());
","[0.578, 1.0]"
192,"['af02bd5317cc0cced0a7646d5bbf407a181dda9c', '24818fca475a6726f5ef0cae42149615079af6e9']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/wm/ActivityRecord.java,"[(1658, 1660, 3), (1742, 1744, 3)]","
        if (mPerf == null)
            mPerf = new BoostFramework();
","
        if (mPerf == null)
            mPerf = new BoostFramework();
","
        if (mPerf == null)
            mPerf = new BoostFramework();
","[1.0, 1.0]"
193,"['af02bd5317cc0cced0a7646d5bbf407a181dda9c', 'b03d6d43646266d456c22154a1f6fd945bf79f83']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/wm/ActivityRecord.java,"[(1658, 1660, 3), (1668, 1669, 2)]","
        if (mPerf == null)
            mPerf = new BoostFramework();
","        if (mPerf == null)
            mPerf = new BoostFramework();
","        if (mPerf == null)
            mPerf = new BoostFramework();
","[0.986, 1.0]"
194,"['af02bd5317cc0cced0a7646d5bbf407a181dda9c', '4e4914b22b779e6376bb00ae20636175b2a70d8c']","['aospa-ruby-SAP-block_text', 'aospa-topaz-SAP-block_text']",telecomm/java/android/telecom/ConnectionService.java,"[(198, 199, 2), (184, 185, 2)]","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","[1.0, 1.0]"
195,"['b6292e3e1ba3616eac1032737a91925391d94b92', '27e7f8c2aa4ce0a2f59b3bf1969b06bfd1e9ebca']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/am/ActivityManagerConstants.java,"[(30, 33, 4), (29, 30, 2)]","import android.os.Process;
import android.os.SystemProperties;
import android.os.UserHandle;
import android.os.UserManager;
","import android.os.Process;
import android.os.SystemProperties;
","import android.os.Process;
import android.os.SystemProperties;
","[0.508, 1.0]"
196,"['b6292e3e1ba3616eac1032737a91925391d94b92', '74a21b989f82a6a024f29085ad324e939472bed1']","['aospa-ruby-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java,"[(1292, 1293, 2), (1821, 1823, 3)]","                mStatusBarKeyguardViewManagerLazy.get().setOccluded(isOccluded,
                        (Dependency.get(KeyguardUpdateMonitor.class).isSimPinSecure()?false:animate)
","                mUpdateMonitor.setKeyguardOccluded(isOccluded);
                mKeyguardViewControllerLazy.get().setOccluded(isOccluded,
                        (Dependency.get(KeyguardUpdateMonitor.class).isSimPinSecure()?false:animate)
","erLazy.get().setOccluded(isOccluded,
                        (Dependency.get(KeyguardUpdateMonitor.class).isSimPinSecure()?false:animate)
","[0.762, 0.577]"
197,"['bb9ded46832af38a453b78b92ad2de32ef1cf845', '449f659b21d039b8692602294b040038ac1e6ccb']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/audio/AudioService.java,"[(4018, 4020, 3), (4401, 4403, 3)]","        Log.i(TAG, ""In setSpeakerphoneOn(), on: "" + on + "", eventSource: "" + eventSource);

        final boolean stateChanged = mDeviceBroker.setSpeakerphoneOn(on, eventSource);
","        Log.i(TAG, ""In setSpeakerphoneOn(), on: "" + on + "", eventSource: "" + eventSource);

        final boolean stateChanged = mDeviceBroker.setSpeakerphoneOn(cb, pid, on, eventSource);
","        Log.i(TAG, ""In setSpeakerphoneOn(), on: "" + on + "", eventSource: "" + eventSource);

        final boolean stateChanged = mDeviceBroker.setSpeakerphoneOn(","[0.899, 0.856]"
198,"['d28a4f6b38dbab44128b4319f665dd65c3e4ec2c', '02a7ee5d65cb8d40fd1dde9aaf6b5ead9222a5a6']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/app/ActivityManagerInternal.java,"[(371, 372, 2), (638, 639, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
199,"['d28a4f6b38dbab44128b4319f665dd65c3e4ec2c', '1b62159ffcebb2c102e129b2e778a8f65b7e5948']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/app/ActivityManagerInternal.java,"[(371, 372, 2), (587, 588, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
200,"['d28a4f6b38dbab44128b4319f665dd65c3e4ec2c', '2051462f672b5986ef321bf1de3657e7653864e8']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/app/ActivityManagerInternal.java,"[(371, 372, 2), (574, 575, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
201,"['d28a4f6b38dbab44128b4319f665dd65c3e4ec2c', '24818fca475a6726f5ef0cae42149615079af6e9']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/app/ActivityManagerInternal.java,"[(371, 372, 2), (542, 543, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
202,"['d28a4f6b38dbab44128b4319f665dd65c3e4ec2c', '337095f9d277c566cb888bc3adbac16576f1ae70']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/am/ProcessList.java,"[(103, 104, 2), (106, 106, 1)]","import android.util.StatsLog;
import android.util.BoostFramework;
","import android.util.BoostFramework;
","import android.util.BoostFramework;
","[0.545, 1.0]"
203,"['d28a4f6b38dbab44128b4319f665dd65c3e4ec2c', '3933f277a025be704e68ea593536e492831a7e05']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/app/ActivityManagerInternal.java,"[(371, 372, 2), (479, 480, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
204,"['d28a4f6b38dbab44128b4319f665dd65c3e4ec2c', '3933f277a025be704e68ea593536e492831a7e05']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/wm/ActivityRecord.java,"[(500, 501, 2), (506, 507, 2)]","    boolean sleeping;       // have we told the activity to sleep?
    public boolean launching;      // is activity launch in progress?
","    private boolean mSetToSleep; // have we told the activity to sleep?
    public boolean launching;      // is activity launch in progress?
"," // have we told the activity to sleep?
    public boolean launching;      // is activity launch in progress?
","[0.803, 0.775]"
205,"['d28a4f6b38dbab44128b4319f665dd65c3e4ec2c', '9272406e82304c5a2a8124c75eedb4b5fdf7273a']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/app/ActivityManagerInternal.java,"[(371, 372, 2), (444, 445, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
206,"['d28a4f6b38dbab44128b4319f665dd65c3e4ec2c', 'e85435d4d9a2f7122bd5c97ad0a25c768d124a0e']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/app/ActivityManagerInternal.java,"[(371, 372, 2), (490, 491, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
207,"['d28a4f6b38dbab44128b4319f665dd65c3e4ec2c', '4e4914b22b779e6376bb00ae20636175b2a70d8c']","['aospa-ruby-SAP-block_text', 'aospa-topaz-SAP-block_text']",telecomm/java/android/telecom/ConnectionService.java,"[(191, 192, 2), (184, 185, 2)]","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","[1.0, 1.0]"
208,"['df73284a33506ba26aadbd20a1dbd01353820200', '02a7ee5d65cb8d40fd1dde9aaf6b5ead9222a5a6']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/app/ActivityManagerInternal.java,"[(398, 399, 2), (638, 639, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
209,"['df73284a33506ba26aadbd20a1dbd01353820200', '1b62159ffcebb2c102e129b2e778a8f65b7e5948']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/app/ActivityManagerInternal.java,"[(398, 399, 2), (587, 588, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
210,"['df73284a33506ba26aadbd20a1dbd01353820200', '2051462f672b5986ef321bf1de3657e7653864e8']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/app/ActivityManagerInternal.java,"[(398, 399, 2), (574, 575, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
211,"['df73284a33506ba26aadbd20a1dbd01353820200', '24818fca475a6726f5ef0cae42149615079af6e9']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/app/ActivityManagerInternal.java,"[(398, 399, 2), (542, 543, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
212,"['df73284a33506ba26aadbd20a1dbd01353820200', '3933f277a025be704e68ea593536e492831a7e05']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/app/ActivityManagerInternal.java,"[(398, 399, 2), (479, 480, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
213,"['df73284a33506ba26aadbd20a1dbd01353820200', '9272406e82304c5a2a8124c75eedb4b5fdf7273a']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/app/ActivityManagerInternal.java,"[(398, 399, 2), (444, 445, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
214,"['df73284a33506ba26aadbd20a1dbd01353820200', 'e85435d4d9a2f7122bd5c97ad0a25c768d124a0e']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",core/java/android/app/ActivityManagerInternal.java,"[(398, 399, 2), (490, 491, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
215,"['dfd2f7fed77160af2c57edfa20f1768b42aaa8da', '7fd6edc3a3ff37a750641d5e192835fe217f6050']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/audio/AudioDeviceBroker.java,"[(1033, 1034, 2), (1314, 1317, 4)]","    // process external command to (dis)connect or change active A2DP device
    private static final int MSG_L_A2DP_ACTIVE_DEVICE_CHANGE_EXT = 32;
","
    // process external command to (dis)connect or change active A2DP device
    private static final int MSG_L_A2DP_ACTIVE_DEVICE_CHANGE_EXT = 64;

","    // process external command to (dis)connect or change active A2DP device
    private static final int MSG_L_A2DP_ACTIVE_DEVICE_CHANGE_EXT = ","[0.973, 0.96]"
216,"['edb6252578f9b76151e5125a7fb1b16823a68418', '74a21b989f82a6a024f29085ad324e939472bed1']","['aospa-ruby-SAP-block_text', 'aospa-topaz-SAP-block_text']",packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java,"[(1256, 1257, 2), (1821, 1823, 3)]","                mStatusBarKeyguardViewManager.setOccluded(isOccluded,
                        (Dependency.get(KeyguardUpdateMonitor.class).isSimPinSecure()?false:animate)
","                mUpdateMonitor.setKeyguardOccluded(isOccluded);
                mKeyguardViewControllerLazy.get().setOccluded(isOccluded,
                        (Dependency.get(KeyguardUpdateMonitor.class).isSimPinSecure()?false:animate)
",".setOccluded(isOccluded,
                        (Dependency.get(KeyguardUpdateMonitor.class).isSimPinSecure()?false:animate)
","[0.737, 0.527]"
217,"['fa63f69f0fdfc50fe92caa22dbe1b4b120807ed2', '24818fca475a6726f5ef0cae42149615079af6e9']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/audio/AudioService.java,"[(3226, 3228, 3), (4165, 4166, 2)]","        Log.i(TAG, ""setMode(mode = "" + mode + "", callingPackage = "" +
                  callingPackage + "", Process ID: "" + Binder.getCallingPid());
        if (DEBUG_MODE) { Log.v(TAG, ""setMode(mode="" + mode + "", callingPackage="" + callingPackage + "")""); }
","        Log.i(TAG, ""setMode(mode = "" + mode + "", callingPackage = "" +
                  callingPackage + "", Process ID: "" + Binder.getCallingPid());
","        Log.i(TAG, ""setMode(mode = "" + mode + "", callingPackage = "" +
                  callingPackage + "", Process ID: "" + Binder.getCallingPid());
","[0.578, 1.0]"
218,"['fa63f69f0fdfc50fe92caa22dbe1b4b120807ed2', '26017c68ee11d3f2d54ca731119c8dc4ddb842cf']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/wm/WindowManagerService.java,"[(297, 299, 3), (350, 351, 2)]","    static final boolean localLOGV = DEBUG;
    static WindowState mFocusingWindow;
    String mFocusingActivity;
","    static WindowState mFocusingWindow;
    String mFocusingActivity;
","    static WindowState mFocusingWindow;
    String mFocusingActivity;
","[0.614, 1.0]"
219,"['fa63f69f0fdfc50fe92caa22dbe1b4b120807ed2', '337095f9d277c566cb888bc3adbac16576f1ae70']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",packages/SystemUI/src/com/android/systemui/statusbar/phone/KeyguardBottomAreaView.java,"[(121, 121, 1), (121, 122, 2)]","    private EmergencyCarrierArea mEmergencyCarrierArea;
","    private EmergencyCarrierArea mEmergencyCarrierArea;

","    private EmergencyCarrierArea mEmergencyCarrierArea;
","[1.0, 0.982]"
220,"['fa63f69f0fdfc50fe92caa22dbe1b4b120807ed2', '449f659b21d039b8692602294b040038ac1e6ccb']","['aospa-ruby-SAP-block_text', 'aospa-sapphire-SAP-block_text']",services/core/java/com/android/server/audio/AudioDeviceBroker.java,"[(220, 223, 4), (303, 306, 4)]","        synchronized (mDeviceStateLock) {
            if (AudioService.DEBUG_SCO) {
                Log.i(TAG, ""In isSpeakerphoneOn(), mForcedUseForCommExt: "" +mForcedUseForCommExt);
            }
","            if (AudioService.DEBUG_SCO) {
                Log.i(TAG, ""In isSpeakerphoneOn(), mForcedUseForCommExt: "" +mForcedUseForCommExt);
            }
            return (mForcedUseForCommExt == AudioSystem.FORCE_SPEAKER);
","            if (AudioService.DEBUG_SCO) {
                Log.i(TAG, ""In isSpeakerphoneOn(), mForcedUseForCommExt: "" +mForcedUseForCommExt);
            }
","[0.787, 0.683]"
221,"['26017c68ee11d3f2d54ca731119c8dc4ddb842cf', '3d2fc559e13b7293212955f1858d443f4fe8234e']","['aospa-sapphire-SAP-block_text', 'aospa-ruby-SAP-block_text']",services/core/java/com/android/server/display/LocalDisplayAdapter.java,"[(606, 625, 20), (544, 565, 22)]","                } else if (isBuiltIn) {
                    mInfo.type = Display.TYPE_INTERNAL;
                    mInfo.touch = DisplayDeviceInfo.TOUCH_INTERNAL;
                    mInfo.name = getContext().getResources().getString(
                            com.android.internal.R.string.display_manager_built_in_display_name);
                    mInfo.flags |= DisplayDeviceInfo.FLAG_ROTATES_WITH_CONTENT;

                    if (SystemProperties.getBoolean(
                                    ""vendor.display.builtin_presentation"", false)) {
                        mInfo.flags |= DisplayDeviceInfo.FLAG_PRESENTATION;
                    } else {
                        mInfo.flags |= DisplayDeviceInfo.FLAG_PRIVATE;
                    }

                    if (!SystemProperties.getBoolean(
                                    ""vendor.display.builtin_mirroring"", false)) {
                        mInfo.flags |= DisplayDeviceInfo.FLAG_OWN_CONTENT_ONLY;
                    }

                    mInfo.setAssumedDensityForExternalDisplay(mActiveSfDisplayMode.width, mActiveSfDisplayMode.height);
","                    mInfo.type = Display.TYPE_BUILT_IN;
                    mInfo.touch = DisplayDeviceInfo.TOUCH_INTERNAL;
                } else if (isBuiltIn) {
                    mInfo.type = Display.TYPE_BUILT_IN;
                    mInfo.touch = DisplayDeviceInfo.TOUCH_INTERNAL;
                    mInfo.name = getContext().getResources().getString(
                            com.android.internal.R.string.display_manager_built_in_display_name);
                    mInfo.flags |= DisplayDeviceInfo.FLAG_ROTATES_WITH_CONTENT;

                    if (SystemProperties.getBoolean(
                                    ""vendor.display.builtin_presentation"", false)) {
                        mInfo.flags |= DisplayDeviceInfo.FLAG_PRESENTATION;
                    } else {
                        mInfo.flags |= DisplayDeviceInfo.FLAG_PRIVATE;
                    }

                    if (!SystemProperties.getBoolean(
                                    ""vendor.display.builtin_mirroring"", false)) {
                        mInfo.flags |= DisplayDeviceInfo.FLAG_OWN_CONTENT_ONLY;
                    }

                    mInfo.setAssumedDensityForExternalDisplay(config.width, config.height);
",";
                    mInfo.touch = DisplayDeviceInfo.TOUCH_INTERNAL;
                    mInfo.name = getContext().getResources().getString(
                            com.android.internal.R.string.display_manager_built_in_display_name);
                    mInfo.flags |= DisplayDeviceInfo.FLAG_ROTATES_WITH_CONTENT;

                    if (SystemProperties.getBoolean(
                                    ""vendor.display.builtin_presentation"", false)) {
                        mInfo.flags |= DisplayDeviceInfo.FLAG_PRESENTATION;
                    } else {
                        mInfo.flags |= DisplayDeviceInfo.FLAG_PRIVATE;
                    }

                    if (!SystemProperties.getBoolean(
                                    ""vendor.display.builtin_mirroring"", false)) {
                        mInfo.flags |= DisplayDeviceInfo.FLAG_OWN_CONTENT_ONLY;
                    }

                    mInfo.setAssumedDensityForExternalDisplay(","[0.863, 0.795]"
222,"['449f659b21d039b8692602294b040038ac1e6ccb', '74a21b989f82a6a024f29085ad324e939472bed1']","['aospa-sapphire-SAP-block_text', 'aospa-topaz-SAP-block_text']",services/core/java/com/android/server/audio/AudioService.java,"[(210, 211, 2), (254, 255, 2)]","    /** debug SCO modes */
    protected static final boolean DEBUG_SCO = true;
","    /** debug SCO modes */
    protected static final boolean DEBUG_SCO = true;
","    /** debug SCO modes */
    protected static final boolean DEBUG_SCO = true;
","[1.0, 1.0]"
