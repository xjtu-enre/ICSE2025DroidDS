id,merge_commitid,file,Loc_details,block_text_1,block_text_2,recur_segment,proportion
1,"['619b6be348da0cfbb30a2d5a472a22cb462f2d6e', '96e5fca97c43ea282d5ad4b7c6fad40acd91586d']",packages/SystemUI/src/com/android/systemui/appops/AppOpsControllerImpl.java,"[(328, 329, 2), (369, 370, 2)]","        if (mCallbacksByCode.containsKey(code)
                && isUserVisible(code, uid, packageName)) {
","        if (mCallbacksByCode.containsKey(code)
                && isUserVisible(code, uid, packageName)) {
","        if (mCallbacksByCode.containsKey(code)
                && isUserVisible(code, uid, packageName)) {
","[1.0, 1.0]"
2,"['721f892272f7a01a7b3d4db7cefd8943acbb8a01', '96e5fca97c43ea282d5ad4b7c6fad40acd91586d']",services/core/java/com/android/server/policy/keyguard/KeyguardStateMonitor.java,"[(61, 65, 5), (59, 61, 3)]","    private IUsbRestrict mUsbRestrictor = null;
    private ContentResolver mContentResolver;

    IKeystoreService mKeystoreService;

","    private IUsbRestrict mUsbRestrictor = null;
    private ContentResolver mContentResolver;

","    private IUsbRestrict mUsbRestrictor = null;
    private ContentResolver mContentResolver;

","[0.704, 1.0]"
3,"['721f892272f7a01a7b3d4db7cefd8943acbb8a01', 'f67897bc05520f743974fc397aa96e4049a057b3']",services/core/java/com/android/server/policy/keyguard/KeyguardStateMonitor.java,"[(61, 65, 5), (59, 61, 3)]","    private IUsbRestrict mUsbRestrictor = null;
    private ContentResolver mContentResolver;

    IKeystoreService mKeystoreService;

","    private IUsbRestrict mUsbRestrictor = null;
    private ContentResolver mContentResolver;

","    private IUsbRestrict mUsbRestrictor = null;
    private ContentResolver mContentResolver;

","[0.704, 1.0]"
4,"['96e5fca97c43ea282d5ad4b7c6fad40acd91586d', 'f67897bc05520f743974fc397aa96e4049a057b3']",services/core/java/com/android/server/policy/keyguard/KeyguardStateMonitor.java,"[(59, 61, 3), (59, 61, 3)]","    private IUsbRestrict mUsbRestrictor = null;
    private ContentResolver mContentResolver;

","    private IUsbRestrict mUsbRestrictor = null;
    private ContentResolver mContentResolver;

","    private IUsbRestrict mUsbRestrictor = null;
    private ContentResolver mContentResolver;

","[1.0, 1.0]"
5,"['96e5fca97c43ea282d5ad4b7c6fad40acd91586d', 'f67897bc05520f743974fc397aa96e4049a057b3']",services/core/java/com/android/server/policy/keyguard/KeyguardStateMonitor.java,"[(66, 66, 1), (66, 66, 1)]","        mContentResolver = context.getContentResolver();
","        mContentResolver = context.getContentResolver();
","        mContentResolver = context.getContentResolver();
","[1.0, 1.0]"
6,"['96e5fca97c43ea282d5ad4b7c6fad40acd91586d', 'f67897bc05520f743974fc397aa96e4049a057b3']",services/core/java/com/android/server/policy/keyguard/KeyguardStateMonitor.java,"[(100, 121, 22), (100, 121, 22)]","
        if (mUsbRestrictor == null) {
            try {
                mUsbRestrictor = IUsbRestrict.getService();
                if (mUsbRestrictor == null) {
                    // Ignore, the hal is not available
                    return;
                }
            } catch (NoSuchElementException | RemoteException ignored) {
                return;
            }
        }

        boolean shouldRestrictUsb = LineageSettings.Secure.getInt(mContentResolver,
                LineageSettings.Secure.TRUST_RESTRICT_USB_KEYGUARD, 0) == 1;
        if (shouldRestrictUsb) {
            try {
                mUsbRestrictor.setEnabled(showing);
            } catch (RemoteException ignored) {
                // This feature is not supported
            }
        }
","
        if (mUsbRestrictor == null) {
            try {
                mUsbRestrictor = IUsbRestrict.getService();
                if (mUsbRestrictor == null) {
                    // Ignore, the hal is not available
                    return;
                }
            } catch (NoSuchElementException | RemoteException ignored) {
                return;
            }
        }

        boolean shouldRestrictUsb = LineageSettings.Secure.getInt(mContentResolver,
                LineageSettings.Secure.TRUST_RESTRICT_USB_KEYGUARD, 0) == 1;
        if (shouldRestrictUsb) {
            try {
                mUsbRestrictor.setEnabled(showing);
            } catch (RemoteException ignored) {
                // This feature is not supported
            }
        }
","
        if (mUsbRestrictor == null) {
            try {
                mUsbRestrictor = IUsbRestrict.getService();
                if (mUsbRestrictor == null) {
                    // Ignore, the hal is not available
                    return;
                }
            } catch (NoSuchElementException | RemoteException ignored) {
                return;
            }
        }

        boolean shouldRestrictUsb = LineageSettings.Secure.getInt(mContentResolver,
                LineageSettings.Secure.TRUST_RESTRICT_USB_KEYGUARD, 0) == 1;
        if (shouldRestrictUsb) {
            try {
                mUsbRestrictor.setEnabled(showing);
            } catch (RemoteException ignored) {
                // This feature is not supported
            }
        }
","[1.0, 1.0]"
7,"['96e5fca97c43ea282d5ad4b7c6fad40acd91586d', 'f67897bc05520f743974fc397aa96e4049a057b3']",packages/SystemUI/src/com/android/systemui/appops/AppOpsControllerImpl.java,"[(232, 284, 53), (225, 277, 53)]","    }

    /**
     * Does the app-op code refer to a user sensitive permission for the specified user id
     * and package. Only user sensitive permission should be shown to the user by default.
     *
     * @param appOpCode The code of the app-op.
     * @param uid The uid of the user.
     * @param packageName The name of the package.
     *
     * @return {@code true} iff the app-op item is user sensitive
     */
    private boolean isUserSensitive(int appOpCode, int uid, String packageName) {
        String permission = AppOpsManager.opToPermission(appOpCode);
        if (permission == null) {
            return false;
        }
        int permFlags = mFlagsCache.getPermissionFlags(permission,
                packageName, UserHandle.getUserHandleForUid(uid));
        return (permFlags & PackageManager.FLAG_PERMISSION_USER_SENSITIVE_WHEN_GRANTED) != 0;
    }

    /**
     * Does the app-op item refer to an operation that should be shown to the user.
     * Only specficic ops (like SYSTEM_ALERT_WINDOW) or ops that refer to user sensitive
     * permission should be shown to the user by default.
     *
     * @param item The item
     *
     * @return {@code true} iff the app-op item should be shown to the user
     */
    private boolean isUserVisible(AppOpItem item) {
        return isUserVisible(item.getCode(), item.getUid(), item.getPackageName());
    }


    /**
     * Does the app-op, uid and package name, refer to an operation that should be shown to the
     * user. Only specficic ops (like {@link AppOpsManager.OP_SYSTEM_ALERT_WINDOW}) or
     * ops that refer to user sensitive permission should be shown to the user by default.
     *
     * @param item The item
     *
     * @return {@code true} iff the app-op for should be shown to the user
     */
    private boolean isUserVisible(int appOpCode, int uid, String packageName) {
        // currently OP_SYSTEM_ALERT_WINDOW does not correspond to a platform permission
        // which may be user senstive, so for now always show it to the user.
        if (appOpCode == AppOpsManager.OP_SYSTEM_ALERT_WINDOW) {
            return true;
        }

        return isUserSensitive(appOpCode, uid, packageName);
","    }

    /**
     * Does the app-op code refer to a user sensitive permission for the specified user id
     * and package. Only user sensitive permission should be shown to the user by default.
     *
     * @param appOpCode The code of the app-op.
     * @param uid The uid of the user.
     * @param packageName The name of the package.
     *
     * @return {@code true} iff the app-op item is user sensitive
     */
    private boolean isUserSensitive(int appOpCode, int uid, String packageName) {
        String permission = AppOpsManager.opToPermission(appOpCode);
        if (permission == null) {
            return false;
        }
        int permFlags = mContext.getPackageManager().getPermissionFlags(permission,
                packageName, UserHandle.getUserHandleForUid(uid));
        return (permFlags & PackageManager.FLAG_PERMISSION_USER_SENSITIVE_WHEN_GRANTED) != 0;
    }

    /**
     * Does the app-op item refer to an operation that should be shown to the user.
     * Only specficic ops (like SYSTEM_ALERT_WINDOW) or ops that refer to user sensitive
     * permission should be shown to the user by default.
     *
     * @param item The item
     *
     * @return {@code true} iff the app-op item should be shown to the user
     */
    private boolean isUserVisible(AppOpItem item) {
        return isUserVisible(item.getCode(), item.getUid(), item.getPackageName());
    }


    /**
     * Does the app-op, uid and package name, refer to an operation that should be shown to the
     * user. Only specficic ops (like {@link AppOpsManager.OP_SYSTEM_ALERT_WINDOW}) or
     * ops that refer to user sensitive permission should be shown to the user by default.
     *
     * @param item The item
     *
     * @return {@code true} iff the app-op for should be shown to the user
     */
    private boolean isUserVisible(int appOpCode, int uid, String packageName) {
        // currently OP_SYSTEM_ALERT_WINDOW does not correspond to a platform permission
        // which may be user senstive, so for now always show it to the user.
        if (appOpCode == AppOpsManager.OP_SYSTEM_ALERT_WINDOW) {
            return true;
        }

        return isUserSensitive(appOpCode, uid, packageName);
",".getPermissionFlags(permission,
                packageName, UserHandle.getUserHandleForUid(uid));
        return (permFlags & PackageManager.FLAG_PERMISSION_USER_SENSITIVE_WHEN_GRANTED) != 0;
    }

    /**
     * Does the app-op item refer to an operation that should be shown to the user.
     * Only specficic ops (like SYSTEM_ALERT_WINDOW) or ops that refer to user sensitive
     * permission should be shown to the user by default.
     *
     * @param item The item
     *
     * @return {@code true} iff the app-op item should be shown to the user
     */
    private boolean isUserVisible(AppOpItem item) {
        return isUserVisible(item.getCode(), item.getUid(), item.getPackageName());
    }


    /**
     * Does the app-op, uid and package name, refer to an operation that should be shown to the
     * user. Only specficic ops (like {@link AppOpsManager.OP_SYSTEM_ALERT_WINDOW}) or
     * ops that refer to user sensitive permission should be shown to the user by default.
     *
     * @param item The item
     *
     * @return {@code true} iff the app-op for should be shown to the user
     */
    private boolean isUserVisible(int appOpCode, int uid, String packageName) {
        // currently OP_SYSTEM_ALERT_WINDOW does not correspond to a platform permission
        // which may be user senstive, so for now always show it to the user.
        if (appOpCode == AppOpsManager.OP_SYSTEM_ALERT_WINDOW) {
            return true;
        }

        return isUserSensitive(appOpCode, uid, packageName);
","[0.692, 0.687]"
