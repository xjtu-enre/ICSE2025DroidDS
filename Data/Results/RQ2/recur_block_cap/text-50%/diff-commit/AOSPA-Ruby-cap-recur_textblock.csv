id,merge_commitid,file,Loc_details,block_text_1,block_text_2,recur_segment,proportion
1,"['18970c4d9d55a44040fe6fb762dac93a077c64b5', '24f36fd2514856aaafe6a32a99050e272a6bd361']",services/core/java/com/android/server/wm/ActivityStack.java,"[(2857, 2860, 4), (2117, 2120, 4)]","        final DisplayContent dc = getDisplay().mDisplayContent;
        if (mPerf == null) {
            mPerf = new BoostFramework();
        }
","        final DisplayContent dc = display.mDisplayContent;
        if (mPerf == null) {
            mPerf = new BoostFramework();
        }
",".mDisplayContent;
        if (mPerf == null) {
            mPerf = new BoostFramework();
        }
","[0.683, 0.707]"
2,"['18970c4d9d55a44040fe6fb762dac93a077c64b5', '24f36fd2514856aaafe6a32a99050e272a6bd361']",core/java/android/view/ViewRootImpl.java,"[(612, 613, 2), (694, 694, 1)]","    boolean mHaveMoveEvent = false;

","    boolean mHaveMoveEvent = false;
","    boolean mHaveMoveEvent = false;
","[0.973, 1.0]"
3,"['18970c4d9d55a44040fe6fb762dac93a077c64b5', '24f36fd2514856aaafe6a32a99050e272a6bd361']",services/core/java/com/android/server/connectivity/NetworkAgentInfo.java,"[(19, 22, 4), (19, 20, 2)]","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED;

","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
","[0.652, 1.0]"
4,"['18970c4d9d55a44040fe6fb762dac93a077c64b5', '3d2fc559e13b7293212955f1858d443f4fe8234e']",packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java,"[(980, 1044, 65), (1181, 1246, 66)]","        public void onCallStateChanged(int state, String phoneNumber) {
            if (DEBUG) {
                Log.d(mTag, ""onCallStateChanged: state="" + state);
            }
            mCallState = state;
            updateTelephony();
        }
    };

    class FiveGStateListener implements IFiveGStateListener{

        public void onStateChanged(FiveGServiceState state) {
            if (DEBUG) {
                Log.d(mTag, ""onStateChanged: state="" + state);
            }
            mFiveGState = state;
            updateTelephony();
            notifyListeners();
        }
    }

    private ImsMmTelManager.CapabilityCallback mCapabilityCallback = new ImsMmTelManager.CapabilityCallback() {
        @Override
        public void onCapabilitiesStatusChanged(MmTelFeature.MmTelCapabilities config) {
            mCurrentState.voiceCapable =
                    config.isCapable(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE);
            mCurrentState.videoCapable =
                    config.isCapable(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VIDEO);
            Log.d(mTag, ""onCapabilitiesStatusChanged isVoiceCapable="" + mCurrentState.voiceCapable
                    + "" isVideoCapable="" + mCurrentState.videoCapable);
            notifyListenersIfNecessary();
        }
    };

    private final ImsMmTelManager.RegistrationCallback mImsRegistrationCallback =
            new ImsMmTelManager.RegistrationCallback() {
                @Override
                public void onRegistered(int imsTransportType) {
                    Log.d(mTag, ""onRegistered imsTransportType="" + imsTransportType);
                    mCurrentState.imsRegistered = true;
                    notifyListenersIfNecessary();
                }

                @Override
                public void onRegistering(int imsTransportType) {
                    Log.d(mTag, ""onRegistering imsTransportType="" + imsTransportType);
                    mCurrentState.imsRegistered = false;
                    notifyListenersIfNecessary();
                }

                @Override
                public void onUnregistered(ImsReasonInfo info) {
                    Log.d(mTag, ""onDeregistered imsReasonInfo="" + info);
                    mCurrentState.imsRegistered = false;
                    notifyListenersIfNecessary();
                }
    };

    private final BroadcastReceiver mVolteSwitchObserver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            Log.d(mTag, ""action="" + intent.getAction());
            if ( mConfig.showVolteIcon ) {
                notifyListeners();
            }
        }
","        public void onCallStateChanged(int state, String phoneNumber) {
            if (DEBUG) {
                Log.d(mTag, ""onCallStateChanged: state="" + state);
            }
            mCallState = state;
            updateTelephony();
        }
    };

    class FiveGStateListener implements IFiveGStateListener{

        public void onStateChanged(FiveGServiceState state) {
            if (DEBUG) {
                Log.d(mTag, ""onStateChanged: state="" + state);
            }
            mFiveGState = state;
            updateTelephony();
            notifyListeners();
        }
    }

    private ImsMmTelManager.CapabilityCallback mCapabilityCallback = new ImsMmTelManager.CapabilityCallback() {
        @Override
        public void onCapabilitiesStatusChanged(MmTelFeature.MmTelCapabilities config) {
            mCurrentState.voiceCapable =
                    config.isCapable(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE);
            mCurrentState.videoCapable =
                    config.isCapable(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VIDEO);
            Log.d(mTag, ""onCapabilitiesStatusChanged isVoiceCapable="" + mCurrentState.voiceCapable
                    + "" isVideoCapable="" + mCurrentState.videoCapable);
            notifyListenersIfNecessary();
        }
    };

    private final ImsMmTelManager.RegistrationCallback mImsRegistrationCallback =
            new ImsMmTelManager.RegistrationCallback() {
                @Override
                public void onRegistered(int imsTransportType) {
                    Log.d(mTag, ""onRegistered imsTransportType="" + imsTransportType);
                    mCurrentState.imsRegistered = true;
                    notifyListenersIfNecessary();
                }

                @Override
                public void onRegistering(int imsTransportType) {
                    Log.d(mTag, ""onRegistering imsTransportType="" + imsTransportType);
                    mCurrentState.imsRegistered = false;
                    notifyListenersIfNecessary();
                }

                @Override
                public void onUnregistered(ImsReasonInfo info) {
                    Log.d(mTag, ""onDeregistered imsReasonInfo="" + info);
                    mCurrentState.imsRegistered = false;
                    notifyListenersIfNecessary();
                }
    };

    private final BroadcastReceiver mVolteSwitchObserver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            Log.d(mTag, ""action="" + intent.getAction());
            if ( mConfig.showVolteIcon ) {
                notifyListeners();
            }
        }
    };
","        public void onCallStateChanged(int state, String phoneNumber) {
            if (DEBUG) {
                Log.d(mTag, ""onCallStateChanged: state="" + state);
            }
            mCallState = state;
            updateTelephony();
        }
    };

    class FiveGStateListener implements IFiveGStateListener{

        public void onStateChanged(FiveGServiceState state) {
            if (DEBUG) {
                Log.d(mTag, ""onStateChanged: state="" + state);
            }
            mFiveGState = state;
            updateTelephony();
            notifyListeners();
        }
    }

    private ImsMmTelManager.CapabilityCallback mCapabilityCallback = new ImsMmTelManager.CapabilityCallback() {
        @Override
        public void onCapabilitiesStatusChanged(MmTelFeature.MmTelCapabilities config) {
            mCurrentState.voiceCapable =
                    config.isCapable(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VOICE);
            mCurrentState.videoCapable =
                    config.isCapable(MmTelFeature.MmTelCapabilities.CAPABILITY_TYPE_VIDEO);
            Log.d(mTag, ""onCapabilitiesStatusChanged isVoiceCapable="" + mCurrentState.voiceCapable
                    + "" isVideoCapable="" + mCurrentState.videoCapable);
            notifyListenersIfNecessary();
        }
    };

    private final ImsMmTelManager.RegistrationCallback mImsRegistrationCallback =
            new ImsMmTelManager.RegistrationCallback() {
                @Override
                public void onRegistered(int imsTransportType) {
                    Log.d(mTag, ""onRegistered imsTransportType="" + imsTransportType);
                    mCurrentState.imsRegistered = true;
                    notifyListenersIfNecessary();
                }

                @Override
                public void onRegistering(int imsTransportType) {
                    Log.d(mTag, ""onRegistering imsTransportType="" + imsTransportType);
                    mCurrentState.imsRegistered = false;
                    notifyListenersIfNecessary();
                }

                @Override
                public void onUnregistered(ImsReasonInfo info) {
                    Log.d(mTag, ""onDeregistered imsReasonInfo="" + info);
                    mCurrentState.imsRegistered = false;
                    notifyListenersIfNecessary();
                }
    };

    private final BroadcastReceiver mVolteSwitchObserver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            Log.d(mTag, ""action="" + intent.getAction());
            if ( mConfig.showVolteIcon ) {
                notifyListeners();
            }
        }
","[1.0, 0.997]"
5,"['18970c4d9d55a44040fe6fb762dac93a077c64b5', '3d2fc559e13b7293212955f1858d443f4fe8234e']",services/core/java/com/android/server/connectivity/NetworkAgentInfo.java,"[(19, 22, 4), (19, 20, 2)]","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED;

","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
","[0.652, 1.0]"
6,"['18970c4d9d55a44040fe6fb762dac93a077c64b5', '6fc85c43e31aad55eecd51d3b0de34715ae03810']",telephony/java/android/telephony/DisconnectCause.java,"[(343, 436, 94), (357, 450, 94)]","    /** @hide */
    public static final int QOS_UNAVAILABLE = 78;
    /** @hide */
    public static final int REQUESTED_FACILITY_NOT_SUBSCRIBED = 79;
    /** @hide */
    public static final int INCOMING_CALLS_BARRED_WITHIN_CUG = 80;
    /** @hide */
    public static final int BEARER_CAPABILITY_UNAVAILABLE = 81;
    /** @hide */
    public static final int SERVICE_OPTION_NOT_AVAILABLE = 82;
    /** @hide */
    public static final int BEARER_SERVICE_NOT_IMPLEMENTED = 83;
    /** @hide */
    public static final int REQUESTED_FACILITY_NOT_IMPLEMENTED = 84;
    /** @hide */
    public static final int ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE = 85;
    /** @hide */
    public static final int SERVICE_OR_OPTION_NOT_IMPLEMENTED = 86;
    /** @hide */
    public static final int INVALID_TRANSACTION_IDENTIFIER = 87;
    /** @hide */
    public static final int USER_NOT_MEMBER_OF_CUG = 88;
    /** @hide */
    public static final int INCOMPATIBLE_DESTINATION = 89;
    /** @hide */
    public static final int INVALID_TRANSIT_NW_SELECTION = 90;
    /** @hide */
    public static final int SEMANTICALLY_INCORRECT_MESSAGE = 91;
    /** @hide */
    public static final int INVALID_MANDATORY_INFORMATION = 92;
    /** @hide */
    public static final int MESSAGE_TYPE_NON_IMPLEMENTED = 93;
    /** @hide */
    public static final int MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE = 94;
    /** @hide */
    public static final int INFORMATION_ELEMENT_NON_EXISTENT = 95;
    /** @hide */
    public static final int CONDITIONAL_IE_ERROR = 96;
    /** @hide */
    public static final int MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE = 97;
    /** @hide */
    public static final int RECOVERY_ON_TIMER_EXPIRED = 98;
    /** @hide */
    public static final int PROTOCOL_ERROR_UNSPECIFIED = 99;
    /** @hide */
    public static final int INTERWORKING_UNSPECIFIED = 100;
    /** @hide */
    public static final int LOCAL_LOW_BATTERY = 101;
    /** @hide */
    public static final int NO_CIRCUIT_AVAIL = 102;
    /** @hide */
    public static final int NO_ROUTE_TO_DESTINATION = 103;
    /** @hide */
    public static final int OPERATOR_DETERMINED_BARRING = 104;
    /** @hide */
    public static final int CALL_FAIL_NO_USER_RESPONDING = 105;
    /** @hide */
    public static final int CALL_FAIL_NO_ANSWER_FROM_USER = 106;
    /** @hide */
    public static final int CALL_FAIL_DESTINATION_OUT_OF_ORDER = 107;
    /** @hide */
    public static final int BEARER_CAPABILITY_NOT_AUTHORIZED = 108;
    /** @hide */
    public static final int CHANNEL_UNACCEPTABLE = 109;
    /** @hide */
    public static final int CALL_REJECTED = 110;
    /** @hide */
    public static final int NUMBER_CHANGED = 111;
    /** @hide */
    public static final int PREEMPTION = 112;
    /** @hide */
    public static final int FACILITY_REJECTED = 113;
    /** @hide */
    public static final int RESP_TO_STATUS_ENQUIRY = 114;
    /** @hide */
    public static final int NETWORK_OUT_OF_ORDER = 115;
    /** @hide */
    public static final int TEMPORARY_FAILURE = 116;
    /** @hide */
    public static final int SWITCHING_EQUIPMENT_CONGESTION = 117;
    /** @hide */
    public static final int ACCESS_INFORMATION_DISCARDED = 118;
    /** @hide */
    public static final int REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE = 119;
    /** @hide */
    public static final int RESOURCES_UNAVAILABLE_OR_UNSPECIFIED = 120;

    /**
     * call failed due to LTE to 3G/2G handover not feasible
     * @hide
     */
    public static final int HO_NOT_FEASIBLE = 121;
    /** @hide */
    public static final int NON_SELECTED_USER_CLEARING = 122;
","    /** @hide */
    public static final int INCOMING_CALLS_BARRED_WITHIN_CUG = 80;
    /** @hide */
    public static final int BEARER_CAPABILITY_UNAVAILABLE = 81;
    /** @hide */
    public static final int SERVICE_OPTION_NOT_AVAILABLE = 82;
    /** @hide */
    public static final int BEARER_SERVICE_NOT_IMPLEMENTED = 83;
    /** @hide */
    public static final int REQUESTED_FACILITY_NOT_IMPLEMENTED = 84;
    /** @hide */
    public static final int ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE = 85;
    /** @hide */
    public static final int SERVICE_OR_OPTION_NOT_IMPLEMENTED = 86;
    /** @hide */
    public static final int INVALID_TRANSACTION_IDENTIFIER = 87;
    /** @hide */
    public static final int USER_NOT_MEMBER_OF_CUG = 88;
    /** @hide */
    public static final int INCOMPATIBLE_DESTINATION = 89;
    /** @hide */
    public static final int INVALID_TRANSIT_NW_SELECTION = 90;
    /** @hide */
    public static final int SEMANTICALLY_INCORRECT_MESSAGE = 91;
    /** @hide */
    public static final int INVALID_MANDATORY_INFORMATION = 92;
    /** @hide */
    public static final int MESSAGE_TYPE_NON_IMPLEMENTED = 93;
    /** @hide */
    public static final int MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE = 94;
    /** @hide */
    public static final int INFORMATION_ELEMENT_NON_EXISTENT = 95;
    /** @hide */
    public static final int CONDITIONAL_IE_ERROR = 96;
    /** @hide */
    public static final int MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE = 97;
    /** @hide */
    public static final int RECOVERY_ON_TIMER_EXPIRED = 98;
    /** @hide */
    public static final int PROTOCOL_ERROR_UNSPECIFIED = 99;
    /** @hide */
    public static final int INTERWORKING_UNSPECIFIED = 100;
    /** @hide */
    public static final int LOCAL_LOW_BATTERY = 101;
    /** @hide */
    public static final int NO_CIRCUIT_AVAIL = 102;
    /** @hide */
    public static final int NO_ROUTE_TO_DESTINATION = 103;
    /** @hide */
    public static final int OPERATOR_DETERMINED_BARRING = 104;
    /** @hide */
    public static final int CALL_FAIL_NO_USER_RESPONDING = 105;
    /** @hide */
    public static final int CALL_FAIL_NO_ANSWER_FROM_USER = 106;
    /** @hide */
    public static final int CALL_FAIL_DESTINATION_OUT_OF_ORDER = 107;
    /** @hide */
    public static final int BEARER_CAPABILITY_NOT_AUTHORIZED = 108;
    /** @hide */
    public static final int CHANNEL_UNACCEPTABLE = 109;
    /** @hide */
    public static final int CALL_REJECTED = 110;
    /** @hide */
    public static final int NUMBER_CHANGED = 111;
    /** @hide */
    public static final int PREEMPTION = 112;
    /** @hide */
    public static final int FACILITY_REJECTED = 113;
    /** @hide */
    public static final int RESP_TO_STATUS_ENQUIRY = 114;
    /** @hide */
    public static final int NETWORK_OUT_OF_ORDER = 115;
    /** @hide */
    public static final int TEMPORARY_FAILURE = 116;
    /** @hide */
    public static final int SWITCHING_EQUIPMENT_CONGESTION = 117;
    /** @hide */
    public static final int ACCESS_INFORMATION_DISCARDED = 118;
    /** @hide */
    public static final int REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE = 119;
    /** @hide */
    public static final int RESOURCES_UNAVAILABLE_OR_UNSPECIFIED = 120;
    /** @hide */
    public static final int QOS_UNAVAILABLE = 121;
    /** @hide */
    public static final int REQUESTED_FACILITY_NOT_SUBSCRIBED = 122;

    /**
     * call failed due to LTE to 3G/2G handover not feasible
     * @hide
     */
    public static final int HO_NOT_FEASIBLE = 123;
    /** @hide */
    public static final int NON_SELECTED_USER_CLEARING = 124;
","    /** @hide */
    public static final int INCOMING_CALLS_BARRED_WITHIN_CUG = 80;
    /** @hide */
    public static final int BEARER_CAPABILITY_UNAVAILABLE = 81;
    /** @hide */
    public static final int SERVICE_OPTION_NOT_AVAILABLE = 82;
    /** @hide */
    public static final int BEARER_SERVICE_NOT_IMPLEMENTED = 83;
    /** @hide */
    public static final int REQUESTED_FACILITY_NOT_IMPLEMENTED = 84;
    /** @hide */
    public static final int ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE = 85;
    /** @hide */
    public static final int SERVICE_OR_OPTION_NOT_IMPLEMENTED = 86;
    /** @hide */
    public static final int INVALID_TRANSACTION_IDENTIFIER = 87;
    /** @hide */
    public static final int USER_NOT_MEMBER_OF_CUG = 88;
    /** @hide */
    public static final int INCOMPATIBLE_DESTINATION = 89;
    /** @hide */
    public static final int INVALID_TRANSIT_NW_SELECTION = 90;
    /** @hide */
    public static final int SEMANTICALLY_INCORRECT_MESSAGE = 91;
    /** @hide */
    public static final int INVALID_MANDATORY_INFORMATION = 92;
    /** @hide */
    public static final int MESSAGE_TYPE_NON_IMPLEMENTED = 93;
    /** @hide */
    public static final int MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE = 94;
    /** @hide */
    public static final int INFORMATION_ELEMENT_NON_EXISTENT = 95;
    /** @hide */
    public static final int CONDITIONAL_IE_ERROR = 96;
    /** @hide */
    public static final int MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE = 97;
    /** @hide */
    public static final int RECOVERY_ON_TIMER_EXPIRED = 98;
    /** @hide */
    public static final int PROTOCOL_ERROR_UNSPECIFIED = 99;
    /** @hide */
    public static final int INTERWORKING_UNSPECIFIED = 100;
    /** @hide */
    public static final int LOCAL_LOW_BATTERY = 101;
    /** @hide */
    public static final int NO_CIRCUIT_AVAIL = 102;
    /** @hide */
    public static final int NO_ROUTE_TO_DESTINATION = 103;
    /** @hide */
    public static final int OPERATOR_DETERMINED_BARRING = 104;
    /** @hide */
    public static final int CALL_FAIL_NO_USER_RESPONDING = 105;
    /** @hide */
    public static final int CALL_FAIL_NO_ANSWER_FROM_USER = 106;
    /** @hide */
    public static final int CALL_FAIL_DESTINATION_OUT_OF_ORDER = 107;
    /** @hide */
    public static final int BEARER_CAPABILITY_NOT_AUTHORIZED = 108;
    /** @hide */
    public static final int CHANNEL_UNACCEPTABLE = 109;
    /** @hide */
    public static final int CALL_REJECTED = 110;
    /** @hide */
    public static final int NUMBER_CHANGED = 111;
    /** @hide */
    public static final int PREEMPTION = 112;
    /** @hide */
    public static final int FACILITY_REJECTED = 113;
    /** @hide */
    public static final int RESP_TO_STATUS_ENQUIRY = 114;
    /** @hide */
    public static final int NETWORK_OUT_OF_ORDER = 115;
    /** @hide */
    public static final int TEMPORARY_FAILURE = 116;
    /** @hide */
    public static final int SWITCHING_EQUIPMENT_CONGESTION = 117;
    /** @hide */
    public static final int ACCESS_INFORMATION_DISCARDED = 118;
    /** @hide */
    public static final int REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE = 119;
    /** @hide */
    public static final int RESOURCES_UNAVAILABLE_OR_UNSPECIFIED = 120;
","[0.897, 0.897]"
7,"['18970c4d9d55a44040fe6fb762dac93a077c64b5', '6fc85c43e31aad55eecd51d3b0de34715ae03810']",telephony/java/android/telephony/DisconnectCause.java,"[(651, 714, 64), (669, 732, 64)]","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","[1.0, 1.0]"
8,"['18970c4d9d55a44040fe6fb762dac93a077c64b5', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']",telephony/java/android/telephony/DisconnectCause.java,"[(651, 714, 64), (677, 740, 64)]","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","[1.0, 1.0]"
9,"['18970c4d9d55a44040fe6fb762dac93a077c64b5', '784ecc8e9194775f58ad5a45422ed16570bcbee6']",services/core/java/com/android/server/wm/ActivityRecord.java,"[(196, 196, 1), (271, 271, 1)]","import android.util.BoostFramework;
","import android.util.BoostFramework;
","import android.util.BoostFramework;
","[1.0, 1.0]"
10,"['18970c4d9d55a44040fe6fb762dac93a077c64b5', '7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2']",services/core/java/com/android/server/locksettings/LockSettingsService.java,"[(1684, 1696, 13), (1749, 1763, 15)]","    private void clearUserKeyAuth(int userId, byte[] token, byte[] secret) throws RemoteException {
        if (DEBUG) Slog.d(TAG, ""clearUserKeyProtection user="" + userId);
        final UserInfo userInfo = mUserManager.getUserInfo(userId);
        final IStorageManager storageManager = mInjector.getStorageManager();
        final long callingId = Binder.clearCallingIdentity();
        try {
            storageManager.clearUserKeyAuth(userId, userInfo.serialNumber, token, secret);
        } finally {
            Binder.restoreCallingIdentity(callingId);
        }
    }

    private static byte[] secretFromCredential(byte[] credential) throws RemoteException {
","    private void clearUserKeyAuth(int userId, byte[] token, byte[] secret) {
        if (DEBUG) Slog.d(TAG, ""clearUserKeyProtection user="" + userId);
        final UserInfo userInfo = mUserManager.getUserInfo(userId);
        final IStorageManager storageManager = mInjector.getStorageManager();
        final long callingId = Binder.clearCallingIdentity();
        try {
            storageManager.clearUserKeyAuth(userId, userInfo.serialNumber, token, secret);
        } catch (RemoteException e) {
            throw new IllegalStateException(""clearUserKeyAuth failed user="" + userId);
        } finally {
            Binder.restoreCallingIdentity(callingId);
        }
    }

    private static byte[] secretFromCredential(byte[] credential) {
"," {
        if (DEBUG) Slog.d(TAG, ""clearUserKeyProtection user="" + userId);
        final UserInfo userInfo = mUserManager.getUserInfo(userId);
        final IStorageManager storageManager = mInjector.getStorageManager();
        final long callingId = Binder.clearCallingIdentity();
        try {
            storageManager.clearUserKeyAuth(userId, userInfo.serialNumber, token, secret);
        } ","[0.597, 0.534]"
11,"['18970c4d9d55a44040fe6fb762dac93a077c64b5', '7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2']",services/core/java/com/android/server/locksettings/LockSettingsService.java,"[(1797, 1807, 11), (1875, 1883, 9)]","            ICheckCredentialProgressCallback progressCallback) throws RemoteException {
        checkPasswordReadPermission(userId);
        VerifyCredentialResponse response = doVerifyCredential(credential, type,
                                        false, 0, userId, progressCallback);
        if ((response.getResponseCode() == VerifyCredentialResponse.RESPONSE_OK) &&
                                           (userId == UserHandle.USER_OWNER)) {
                //TODO(b/127810705): Update to credentials to use byte[]
                String credentialString = credential == null ? null : new String(credential);
                retainPassword(credentialString);
        }
        return response;
","        VerifyCredentialResponse response = doVerifyCredential(credential, type,
                                        CHALLENGE_NONE, 0, userId, progressCallback);
        if ((response.getResponseCode() == VerifyCredentialResponse.RESPONSE_OK) &&
                                           (userId == UserHandle.USER_OWNER)) {
                //TODO(b/127810705): Update to credentials to use byte[]
                String credentialString = credential == null ? null : new String(credential);
                retainPassword(credentialString);
        }
        return response;
",", 0, userId, progressCallback);
        if ((response.getResponseCode() == VerifyCredentialResponse.RESPONSE_OK) &&
                                           (userId == UserHandle.USER_OWNER)) {
                //TODO(b/127810705): Update to credentials to use byte[]
                String credentialString = credential == null ? null : new String(credential);
                retainPassword(credentialString);
        }
        return response;
","[0.634, 0.768]"
12,"['18970c4d9d55a44040fe6fb762dac93a077c64b5', '7fe8671fd7b5388dd9be6295dbea6d31209468f9']",telephony/java/android/telephony/DisconnectCause.java,"[(651, 714, 64), (642, 705, 64)]","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","[1.0, 1.0]"
13,"['18970c4d9d55a44040fe6fb762dac93a077c64b5', '8faa0d981413f18b2468dde1b1fe71e248df0df1']",services/core/java/com/android/server/connectivity/NetworkAgentInfo.java,"[(19, 22, 4), (19, 22, 4)]","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED;

","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED;
import static android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED;
","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_","[0.943, 0.7]"
14,"['18970c4d9d55a44040fe6fb762dac93a077c64b5', 'ae1b3a8f3221dbe692fd90d414cfe5040538c264']",services/core/java/com/android/server/pm/PackageManagerService.java,"[(16283, 16285, 3), (15147, 15149, 3)]","        if (pkgName != null)
            acquireUxPerfLock(BoostFramework.UXE_EVENT_PKG_INSTALL, pkgName, 0);
        synchronized (mPackages) {
","        if (DEBUG_INSTALL) Slog.d(TAG, ""New package installed in "" + pkg.codePath);
        if (pkgName != null)
            acquireUxPerfLock(BoostFramework.UXE_EVENT_PKG_INSTALL, pkgName, 0);
","        if (pkgName != null)
            acquireUxPerfLock(BoostFramework.UXE_EVENT_PKG_INSTALL, pkgName, 0);
","[0.759, 0.567]"
15,"['18970c4d9d55a44040fe6fb762dac93a077c64b5', 'af02bd5317cc0cced0a7646d5bbf407a181dda9c']",services/core/java/com/android/server/connectivity/NetworkAgentInfo.java,"[(19, 22, 4), (19, 21, 3)]","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED;

","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED;
","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED;
","[0.995, 1.0]"
16,"['240d78276b3206717587bea012131945c6f60179', '5358a994b854c7a6627858c48d6947e8acff6ea9']",wifi/java/android/net/wifi/WifiConfiguration.java,"[(2546, 2546, 1), (2568, 2568, 1)]","            oweTransIfaceName = source.oweTransIfaceName;
","            oweTransIfaceName = source.oweTransIfaceName;
","            oweTransIfaceName = source.oweTransIfaceName;
","[1.0, 1.0]"
17,"['240d78276b3206717587bea012131945c6f60179', '6fc85c43e31aad55eecd51d3b0de34715ae03810']",wifi/java/android/net/wifi/WifiConfiguration.java,"[(2705, 2706, 2), (2740, 2741, 2)]","                config.randomizedMacLastModifiedTimeMs = in.readLong();
                config.oweTransIfaceName = in.readString();
","                config.clonedNetworkConfigKey = in.readString();
                config.oweTransIfaceName = in.readString();
","ng();
                config.oweTransIfaceName = in.readString();
","[0.5, 0.528]"
18,"['240d78276b3206717587bea012131945c6f60179', 'edb6252578f9b76151e5125a7fb1b16823a68418']",wifi/java/android/net/wifi/WifiManager.java,"[(3424, 3440, 17), (3477, 3490, 14)]","        public abstract void onNumClientsChanged(int numClients);

        /**
         * Called when Stations connected to soft AP.
         *
         * @param Macaddr Mac Address of connected Stations to soft AP
         * @param numClients number of connected clients
         */
        public abstract void onStaConnected(String Macaddr, int numClients);

        /**
         * Called when Stations disconnected to soft AP.
         *
         * @param Macaddr Mac Address of Disconnected Stations to soft AP
         * @param numClients number of connected clients
         */
        public abstract void onStaDisconnected(String Macaddr, int numClients);
","         * Called when Stations connected to soft AP.
         *
         * @param Macaddr Mac Address of connected Stations to soft AP
         * @param numClients number of connected clients
         */
        public abstract void onStaConnected(String Macaddr, int numClients);

        /**
         * Called when Stations disconnected to soft AP.
         *
         * @param Macaddr Mac Address of Disconnected Stations to soft AP
         * @param numClients number of connected clients
         */
        public abstract void onStaDisconnected(String Macaddr, int numClients);
","         * Called when Stations connected to soft AP.
         *
         * @param Macaddr Mac Address of connected Stations to soft AP
         * @param numClients number of connected clients
         */
        public abstract void onStaConnected(String Macaddr, int numClients);

        /**
         * Called when Stations disconnected to soft AP.
         *
         * @param Macaddr Mac Address of Disconnected Stations to soft AP
         * @param numClients number of connected clients
         */
        public abstract void onStaDisconnected(String Macaddr, int numClients);
","[0.881, 1.0]"
19,"['24f36fd2514856aaafe6a32a99050e272a6bd361', '3d2fc559e13b7293212955f1858d443f4fe8234e']",services/core/java/com/android/server/connectivity/NetworkAgentInfo.java,"[(19, 20, 2), (19, 20, 2)]","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
","[1.0, 1.0]"
20,"['24f36fd2514856aaafe6a32a99050e272a6bd361', '7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2']",services/core/java/com/android/server/audio/AudioDeviceBroker.java,"[(350, 353, 4), (348, 350, 3)]","        if (AudioService.DEBUG_SCO) {
            Log.i(TAG, ""setBluetoothScoOn: "" + on + "" "" + eventSource);
        }
        //Log.i(TAG, ""setBluetoothScoOnInt: "" + on + "" "" + eventSource);
","        if (AudioService.DEBUG_SCO) {
            Log.i(TAG, ""setBluetoothScoOn: "" + on + "" "" + eventSource);
        }
","        if (AudioService.DEBUG_SCO) {
            Log.i(TAG, ""setBluetoothScoOn: "" + on + "" "" + eventSource);
        }
","[0.622, 1.0]"
21,"['24f36fd2514856aaafe6a32a99050e272a6bd361', 'af02bd5317cc0cced0a7646d5bbf407a181dda9c']",services/core/java/com/android/server/connectivity/NetworkAgentInfo.java,"[(19, 20, 2), (19, 21, 3)]","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED;
","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
","[1.0, 0.656]"
22,"['24f36fd2514856aaafe6a32a99050e272a6bd361', 'fa63f69f0fdfc50fe92caa22dbe1b4b120807ed2']",services/core/java/com/android/server/audio/AudioDeviceBroker.java,"[(350, 353, 4), (351, 354, 4)]","        if (AudioService.DEBUG_SCO) {
            Log.i(TAG, ""setBluetoothScoOn: "" + on + "" "" + eventSource);
        }
        //Log.i(TAG, ""setBluetoothScoOnInt: "" + on + "" "" + eventSource);
","        if (AudioService.DEBUG_SCO) {
            Log.i(TAG, ""setBluetoothScoOn: "" + on + "" "" + eventSource);
        }
        synchronized (mDeviceStateLock) {
","        if (AudioService.DEBUG_SCO) {
            Log.i(TAG, ""setBluetoothScoOn: "" + on + "" "" + eventSource);
        }
        ","[0.663, 0.79]"
23,"['3d2fc559e13b7293212955f1858d443f4fe8234e', 'af02bd5317cc0cced0a7646d5bbf407a181dda9c']",telecomm/java/android/telecom/Connection.java,"[(977, 978, 2), (970, 971, 2)]","        if ((capabilities & CAPABILITY_SUPPORTS_RTT_REMOTE) == CAPABILITY_SUPPORTS_RTT_REMOTE) {
            builder.append(isLong ? "" CAPABILITY_SUPPORTS_RTT_REMOTE"" : "" sup_rtt"");
","        if ((capabilities & CAPABILITY_SUPPORTS_RTT_REMOTE) == CAPABILITY_SUPPORTS_RTT_REMOTE) {
            builder.append(isLong ? "" CAPABILITY_SUPPORTS_RTT_REMOTE"" : "" sup_rtt"");
","        if ((capabilities & CAPABILITY_SUPPORTS_RTT_REMOTE) == CAPABILITY_SUPPORTS_RTT_REMOTE) {
            builder.append(isLong ? "" CAPABILITY_SUPPORTS_RTT_REMOTE"" : "" sup_rtt"");
","[1.0, 1.0]"
24,"['3d2fc559e13b7293212955f1858d443f4fe8234e', 'af02bd5317cc0cced0a7646d5bbf407a181dda9c']",services/core/java/com/android/server/connectivity/NetworkAgentInfo.java,"[(19, 20, 2), (19, 21, 3)]","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED;
","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
","[1.0, 0.656]"
25,"['3d2fc559e13b7293212955f1858d443f4fe8234e', 'af02bd5317cc0cced0a7646d5bbf407a181dda9c']",telecomm/java/android/telecom/ConnectionService.java,"[(199, 200, 2), (198, 199, 2)]","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","[1.0, 1.0]"
26,"['3d2fc559e13b7293212955f1858d443f4fe8234e', 'af02bd5317cc0cced0a7646d5bbf407a181dda9c']",telecomm/java/android/telecom/Call.java,"[(709, 710, 2), (707, 708, 2)]","            if (can(capabilities, CAPABILITY_SUPPORTS_RTT_REMOTE)) {
                builder.append("" CAPABILITY_SUPPORTS_RTT_REMOTE"");
","            if (can(capabilities, CAPABILITY_SUPPORTS_RTT_REMOTE)) {
                builder.append("" CAPABILITY_SUPPORTS_RTT_REMOTE"");
","            if (can(capabilities, CAPABILITY_SUPPORTS_RTT_REMOTE)) {
                builder.append("" CAPABILITY_SUPPORTS_RTT_REMOTE"");
","[1.0, 1.0]"
27,"['3d2fc559e13b7293212955f1858d443f4fe8234e', 'd28a4f6b38dbab44128b4319f665dd65c3e4ec2c']",telecomm/java/android/telecom/ConnectionService.java,"[(199, 200, 2), (191, 192, 2)]","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","[1.0, 1.0]"
28,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', '5358a994b854c7a6627858c48d6947e8acff6ea9']",core/java/android/content/ContentResolver.java,"[(1938, 1939, 2), (1863, 1863, 1)]","        android.util.SeempLog.record_uri(37, url);
        Preconditions.checkNotNull(url, ""url"");
","        android.util.SeempLog.record_uri(37, url);
","        android.util.SeempLog.record_uri(37, url);
","[0.515, 1.0]"
29,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']",wifi/java/android/net/wifi/SoftApConfiguration.java,"[(172, 172, 1), (223, 223, 1)]","        mOweTransIfaceName = oweTransIfaceName;
","        mOweTransIfaceName = oweTransIfaceName;
","        mOweTransIfaceName = oweTransIfaceName;
","[1.0, 1.0]"
30,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']",wifi/java/android/net/wifi/SoftApConfiguration.java,"[(172, 172, 1), (423, 423, 1)]","        mOweTransIfaceName = oweTransIfaceName;
","            mOweTransIfaceName = null;
",        mOweTransIfaceName = ,"[0.604, 0.744]"
31,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']",wifi/java/android/net/wifi/SoftApConfiguration.java,"[(172, 172, 1), (439, 439, 1)]","        mOweTransIfaceName = oweTransIfaceName;
","            mOweTransIfaceName = other.mOweTransIfaceName;
",        mOweTransIfaceName = o,"[0.625, 0.508]"
32,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']",wifi/java/android/net/wifi/SoftApConfiguration.java,"[(191, 191, 1), (243, 243, 1)]","                && mOweTransIfaceName == other.mOweTransIfaceName;
","                && mOweTransIfaceName == other.mOweTransIfaceName;
","                && mOweTransIfaceName == other.mOweTransIfaceName;
","[1.0, 1.0]"
33,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']",wifi/java/android/net/wifi/SoftApConfiguration.java,"[(211, 211, 1), (264, 264, 1)]","        sbuf.append("" \n OWE Transition mode Iface ="").append(mOweTransIfaceName);
","        sbuf.append("" \n OWE Transition mode Iface ="").append(mOweTransIfaceName);
","        sbuf.append("" \n OWE Transition mode Iface ="").append(mOweTransIfaceName);
","[1.0, 1.0]"
34,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']",wifi/java/android/net/wifi/SoftApConfiguration.java,"[(224, 224, 1), (278, 278, 1)]","        dest.writeString(mOweTransIfaceName);
","        dest.writeString(mOweTransIfaceName);
","        dest.writeString(mOweTransIfaceName);
","[1.0, 1.0]"
35,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']",wifi/java/android/net/wifi/SoftApConfiguration.java,"[(240, 240, 1), (294, 294, 1)]","                    in.readString());
","                    in.readInt(), in.readString());
",                    in.read,"[0.711, 0.519]"
36,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']",wifi/java/android/net/wifi/SoftApConfiguration.java,"[(311, 318, 8), (373, 380, 8)]","     * Return the iface name for OWE transition mode for the AP.
     * {@link #setOweTransIfaceName(String)}.
     *
     * @hide
     */
    @Nullable
    public String getOweTransIfaceName() {
      return mOweTransIfaceName;
","     * Return the iface name for OWE transition mode for the AP.
     * {@link #setOweTransIfaceName(String)}.
     *
     * @hide
     */
    @Nullable
    public String getOweTransIfaceName() {
      return mOweTransIfaceName;
","     * Return the iface name for OWE transition mode for the AP.
     * {@link #setOweTransIfaceName(String)}.
     *
     * @hide
     */
    @Nullable
    public String getOweTransIfaceName() {
      return mOweTransIfaceName;
","[1.0, 1.0]"
37,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']",wifi/java/android/net/wifi/SoftApConfiguration.java,"[(359, 359, 1), (223, 223, 1)]","            mOweTransIfaceName = null;
","        mOweTransIfaceName = oweTransIfaceName;
",        mOweTransIfaceName = ,"[0.744, 0.604]"
38,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']",wifi/java/android/net/wifi/SoftApConfiguration.java,"[(359, 359, 1), (423, 423, 1)]","            mOweTransIfaceName = null;
","            mOweTransIfaceName = null;
","            mOweTransIfaceName = null;
","[1.0, 1.0]"
39,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']",wifi/java/android/net/wifi/SoftApConfiguration.java,"[(359, 359, 1), (439, 439, 1)]","            mOweTransIfaceName = null;
","            mOweTransIfaceName = other.mOweTransIfaceName;
",            mOweTransIfaceName = ,"[0.846, 0.559]"
40,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']",wifi/java/android/net/wifi/SoftApConfiguration.java,"[(374, 374, 1), (223, 223, 1)]","            mOweTransIfaceName = other.mOweTransIfaceName;
","        mOweTransIfaceName = oweTransIfaceName;
",        mOweTransIfaceName = o,"[0.508, 0.625]"
41,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']",wifi/java/android/net/wifi/SoftApConfiguration.java,"[(374, 374, 1), (423, 423, 1)]","            mOweTransIfaceName = other.mOweTransIfaceName;
","            mOweTransIfaceName = null;
",            mOweTransIfaceName = ,"[0.559, 0.846]"
42,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']",wifi/java/android/net/wifi/SoftApConfiguration.java,"[(374, 374, 1), (439, 439, 1)]","            mOweTransIfaceName = other.mOweTransIfaceName;
","            mOweTransIfaceName = other.mOweTransIfaceName;
","            mOweTransIfaceName = other.mOweTransIfaceName;
","[1.0, 1.0]"
43,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']",wifi/java/android/net/wifi/SoftApConfiguration.java,"[(514, 525, 12), (627, 638, 12)]","         * Specifies an iface name for OWE transition mode for the AP.
         * <p>
         * <li>If not set, defaults to null.</li>
         *
         * @param oweTransIfaceName iface name for OWE transition mode.
         * @return Builder for chaining.
         *
         * @hide
         */
        @NonNull
        public Builder setOweTransIfaceName(@Nullable String oweTransIfaceName) {
            mOweTransIfaceName = oweTransIfaceName;
","         * Specifies an iface name for OWE transition mode for the AP.
         * <p>
         * <li>If not set, defaults to null.</li>
         *
         * @param oweTransIfaceName iface name for OWE transition mode.
         * @return Builder for chaining.
         *
         * @hide
         */
        @NonNull
        public Builder setOweTransIfaceName(@Nullable String oweTransIfaceName) {
            mOweTransIfaceName = oweTransIfaceName;
","         * Specifies an iface name for OWE transition mode for the AP.
         * <p>
         * <li>If not set, defaults to null.</li>
         *
         * @param oweTransIfaceName iface name for OWE transition mode.
         * @return Builder for chaining.
         *
         * @hide
         */
        @NonNull
        public Builder setOweTransIfaceName(@Nullable String oweTransIfaceName) {
            mOweTransIfaceName = oweTransIfaceName;
","[1.0, 1.0]"
44,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']",wifi/java/android/net/wifi/WifiManager.java,"[(3588, 3601, 14), (3604, 3617, 14)]","         * Called when Stations connected to soft AP.
         *
         * @param Macaddr Mac Address of connected Stations to soft AP
         * @param numClients number of connected clients
         */
        public abstract void onStaConnected(@NonNull String Macaddr, int numClients);

        /**
         * Called when Stations disconnected to soft AP.
         *
         * @param Macaddr Mac Address of Disconnected Stations to soft AP
         * @param numClients number of connected clients
         */
        public abstract void onStaDisconnected(@NonNull String Macaddr, int numClients);
","         * Called when Stations connected to soft AP.
         *
         * @param Macaddr Mac Address of connected Stations to soft AP
         * @param numClients number of connected clients
         */
        public abstract void onStaConnected(@NonNull String Macaddr, int numClients);

        /**
         * Called when Stations disconnected to soft AP.
         *
         * @param Macaddr Mac Address of Disconnected Stations to soft AP
         * @param numClients number of connected clients
         */
        public abstract void onStaDisconnected(@NonNull String Macaddr, int numClients);
","         * Called when Stations connected to soft AP.
         *
         * @param Macaddr Mac Address of connected Stations to soft AP
         * @param numClients number of connected clients
         */
        public abstract void onStaConnected(@NonNull String Macaddr, int numClients);

        /**
         * Called when Stations disconnected to soft AP.
         *
         * @param Macaddr Mac Address of Disconnected Stations to soft AP
         * @param numClients number of connected clients
         */
        public abstract void onStaDisconnected(@NonNull String Macaddr, int numClients);
","[1.0, 1.0]"
45,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']",wifi/java/android/net/wifi/WifiManager.java,"[(3657, 3670, 14), (3686, 3699, 14)]","        public void onStaConnected(String Macaddr, int numClients) throws RemoteException {
            Log.v(TAG, ""SoftApCallbackProxy: ["" + numClients + ""]onStaConnected Macaddr ="" + Macaddr);
            Binder.clearCallingIdentity();
            mExecutor.execute(() -> {
                mCallback.onStaConnected(Macaddr, numClients);
            });
        }

        @Override
        public void onStaDisconnected(String Macaddr, int numClients) throws RemoteException {
            Log.v(TAG, ""SoftApCallbackProxy: ["" + numClients + ""]onStaDisconnected Macaddr ="" + Macaddr);
            Binder.clearCallingIdentity();
            mExecutor.execute(() -> {
                mCallback.onStaDisconnected(Macaddr, numClients);
","        public void onStaConnected(String Macaddr, int numClients) throws RemoteException {
            Log.v(TAG, ""SoftApCallbackProxy: ["" + numClients + ""]onStaConnected Macaddr ="" + Macaddr);
            Binder.clearCallingIdentity();
            mExecutor.execute(() -> {
                mCallback.onStaConnected(Macaddr, numClients);
            });
        }

        @Override
        public void onStaDisconnected(String Macaddr, int numClients) throws RemoteException {
            Log.v(TAG, ""SoftApCallbackProxy: ["" + numClients + ""]onStaDisconnected Macaddr ="" + Macaddr);
            Binder.clearCallingIdentity();
            mExecutor.execute(() -> {
                mCallback.onStaDisconnected(Macaddr, numClients);
","        public void onStaConnected(String Macaddr, int numClients) throws RemoteException {
            Log.v(TAG, ""SoftApCallbackProxy: ["" + numClients + ""]onStaConnected Macaddr ="" + Macaddr);
            Binder.clearCallingIdentity();
            mExecutor.execute(() -> {
                mCallback.onStaConnected(Macaddr, numClients);
            });
        }

        @Override
        public void onStaDisconnected(String Macaddr, int numClients) throws RemoteException {
            Log.v(TAG, ""SoftApCallbackProxy: ["" + numClients + ""]onStaDisconnected Macaddr ="" + Macaddr);
            Binder.clearCallingIdentity();
            mExecutor.execute(() -> {
                mCallback.onStaDisconnected(Macaddr, numClients);
","[1.0, 1.0]"
46,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', '8faa0d981413f18b2468dde1b1fe71e248df0df1']",wifi/java/android/net/wifi/WifiConfiguration.java,"[(2486, 2487, 2), (2637, 2638, 2)]","        } else if (allowedKeyManagement.get(KeyMgmt.DPP)) {
            key = SSID + KeyMgmt.strings[KeyMgmt.DPP];
","        } else if (allowedKeyManagement.get(KeyMgmt.DPP)) {
            key = SSID + KeyMgmt.strings[KeyMgmt.DPP];
","        } else if (allowedKeyManagement.get(KeyMgmt.DPP)) {
            key = SSID + KeyMgmt.strings[KeyMgmt.DPP];
","[1.0, 1.0]"
47,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', '8faa0d981413f18b2468dde1b1fe71e248df0df1']",wifi/java/android/net/wifi/WifiEnterpriseConfig.java,"[(64, 67, 4), (96, 97, 2)]","    /** @hide */
    public static final String EAP_ERP             = ""eap_erp"";
    /** @hide */
    public static final String KEY_SIMNUM          = ""sim_num"";
","    /** @hide */
    public static final String KEY_SIMNUM          = ""sim_num"";
","    /** @hide */
    public static final String KEY_SIMNUM          = ""sim_num"";
","[0.5, 1.0]"
48,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', '8faa0d981413f18b2468dde1b1fe71e248df0df1']",services/core/java/com/android/server/am/ProcessRecord.java,"[(66, 66, 1), (70, 70, 1)]","import com.android.server.Watchdog;
","import com.android.server.Watchdog;
","import com.android.server.Watchdog;
","[1.0, 1.0]"
49,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', 'd28a4f6b38dbab44128b4319f665dd65c3e4ec2c']",services/core/java/com/android/server/am/ProcessRecord.java,"[(66, 66, 1), (69, 69, 1)]","import com.android.server.Watchdog;
","import com.android.server.Watchdog;
","import com.android.server.Watchdog;
","[1.0, 1.0]"
50,"['43ceded8caaffead0a2a1967f42a4ef4bb658ced', 'edb6252578f9b76151e5125a7fb1b16823a68418']",services/core/java/com/android/server/wm/ActivityStackSupervisor.java,"[(55, 55, 1), (55, 56, 2)]","import static com.android.server.wm.ActivityStack.ActivityState.DESTROYED;
","import static com.android.server.wm.ActivityStack.ActivityState.DESTROYED;
import static com.android.server.wm.ActivityStack.REMOVE_TASK_MODE_MOVING;
","import static com.android.server.wm.ActivityStack.ActivityState.DESTROYED;
","[1.0, 0.5]"
51,"['5358a994b854c7a6627858c48d6947e8acff6ea9', '62f4dee264cabcd5595e6e4c0a6ab3228281d3e0']",services/core/java/com/android/server/wm/ActivityStack.java,"[(147, 148, 2), (151, 153, 3)]","import com.android.internal.app.ActivityTrigger;

","import android.view.SurfaceControl;
import com.android.internal.app.ActivityTrigger;

","import com.android.internal.app.ActivityTrigger;

","[1.0, 0.581]"
52,"['5358a994b854c7a6627858c48d6947e8acff6ea9', '6fc85c43e31aad55eecd51d3b0de34715ae03810']",wifi/java/android/net/wifi/WifiConfiguration.java,"[(1888, 1892, 5), (1892, 1897, 6)]","        dppConnector = null;
        dppNetAccessKey = null;
        dppNetAccessKeyExpiry = -1;
        dppCsign = null;
        oweTransIfaceName = null;
","        clonedNetworkConfigKey = null;
        dppConnector = null;
        dppNetAccessKey = null;
        dppNetAccessKeyExpiry = -1;
        dppCsign = null;
        oweTransIfaceName = null;
","        dppConnector = null;
        dppNetAccessKey = null;
        dppNetAccessKeyExpiry = -1;
        dppCsign = null;
        oweTransIfaceName = null;
","[1.0, 0.8]"
53,"['5358a994b854c7a6627858c48d6947e8acff6ea9', '8faa0d981413f18b2468dde1b1fe71e248df0df1']",services/core/java/com/android/server/wm/ActivityStack.java,"[(173, 173, 1), (208, 208, 1)]","public class ActivityStack extends TaskStack {
","public class ActivityStack extends Task implements BoundsAnimationTarget {
",public class ActivityStack extends Task,"[0.83, 0.52]"
54,"['5358a994b854c7a6627858c48d6947e8acff6ea9', 'edb6252578f9b76151e5125a7fb1b16823a68418']",services/core/java/com/android/server/wm/ActivityStack.java,"[(173, 173, 1), (173, 173, 1)]","public class ActivityStack extends TaskStack {
","public class ActivityStack extends ConfigurationContainer {
",public class ActivityStack extends ,"[0.745, 0.583]"
55,"['5358a994b854c7a6627858c48d6947e8acff6ea9', 'fa63f69f0fdfc50fe92caa22dbe1b4b120807ed2']",wifi/java/android/net/wifi/WifiConfiguration.java,"[(2649, 2649, 1), (2616, 2616, 1)]","        dest.writeString(oweTransIfaceName);
","        dest.writeString(oweTransIfaceName);
","        dest.writeString(oweTransIfaceName);
","[1.0, 1.0]"
56,"['5358a994b854c7a6627858c48d6947e8acff6ea9', 'fa63f69f0fdfc50fe92caa22dbe1b4b120807ed2']",wifi/java/android/net/wifi/WifiConfiguration.java,"[(2732, 2732, 1), (2695, 2695, 1)]","                config.oweTransIfaceName = in.readString();
","                config.oweTransIfaceName = in.readString();
","                config.oweTransIfaceName = in.readString();
","[1.0, 1.0]"
57,"['6aa497092f6337fbafb5b9858a3ec8f28c9d3caf', 'b6292e3e1ba3616eac1032737a91925391d94b92']",packages/SettingsLib/src/com/android/settingslib/bluetooth/A2dpProfile.java,"[(222, 227, 6), (222, 227, 6)]","        if (V) Log.d(TAG, "" execute supportsHighQualityAudio()"");
        if (mService == null) {
            if (V) Log.d(TAG,""mService is null."");
            return false;
        }
        BluetoothDevice bluetoothDevice = (device == null) ? device : mService.getActiveDevice();
","        if (V) Log.d(TAG, "" execute supportsHighQualityAudio()"");
        if (mService == null) {
            if (V) Log.d(TAG,""mService is null."");
            return false;
        }
        int support = mService.supportsOptionalCodecs(device);
","        if (V) Log.d(TAG, "" execute supportsHighQualityAudio()"");
        if (mService == null) {
            if (V) Log.d(TAG,""mService is null."");
            return false;
        }
        ","[0.682, 0.778]"
58,"['6aa497092f6337fbafb5b9858a3ec8f28c9d3caf', 'b6292e3e1ba3616eac1032737a91925391d94b92']",packages/SettingsLib/src/com/android/settingslib/bluetooth/A2dpProfile.java,"[(236, 241, 6), (232, 237, 6)]","        if (V) Log.d(TAG, "" execute isHighQualityAudioEnabled()"");
        if (mService == null) {
            if (V) Log.d(TAG,""mService is null."");
            return false;
        }
        BluetoothDevice bluetoothDevice = (device == null) ? device : mService.getActiveDevice();
","        if (V) Log.d(TAG, "" execute isHighQualityAudioEnabled()"");
        if (mService == null) {
            if (V) Log.d(TAG,""mService is null."");
            return false;
        }
        int enabled = mService.getOptionalCodecsEnabled(device);
","        if (V) Log.d(TAG, "" execute isHighQualityAudioEnabled()"");
        if (mService == null) {
            if (V) Log.d(TAG,""mService is null."");
            return false;
        }
        ","[0.683, 0.773]"
59,"['6aa497092f6337fbafb5b9858a3ec8f28c9d3caf', 'b6292e3e1ba3616eac1032737a91925391d94b92']",packages/SettingsLib/src/com/android/settingslib/bluetooth/A2dpProfile.java,"[(267, 275, 9), (259, 268, 10)]","        if (V) Log.d(TAG, "" execute setHighQualityAudioEnabled()"");
        int prefValue = enabled
                ? BluetoothA2dp.OPTIONAL_CODECS_PREF_ENABLED
                : BluetoothA2dp.OPTIONAL_CODECS_PREF_DISABLED;
        if (mService == null) {
            if (V) Log.d(TAG,""mService is null."");
            return;
        }
        BluetoothDevice bluetoothDevice = (device == null) ? device : mService.getActiveDevice();
","        if (V) Log.d(TAG, "" execute setHighQualityAudioEnabled()"");
        int prefValue = enabled
                ? BluetoothA2dp.OPTIONAL_CODECS_PREF_ENABLED
                : BluetoothA2dp.OPTIONAL_CODECS_PREF_DISABLED;
        if (mService == null) {
            if (V) Log.d(TAG,""mService is null."");
            return;
        }
        mService.setOptionalCodecsEnabled(device, prefValue);
        if (getConnectionStatus(device) != BluetoothProfile.STATE_CONNECTED) {
","        if (V) Log.d(TAG, "" execute setHighQualityAudioEnabled()"");
        int prefValue = enabled
                ? BluetoothA2dp.OPTIONAL_CODECS_PREF_ENABLED
                : BluetoothA2dp.OPTIONAL_CODECS_PREF_DISABLED;
        if (mService == null) {
            if (V) Log.d(TAG,""mService is null."");
            return;
        }
        ","[0.793, 0.722]"
60,"['6aa497092f6337fbafb5b9858a3ec8f28c9d3caf', 'd28a4f6b38dbab44128b4319f665dd65c3e4ec2c']",core/java/android/os/Process.java,"[(932, 953, 22), (859, 880, 22)]","     * Sets the scheduling group for processes in the same cgroup.procs of uid and pid
     * @hide
     * @param uid The user identifier of the process to change.
     * @param pid The identifier of the process to change.
     * @param group The target group for this process from THREAD_GROUP_*.
     *
     * @throws IllegalArgumentException Throws IllegalArgumentException if
     * <var>tid</var> does not exist.
     * @throws SecurityException Throws SecurityException if your process does
     * not have permission to modify the given thread, or to use the given
     * priority.
     *
     * group == THREAD_GROUP_DEFAULT means to move all non-background priority
     * threads to the foreground scheduling group, but to leave background
     * priority threads alone.  group == THREAD_GROUP_BG_NONINTERACTIVE moves all
     * threads, regardless of priority, to the background scheduling group.
     * group == THREAD_GROUP_FOREGROUND is not allowed.
     *
     * Always sets cpusets.
     */
    public static final native void setCgroupProcsProcessGroup(int uid, int pid, int group)
            throws IllegalArgumentException, SecurityException;
","     * Sets the scheduling group for processes in the same cgroup.procs of uid and pid
     * @hide
     * @param uid The user identifier of the process to change.
     * @param pid The identifier of the process to change.
     * @param group The target group for this process from THREAD_GROUP_*.
     *
     * @throws IllegalArgumentException Throws IllegalArgumentException if
     * <var>tid</var> does not exist.
     * @throws SecurityException Throws SecurityException if your process does
     * not have permission to modify the given thread, or to use the given
     * priority.
     *
     * group == THREAD_GROUP_DEFAULT means to move all non-background priority
     * threads to the foreground scheduling group, but to leave background
     * priority threads alone.  group == THREAD_GROUP_BG_NONINTERACTIVE moves all
     * threads, regardless of priority, to the background scheduling group.
     * group == THREAD_GROUP_FOREGROUND is not allowed.
     *
     * Always sets cpusets.
     */
    public static final native void setCgroupProcsProcessGroup(int uid, int pid, int group)
            throws IllegalArgumentException, SecurityException;
","     * Sets the scheduling group for processes in the same cgroup.procs of uid and pid
     * @hide
     * @param uid The user identifier of the process to change.
     * @param pid The identifier of the process to change.
     * @param group The target group for this process from THREAD_GROUP_*.
     *
     * @throws IllegalArgumentException Throws IllegalArgumentException if
     * <var>tid</var> does not exist.
     * @throws SecurityException Throws SecurityException if your process does
     * not have permission to modify the given thread, or to use the given
     * priority.
     *
     * group == THREAD_GROUP_DEFAULT means to move all non-background priority
     * threads to the foreground scheduling group, but to leave background
     * priority threads alone.  group == THREAD_GROUP_BG_NONINTERACTIVE moves all
     * threads, regardless of priority, to the background scheduling group.
     * group == THREAD_GROUP_FOREGROUND is not allowed.
     *
     * Always sets cpusets.
     */
    public static final native void setCgroupProcsProcessGroup(int uid, int pid, int group)
            throws IllegalArgumentException, SecurityException;
","[1.0, 1.0]"
61,"['6f47ceafbe6febe54aa5c376baed3415cdf848ad', 'a33382db0bb0bc29bab84f1e5ee36d682bea593e']",core/java/android/content/pm/ApplicationInfo.java,"[(2211, 2212, 2), (2190, 2190, 1)]","    /** {@hide} */ public void setGwpAsanEnabled(@Nullable Boolean value) { enableGwpAsan = value; }
    /** {@hide} */ public void setOverrideRes(int overrideResolution) { overrideRes = overrideResolution; }
","    /** {@hide} */ public void setOverrideRes(int overrideResolution) { overrideRes = overrideResolution; }
","    /** {@hide} */ public void setOverrideRes(int overrideResolution) { overrideRes = overrideResolution; }
","[0.517, 1.0]"
62,"['6f47ceafbe6febe54aa5c376baed3415cdf848ad', 'd28a4f6b38dbab44128b4319f665dd65c3e4ec2c']",packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java,"[(32, 36, 5), (36, 39, 4)]","import android.telephony.CellSignalStrengthNr;
import android.telephony.DisplayInfo;
import android.telephony.ims.ImsMmTelManager;
import android.telephony.ims.ImsReasonInfo;
import android.telephony.ims.feature.MmTelFeature;
","import android.telephony.CellSignalStrengthNr;
import android.telephony.ims.ImsMmTelManager;
import android.telephony.ims.ImsReasonInfo;
import android.telephony.ims.feature.MmTelFeature;
",";
import android.telephony.ims.ImsMmTelManager;
import android.telephony.ims.ImsReasonInfo;
import android.telephony.ims.feature.MmTelFeature;
","[0.633, 0.761]"
63,"['6f47ceafbe6febe54aa5c376baed3415cdf848ad', 'edb6252578f9b76151e5125a7fb1b16823a68418']",packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java,"[(32, 36, 5), (29, 32, 4)]","import android.telephony.CellSignalStrengthNr;
import android.telephony.DisplayInfo;
import android.telephony.ims.ImsMmTelManager;
import android.telephony.ims.ImsReasonInfo;
import android.telephony.ims.feature.MmTelFeature;
","import android.telephony.CellSignalStrengthNr;
import android.telephony.ims.ImsMmTelManager;
import android.telephony.ims.ImsReasonInfo;
import android.telephony.ims.feature.MmTelFeature;
",";
import android.telephony.ims.ImsMmTelManager;
import android.telephony.ims.ImsReasonInfo;
import android.telephony.ims.feature.MmTelFeature;
","[0.633, 0.761]"
64,"['6fc85c43e31aad55eecd51d3b0de34715ae03810', '71998c3d8b36220df1be12fe6e1ba7eda81cde41']",telephony/java/android/telephony/DisconnectCause.java,"[(669, 732, 64), (677, 740, 64)]","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","[1.0, 1.0]"
65,"['6fc85c43e31aad55eecd51d3b0de34715ae03810', '7fe8671fd7b5388dd9be6295dbea6d31209468f9']",telephony/java/android/telephony/DisconnectCause.java,"[(669, 732, 64), (642, 705, 64)]","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","[1.0, 1.0]"
66,"['6fc85c43e31aad55eecd51d3b0de34715ae03810', 'ae1b3a8f3221dbe692fd90d414cfe5040538c264']",services/core/java/com/android/server/am/ActivityManagerService.java,"[(578, 582, 5), (578, 588, 11)]","    /* Freq Aggr boost objects */
    public static BoostFramework mPerfServiceStartHint = null;
    /* UX perf event object */
    public static BoostFramework mUxPerf = new BoostFramework();
    public static boolean mForceStopKill = false;
","    /**
     * How long between a process kill and we actually receive its death recipient
     */
    private static final long PROC_KILL_TIMEOUT = 5000; // 5 seconds;

    /* Freq Aggr boost objects */
    public static BoostFramework mPerfServiceStartHint = null;
    /* UX perf event object */
    public static BoostFramework mUxPerf = new BoostFramework();
    public static boolean mForceStopKill = false;

","    /* Freq Aggr boost objects */
    public static BoostFramework mPerfServiceStartHint = null;
    /* UX perf event object */
    public static BoostFramework mUxPerf = new BoostFramework();
    public static boolean mForceStopKill = false;
","[1.0, 0.587]"
67,"['71998c3d8b36220df1be12fe6e1ba7eda81cde41', '7fe8671fd7b5388dd9be6295dbea6d31209468f9']",telephony/java/android/telephony/DisconnectCause.java,"[(677, 740, 64), (642, 705, 64)]","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","        case NETWORK_OUT_OF_ORDER:
            return ""NETWORK_OUT_OF_ORDER"";
        case TEMPORARY_FAILURE:
            return ""TEMPORARY_FAILURE"";
        case SWITCHING_EQUIPMENT_CONGESTION:
            return ""SWITCHING_EQUIPMENT_CONGESTION"";
        case ACCESS_INFORMATION_DISCARDED:
            return ""ACCESS_INFORMATION_DISCARDED"";
        case REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE:
            return ""REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE"";
        case RESOURCES_UNAVAILABLE_OR_UNSPECIFIED:
            return ""RESOURCES_UNAVAILABLE_OR_UNSPECIFIED"";
        case QOS_UNAVAILABLE:
            return ""QOS_UNAVAILABLE"";
        case REQUESTED_FACILITY_NOT_SUBSCRIBED:
            return ""REQUESTED_FACILITY_NOT_SUBSCRIBED"";
        case INCOMING_CALLS_BARRED_WITHIN_CUG:
            return ""INCOMING_CALLS_BARRED_WITHIN_CUG"";
        case BEARER_CAPABILITY_UNAVAILABLE:
            return ""BEARER_CAPABILITY_UNAVAILABLE"";
        case SERVICE_OPTION_NOT_AVAILABLE:
            return ""SERVICE_OPTION_NOT_AVAILABLE"";
        case BEARER_SERVICE_NOT_IMPLEMENTED:
            return ""BEARER_SERVICE_NOT_IMPLEMENTED"";
        case REQUESTED_FACILITY_NOT_IMPLEMENTED:
            return ""REQUESTED_FACILITY_NOT_IMPLEMENTED"";
        case ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE:
            return ""ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE"";
        case SERVICE_OR_OPTION_NOT_IMPLEMENTED:
            return ""SERVICE_OR_OPTION_NOT_IMPLEMENTED"";
        case INVALID_TRANSACTION_IDENTIFIER:
            return ""INVALID_TRANSACTION_IDENTIFIER"";
        case USER_NOT_MEMBER_OF_CUG:
            return ""USER_NOT_MEMBER_OF_CUG"";
        case INCOMPATIBLE_DESTINATION:
            return ""INCOMPATIBLE_DESTINATION"";
        case INVALID_TRANSIT_NW_SELECTION:
            return ""INVALID_TRANSIT_NW_SELECTION"";
        case SEMANTICALLY_INCORRECT_MESSAGE:
            return ""SEMANTICALLY_INCORRECT_MESSAGE"";
        case INVALID_MANDATORY_INFORMATION:
            return ""INVALID_MANDATORY_INFORMATION"";
        case MESSAGE_TYPE_NON_IMPLEMENTED:
            return ""MESSAGE_TYPE_NON_IMPLEMENTED"";
        case MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case INFORMATION_ELEMENT_NON_EXISTENT:
            return ""INFORMATION_ELEMENT_NON_EXISTENT"";
        case CONDITIONAL_IE_ERROR:
            return ""CONDITIONAL_IE_ERROR"";
        case MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE:
            return ""MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE"";
        case RECOVERY_ON_TIMER_EXPIRED:
            return ""RECOVERY_ON_TIMER_EXPIRED"";
        case PROTOCOL_ERROR_UNSPECIFIED:
            return ""PROTOCOL_ERROR_UNSPECIFIED"";
        case INTERWORKING_UNSPECIFIED:
            return ""INTERWORKING_UNSPECIFIED"";
        case LOCAL_LOW_BATTERY:
            return ""LOCAL_LOW_BATTERY"";
        case HO_NOT_FEASIBLE:
            return ""HO_NOT_FEASIBLE"";
        case NON_SELECTED_USER_CLEARING:
            return ""NON_SELECTED_USER_CLEARING"";
","[1.0, 1.0]"
68,"['71998c3d8b36220df1be12fe6e1ba7eda81cde41', '8faa0d981413f18b2468dde1b1fe71e248df0df1']",packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarPolicy.java,"[(184, 185, 2), (190, 191, 2)]","        filter.addAction(Intent.ACTION_BOOT_COMPLETED);
        broadcastDispatcher.registerReceiver(mIntentReceiver, filter, mHandler);
","        filter.addAction(Intent.ACTION_BOOT_COMPLETED);
        broadcastDispatcher.registerReceiverWithHandler(mIntentReceiver, filter, mHandler);
","        filter.addAction(Intent.ACTION_BOOT_COMPLETED);
        broadcastDispatcher.registerReceiver","[0.73, 0.676]"
69,"['71998c3d8b36220df1be12fe6e1ba7eda81cde41', '8faa0d981413f18b2468dde1b1fe71e248df0df1']",services/core/java/com/android/server/Watchdog.java,"[(617, 618, 2), (621, 622, 2)]","            final File finalStack = ActivityManagerService.dumpStackTraces(
                    pids, null, null, getInterestingNativePids());
","            final File finalStack = ActivityManagerService.dumpStackTraces(
                    pids, processCpuTracker, new SparseArray<>(), getInterestingNativePids());
","            final File finalStack = ActivityManagerService.dumpStackTraces(
                    pids, ","[0.713, 0.596]"
70,"['71998c3d8b36220df1be12fe6e1ba7eda81cde41', '8faa0d981413f18b2468dde1b1fe71e248df0df1']",services/core/java/com/android/server/Watchdog.java,"[(688, 688, 1), (695, 695, 1)]","                                    subject, null, finalStack, null);
","                                    subject, cpuInfo, finalStack, null);
","                                    subject, ","[0.643, 0.616]"
71,"['71998c3d8b36220df1be12fe6e1ba7eda81cde41', 'af02bd5317cc0cced0a7646d5bbf407a181dda9c']",core/java/com/android/ims/internal/uce/common/CapInfo.java,"[(82, 85, 4), (81, 83, 3)]","     /** Standalone Chatbot communication support. */
    private boolean mSmChatbotSupported = false;
     /** MMtel based call composer support. */
    private boolean mMmtelCallComposerSupported = false;
","     /** Standalone Chatbot communication support. */
    private boolean mSmChatbotSupported = false;
     /** MMtel based call composer support. */
","     /** Standalone Chatbot communication support. */
    private boolean mSmChatbotSupported = false;
     /** MMtel based call composer support. */
","[0.725, 1.0]"
72,"['71998c3d8b36220df1be12fe6e1ba7eda81cde41', 'af02bd5317cc0cced0a7646d5bbf407a181dda9c']",core/java/com/android/ims/internal/uce/common/CapInfo.java,"[(95, 95, 1), (94, 94, 1)]","    @UnsupportedAppUsage
","    @UnsupportedAppUsage
","    @UnsupportedAppUsage
","[1.0, 1.0]"
73,"['71998c3d8b36220df1be12fe6e1ba7eda81cde41', 'af02bd5317cc0cced0a7646d5bbf407a181dda9c']",services/core/java/com/android/server/wm/ActivityRecord.java,"[(1662, 1664, 3), (1658, 1660, 3)]","
        if (mPerf == null)
            mPerf = new BoostFramework();
","
        if (mPerf == null)
            mPerf = new BoostFramework();
","
        if (mPerf == null)
            mPerf = new BoostFramework();
","[1.0, 1.0]"
74,"['71998c3d8b36220df1be12fe6e1ba7eda81cde41', 'af02bd5317cc0cced0a7646d5bbf407a181dda9c']",services/core/java/com/android/server/am/ActivityManagerConstants.java,"[(365, 377, 13), (434, 446, 13)]","
        if (mPerf != null) {
          // Maximum number of cached processes we will allow.
            DEFAULT_MAX_CACHED_PROCESSES = MAX_CACHED_PROCESSES = Integer.valueOf(
                                                 mPerf.perfGetProp(""ro.vendor.qti.sys.fw.bg_apps_limit"", ""32""));

           //Trim Settings
            USE_TRIM_SETTINGS = Boolean.parseBoolean(mPerf.perfGetProp(""ro.vendor.qti.sys.fw.use_trim_settings"", ""true""));
            EMPTY_APP_PERCENT = Integer.valueOf(mPerf.perfGetProp(""ro.vendor.qti.sys.fw.empty_app_percent"", ""50""));
            TRIM_EMPTY_PERCENT = Integer.valueOf(mPerf.perfGetProp(""ro.vendor.qti.sys.fw.trim_empty_percent"", ""100""));
            TRIM_CACHE_PERCENT = Integer.valueOf(mPerf.perfGetProp(""ro.vendor.qti.sys.fw.trim_cache_percent"", ""100""));
            TRIM_ENABLE_MEMORY = Long.valueOf(mPerf.perfGetProp(""ro.vendor.qti.sys.fw.trim_enable_memory"", ""1073741824""));
        }
","
        if (mPerf != null) {
          // Maximum number of cached processes we will allow.
            DEFAULT_MAX_CACHED_PROCESSES = MAX_CACHED_PROCESSES = Integer.valueOf(
                                                 mPerf.perfGetProp(""ro.vendor.qti.sys.fw.bg_apps_limit"", ""32""));

           //Trim Settings
            USE_TRIM_SETTINGS = Boolean.parseBoolean(mPerf.perfGetProp(""ro.vendor.qti.sys.fw.use_trim_settings"", ""true""));
            EMPTY_APP_PERCENT = Integer.valueOf(mPerf.perfGetProp(""ro.vendor.qti.sys.fw.empty_app_percent"", ""50""));
            TRIM_EMPTY_PERCENT = Integer.valueOf(mPerf.perfGetProp(""ro.vendor.qti.sys.fw.trim_empty_percent"", ""100""));
            TRIM_CACHE_PERCENT = Integer.valueOf(mPerf.perfGetProp(""ro.vendor.qti.sys.fw.trim_cache_percent"", ""100""));
            TRIM_ENABLE_MEMORY = Long.valueOf(mPerf.perfGetProp(""ro.vendor.qti.sys.fw.trim_enable_memory"", ""1073741824""));
        }
","
        if (mPerf != null) {
          // Maximum number of cached processes we will allow.
            DEFAULT_MAX_CACHED_PROCESSES = MAX_CACHED_PROCESSES = Integer.valueOf(
                                                 mPerf.perfGetProp(""ro.vendor.qti.sys.fw.bg_apps_limit"", ""32""));

           //Trim Settings
            USE_TRIM_SETTINGS = Boolean.parseBoolean(mPerf.perfGetProp(""ro.vendor.qti.sys.fw.use_trim_settings"", ""true""));
            EMPTY_APP_PERCENT = Integer.valueOf(mPerf.perfGetProp(""ro.vendor.qti.sys.fw.empty_app_percent"", ""50""));
            TRIM_EMPTY_PERCENT = Integer.valueOf(mPerf.perfGetProp(""ro.vendor.qti.sys.fw.trim_empty_percent"", ""100""));
            TRIM_CACHE_PERCENT = Integer.valueOf(mPerf.perfGetProp(""ro.vendor.qti.sys.fw.trim_cache_percent"", ""100""));
            TRIM_ENABLE_MEMORY = Long.valueOf(mPerf.perfGetProp(""ro.vendor.qti.sys.fw.trim_enable_memory"", ""1073741824""));
        }
","[1.0, 1.0]"
75,"['71998c3d8b36220df1be12fe6e1ba7eda81cde41', 'c77ad764fad2451538f140b31601e7b8c6c59fa2']",core/java/android/view/InputEventReceiver.java,"[(217, 232, 16), (223, 242, 20)]","    // Called from native code.
    @SuppressWarnings(""unused"")
    private void dispatchMotionEventInfo(int motionEventType, int touchMoveNum) {
        try {
            if (mChoreographer == null)
                mChoreographer = Choreographer.getInstance();

            if (mChoreographer != null)
                mChoreographer.setMotionEventInfo(motionEventType, touchMoveNum);
        } catch (Exception e) {
            Log.e(TAG, ""cannot invoke setMotionEventInfo."");
        }
    }
    public static interface Factory {
        public InputEventReceiver createInputEventReceiver(
                InputChannel inputChannel, Looper looper);
","    // Called from native code.
    @SuppressWarnings(""unused"")
    @UnsupportedAppUsage
    private void dispatchBatchedInputEventPending() {
        onBatchedInputEventPending();
    }

    // Called from native code.
    @SuppressWarnings(""unused"")
    private void dispatchMotionEventInfo(int motionEventType, int touchMoveNum) {
        try {
            if (mChoreographer == null)
                mChoreographer = Choreographer.getInstance();

            if (mChoreographer != null)
                mChoreographer.setMotionEventInfo(motionEventType, touchMoveNum);
        } catch (Exception e) {
            Log.e(TAG, ""cannot invoke setMotionEventInfo."");
        }
    }
","    // Called from native code.
    @SuppressWarnings(""unused"")
    private void dispatchMotionEventInfo(int motionEventType, int touchMoveNum) {
        try {
            if (mChoreographer == null)
                mChoreographer = Choreographer.getInstance();

            if (mChoreographer != null)
                mChoreographer.setMotionEventInfo(motionEventType, touchMoveNum);
        } catch (Exception e) {
            Log.e(TAG, ""cannot invoke setMotionEventInfo."");
        }
    }
","[0.759, 0.724]"
76,"['71998c3d8b36220df1be12fe6e1ba7eda81cde41', 'd28a4f6b38dbab44128b4319f665dd65c3e4ec2c']",packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java,"[(51, 53, 3), (54, 56, 3)]","import com.android.internal.telephony.cdma.EriInfo;
import com.android.internal.telephony.PhoneConstants;
import com.android.internal.telephony.PhoneConstants.DataState;
","import com.android.internal.telephony.TelephonyIntents;
import com.android.internal.telephony.PhoneConstants;
import com.android.internal.telephony.PhoneConstants.DataState;
",";
import com.android.internal.telephony.PhoneConstants;
import com.android.internal.telephony.PhoneConstants.DataState;
","[0.706, 0.69]"
77,"['71998c3d8b36220df1be12fe6e1ba7eda81cde41', 'edb6252578f9b76151e5125a7fb1b16823a68418']",packages/SystemUI/src/com/android/systemui/statusbar/policy/NetworkControllerImpl.java,"[(333, 334, 2), (321, 322, 2)]","        filter.addAction(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED);
        mBroadcastDispatcher.registerReceiver(this, filter, mReceiverHandler);
","        filter.addAction(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED);
        mContext.registerReceiver(this, filter, null, mReceiverHandler);
","        filter.addAction(TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED);
        m","[0.573, 0.595]"
78,"['7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2', 'ae1b3a8f3221dbe692fd90d414cfe5040538c264']",services/core/java/com/android/server/audio/AudioDeviceBroker.java,"[(929, 944, 16), (931, 945, 15)]","                } break;
                case MSG_L_A2DP_ACTIVE_DEVICE_CHANGE_EXT: {
                    final BtDeviceConnectionInfo info = (BtDeviceConnectionInfo) msg.obj;
                    AudioService.sDeviceLogger.log((new AudioEventLogger.StringEvent(
                    ""handleBluetoothA2dpActiveDeviceChangeExt ""
                           + "" state="" + info.mState
                           // only querying address as this is the only readily available
                           // field on the device
                           + "" addr="" + info.mDevice.getAddress()
                           + "" prof="" + info.mProfile + "" supprNoisy="" + info.mSupprNoisy
                           + "" vol="" + info.mVolume)).printLog(TAG));
                    synchronized (mDeviceStateLock) {
                        mDeviceInventory.handleBluetoothA2dpActiveDeviceChangeExt(
                                info.mDevice, info.mState, info.mProfile,
                                info.mSupprNoisy, info.mVolume);
                    }
","                case MSG_L_A2DP_ACTIVE_DEVICE_CHANGE_EXT: {
                    final BtDeviceConnectionInfo info = (BtDeviceConnectionInfo) msg.obj;
                    AudioService.sDeviceLogger.log((new AudioEventLogger.StringEvent(
                    ""handleBluetoothA2dpActiveDeviceChangeExt ""
                           + "" state="" + info.mState
                           // only querying address as this is the only readily available
                           // field on the device
                           + "" addr="" + info.mDevice.getAddress()
                           + "" prof="" + info.mProfile + "" supprNoisy="" + info.mSupprNoisy
                           + "" vol="" + info.mVolume)).printLog(TAG));
                    synchronized (mDeviceStateLock) {
                        mDeviceInventory.handleBluetoothA2dpActiveDeviceChangeExt(
                                info.mDevice, info.mState, info.mProfile,
                                info.mSupprNoisy, info.mVolume);
                    }
","                case MSG_L_A2DP_ACTIVE_DEVICE_CHANGE_EXT: {
                    final BtDeviceConnectionInfo info = (BtDeviceConnectionInfo) msg.obj;
                    AudioService.sDeviceLogger.log((new AudioEventLogger.StringEvent(
                    ""handleBluetoothA2dpActiveDeviceChangeExt ""
                           + "" state="" + info.mState
                           // only querying address as this is the only readily available
                           // field on the device
                           + "" addr="" + info.mDevice.getAddress()
                           + "" prof="" + info.mProfile + "" supprNoisy="" + info.mSupprNoisy
                           + "" vol="" + info.mVolume)).printLog(TAG));
                    synchronized (mDeviceStateLock) {
                        mDeviceInventory.handleBluetoothA2dpActiveDeviceChangeExt(
                                info.mDevice, info.mState, info.mProfile,
                                info.mSupprNoisy, info.mVolume);
                    }
","[0.976, 1.0]"
79,"['7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2', 'af02bd5317cc0cced0a7646d5bbf407a181dda9c']",services/core/java/com/android/server/audio/AudioService.java,"[(3238, 3239, 2), (3473, 3475, 3)]","        Log.i(TAG, ""setMode(mode = "" + mode + "", callingPackage = "" +
                  callingPackage + "", Process ID: "" + Binder.getCallingPid());
","        Log.i(TAG, ""setMode(mode = "" + mode + "", callingPackage = "" +
                  callingPackage + "", Process ID: "" + Binder.getCallingPid());
        if (DEBUG_MODE) { Log.v(TAG, ""setMode(mode="" + mode + "", callingPackage="" + callingPackage + "")""); }
","        Log.i(TAG, ""setMode(mode = "" + mode + "", callingPackage = "" +
                  callingPackage + "", Process ID: "" + Binder.getCallingPid());
","[1.0, 0.578]"
80,"['7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2', 'edb6252578f9b76151e5125a7fb1b16823a68418']",location/java/android/location/LocationManager.java,"[(1868, 1870, 3), (1978, 1979, 2)]","    public boolean addNmeaListener(GpsStatus.NmeaListener listener) {
        android.util.SeempLog.record(44);
        return false;
","    public boolean addNmeaListener(GpsStatus.NmeaListener listener) {
        android.util.SeempLog.record(44);
","    public boolean addNmeaListener(GpsStatus.NmeaListener listener) {
        android.util.SeempLog.record(44);
","[0.836, 1.0]"
81,"['7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2', 'edb6252578f9b76151e5125a7fb1b16823a68418']",wifi/java/android/net/wifi/WifiInfo.java,"[(727, 729, 3), (788, 791, 4)]","                .append("", Wifi Generation: "").append(mWifiGeneration)
                .append("", TWT support: "").append(mTwtSupport)
                .append("", Eight Max VHT Spatial streams support: "").append(mVhtMax8SpatialStreamsSupport)
","                .append("", Wifi Generation: "").append(mWifiGeneration)
                .append("", TWT support: "").append(mTwtSupport)
                .append("", Eight Max VHT Spatial streams support: "").append(mVhtMax8SpatialStreamsSupport)
                .append("", Wi-Fi technology: "").append(mWifiTechnology)
","                .append("", Wifi Generation: "").append(mWifiGeneration)
                .append("", TWT support: "").append(mTwtSupport)
                .append("", Eight Max VHT Spatial streams support: "").append(mVhtMax8SpatialStreamsSupport)
","[1.0, 0.77]"
82,"['7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2', 'edb6252578f9b76151e5125a7fb1b16823a68418']",wifi/java/android/net/wifi/WifiInfo.java,"[(785, 787, 3), (847, 850, 4)]","        dest.writeInt(mWifiGeneration);
        dest.writeInt(mVhtMax8SpatialStreamsSupport ? 1 : 0);
        dest.writeInt(mTwtSupport ? 1 : 0);
","        dest.writeInt(mWifiGeneration);
        dest.writeInt(mVhtMax8SpatialStreamsSupport ? 1 : 0);
        dest.writeInt(mTwtSupport ? 1 : 0);
        dest.writeInt(mWifiTechnology);
","        dest.writeInt(mWifiGeneration);
        dest.writeInt(mVhtMax8SpatialStreamsSupport ? 1 : 0);
        dest.writeInt(mTwtSupport ? 1 : 0);
","[1.0, 0.785]"
83,"['7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2', 'edb6252578f9b76151e5125a7fb1b16823a68418']",wifi/java/android/net/wifi/WifiInfo.java,"[(829, 831, 3), (892, 895, 4)]","                info.mWifiGeneration = in.readInt();
                info.mVhtMax8SpatialStreamsSupport = in.readInt() != 0;
                info.mTwtSupport = in.readInt() != 0;
","                info.mWifiGeneration = in.readInt();
                info.mVhtMax8SpatialStreamsSupport = in.readInt() != 0;
                info.mTwtSupport = in.readInt() != 0;
                info.mWifiTechnology = in.readInt();
","                info.mWifiGeneration = in.readInt();
                info.mVhtMax8SpatialStreamsSupport = in.readInt() != 0;
                info.mTwtSupport = in.readInt() != 0;
","[1.0, 0.772]"
84,"['7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2', 'fa63f69f0fdfc50fe92caa22dbe1b4b120807ed2']",services/core/java/com/android/server/audio/AudioService.java,"[(3238, 3239, 2), (3226, 3228, 3)]","        Log.i(TAG, ""setMode(mode = "" + mode + "", callingPackage = "" +
                  callingPackage + "", Process ID: "" + Binder.getCallingPid());
","        Log.i(TAG, ""setMode(mode = "" + mode + "", callingPackage = "" +
                  callingPackage + "", Process ID: "" + Binder.getCallingPid());
        if (DEBUG_MODE) { Log.v(TAG, ""setMode(mode="" + mode + "", callingPackage="" + callingPackage + "")""); }
","        Log.i(TAG, ""setMode(mode = "" + mode + "", callingPackage = "" +
                  callingPackage + "", Process ID: "" + Binder.getCallingPid());
","[1.0, 0.578]"
85,"['7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2', 'fa63f69f0fdfc50fe92caa22dbe1b4b120807ed2']",services/core/java/com/android/server/audio/BtHelper.java,"[(268, 336, 69), (268, 338, 71)]","    //SCO device tracking for TWSPLUS device
    private HashMap<BluetoothDevice, Integer> mScoClientDevices =
                                          new HashMap<BluetoothDevice, Integer>();

    private void updateTwsPlusScoState(BluetoothDevice device, Integer state) {
        if (mScoClientDevices.containsKey(device)) {
            Integer prevState = mScoClientDevices.get(device);
            Log.i(TAG, ""updateTwsPlusScoState: prevState: "" + prevState + ""state: "" + state);
            if (state != prevState) {
                mScoClientDevices.remove(device);
                mScoClientDevices.put(device, state);
            }
        } else {
            mScoClientDevices.put(device, state);
        }
    }

    private boolean isAudioPathUp() {
        boolean ret = false;
        Iterator it = mScoClientDevices.entrySet().iterator();
        for (Integer value :  mScoClientDevices.values()) {
            if (value == BluetoothHeadset.STATE_AUDIO_CONNECTED) {
                ret = true;
                break;
            }
        }
        Log.d(TAG, ""isAudioPathUp returns"" + ret);
        return ret;
    }

    private boolean checkAndUpdatTwsPlusScoState(Intent intent, Integer state) {
        //default ret value is true
        //so that legacy devices fallsthru
        boolean ret = true;
        BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
        Log.i(TAG, ""device:"" + device);

        if (device == null) {
           Log.e(TAG, ""checkAndUpdatTwsPlusScoState: device is null"");
           //intent cant have device has null
           //in case it is treat them as non-twsplus case and return true
           return ret;
        }

        if (device.isTwsPlusDevice()) {
            if (state == BluetoothHeadset.STATE_AUDIO_CONNECTED) {
                //if adding new Device
                //check if there is no device already connected
                if (isAudioPathUp()) {
                    Log.i(TAG, ""No need to bringup audio-path"");
                    ret = false;
                }
                //Update the States now
                updateTwsPlusScoState(device, state);
            } else {
                //For disconnect cases, update the state first
                updateTwsPlusScoState(device, state);
                //if deleting new Device
                //check if all devices are disconnected
                if (isAudioPathUp()) {
                    Log.i(TAG, ""not good to tear down audio-path"");
                    ret = false;
                }
            }
        }
        Log.i(TAG, ""checkAndUpdatTwsPlusScoState returns "" + ret);
        return ret;
    }

","    //SCO device tracking for TWSPLUS device
    private HashMap<BluetoothDevice, Integer> mScoClientDevices =
                                          new HashMap<BluetoothDevice, Integer>();

    private void updateTwsPlusScoState(BluetoothDevice device, Integer state) {
        if (mScoClientDevices.containsKey(device)) {
            Integer prevState = mScoClientDevices.get(device);
            Log.i(TAG, ""updateTwsPlusScoState: prevState: "" + prevState + ""state: "" + state);
            if (state != prevState) {
                mScoClientDevices.remove(device);
                mScoClientDevices.put(device, state);
            }
        } else {
            mScoClientDevices.put(device, state);
        }
    }

    private boolean isAudioPathUp() {
        boolean ret = false;
        Iterator it = mScoClientDevices.entrySet().iterator();
        for (Integer value :  mScoClientDevices.values()) {
            if (value == BluetoothHeadset.STATE_AUDIO_CONNECTED) {
                ret = true;
                break;
            }
        }
        Log.d(TAG, ""isAudioPathUp returns"" + ret);
        return ret;
    }

    private boolean checkAndUpdatTwsPlusScoState(Intent intent, Integer state) {
        //default ret value is true
        //so that legacy devices fallsthru
        boolean ret = true;
        BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
        Log.i(TAG, ""device:"" + device);

        if (device == null) {
           Log.e(TAG, ""checkAndUpdatTwsPlusScoState: device is null"");
           //intent cant have device has null
           //in case it is treat them as non-twsplus case and return true
           return ret;
        }

        if (device.isTwsPlusDevice()) {
            if (state == BluetoothHeadset.STATE_AUDIO_CONNECTED) {
                //if adding new Device
                //check if there is no device already connected
                if (isAudioPathUp()) {
                    Log.i(TAG, ""No need to bringup audio-path"");
                    ret = false;
                }
                //Update the States now
                updateTwsPlusScoState(device, state);
            } else {
                //For disconnect cases, update the state first
                updateTwsPlusScoState(device, state);
                //if deleting new Device
                //check if all devices are disconnected
                if (isAudioPathUp()) {
                    Log.i(TAG, ""not good to tear down audio-path"");
                    ret = false;
                }
            }
        }
        Log.i(TAG, ""checkAndUpdatTwsPlusScoState returns "" + ret);
        return ret;
    }

    // @GuardedBy(""AudioDeviceBroker.mSetModeLock"")
    @GuardedBy(""AudioDeviceBroker.mDeviceStateLock"")
","    //SCO device tracking for TWSPLUS device
    private HashMap<BluetoothDevice, Integer> mScoClientDevices =
                                          new HashMap<BluetoothDevice, Integer>();

    private void updateTwsPlusScoState(BluetoothDevice device, Integer state) {
        if (mScoClientDevices.containsKey(device)) {
            Integer prevState = mScoClientDevices.get(device);
            Log.i(TAG, ""updateTwsPlusScoState: prevState: "" + prevState + ""state: "" + state);
            if (state != prevState) {
                mScoClientDevices.remove(device);
                mScoClientDevices.put(device, state);
            }
        } else {
            mScoClientDevices.put(device, state);
        }
    }

    private boolean isAudioPathUp() {
        boolean ret = false;
        Iterator it = mScoClientDevices.entrySet().iterator();
        for (Integer value :  mScoClientDevices.values()) {
            if (value == BluetoothHeadset.STATE_AUDIO_CONNECTED) {
                ret = true;
                break;
            }
        }
        Log.d(TAG, ""isAudioPathUp returns"" + ret);
        return ret;
    }

    private boolean checkAndUpdatTwsPlusScoState(Intent intent, Integer state) {
        //default ret value is true
        //so that legacy devices fallsthru
        boolean ret = true;
        BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
        Log.i(TAG, ""device:"" + device);

        if (device == null) {
           Log.e(TAG, ""checkAndUpdatTwsPlusScoState: device is null"");
           //intent cant have device has null
           //in case it is treat them as non-twsplus case and return true
           return ret;
        }

        if (device.isTwsPlusDevice()) {
            if (state == BluetoothHeadset.STATE_AUDIO_CONNECTED) {
                //if adding new Device
                //check if there is no device already connected
                if (isAudioPathUp()) {
                    Log.i(TAG, ""No need to bringup audio-path"");
                    ret = false;
                }
                //Update the States now
                updateTwsPlusScoState(device, state);
            } else {
                //For disconnect cases, update the state first
                updateTwsPlusScoState(device, state);
                //if deleting new Device
                //check if all devices are disconnected
                if (isAudioPathUp()) {
                    Log.i(TAG, ""not good to tear down audio-path"");
                    ret = false;
                }
            }
        }
        Log.i(TAG, ""checkAndUpdatTwsPlusScoState returns "" + ret);
        return ret;
    }

","[1.0, 0.962]"
86,"['7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2', 'fa63f69f0fdfc50fe92caa22dbe1b4b120807ed2']",services/core/java/com/android/server/audio/AudioDeviceBroker.java,"[(221, 223, 3), (220, 223, 4)]","            if (AudioService.DEBUG_SCO) {
                Log.i(TAG, ""In isSpeakerphoneOn(), mForcedUseForCommExt: "" +mForcedUseForCommExt);
            }
","        synchronized (mDeviceStateLock) {
            if (AudioService.DEBUG_SCO) {
                Log.i(TAG, ""In isSpeakerphoneOn(), mForcedUseForCommExt: "" +mForcedUseForCommExt);
            }
","            if (AudioService.DEBUG_SCO) {
                Log.i(TAG, ""In isSpeakerphoneOn(), mForcedUseForCommExt: "" +mForcedUseForCommExt);
            }
","[1.0, 0.787]"
87,"['7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2', 'fa63f69f0fdfc50fe92caa22dbe1b4b120807ed2']",services/core/java/com/android/server/audio/AudioDeviceBroker.java,"[(339, 342, 4), (341, 345, 5)]","            if (AudioService.DEBUG_SCO) {
                Log.i(TAG, ""In isBluetoothScoOnForApp(), mForcedUseForCommExt: "" +
                      mForcedUseForCommExt);
            }
","        synchronized (mDeviceStateLock) {
            if (AudioService.DEBUG_SCO) {
                Log.i(TAG, ""In isBluetoothScoOnForApp(), mForcedUseForCommExt: "" +
                      mForcedUseForCommExt);
            }
","            if (AudioService.DEBUG_SCO) {
                Log.i(TAG, ""In isBluetoothScoOnForApp(), mForcedUseForCommExt: "" +
                      mForcedUseForCommExt);
            }
","[1.0, 0.814]"
88,"['7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2', 'fa63f69f0fdfc50fe92caa22dbe1b4b120807ed2']",services/core/java/com/android/server/audio/AudioDeviceBroker.java,"[(348, 350, 3), (351, 354, 4)]","        if (AudioService.DEBUG_SCO) {
            Log.i(TAG, ""setBluetoothScoOn: "" + on + "" "" + eventSource);
        }
","        if (AudioService.DEBUG_SCO) {
            Log.i(TAG, ""setBluetoothScoOn: "" + on + "" "" + eventSource);
        }
        synchronized (mDeviceStateLock) {
","        if (AudioService.DEBUG_SCO) {
            Log.i(TAG, ""setBluetoothScoOn: "" + on + "" "" + eventSource);
        }
","[1.0, 0.741]"
89,"['7c6cc72e18cc1df5205fd2bc47664e6cc2534ad2', 'fa63f69f0fdfc50fe92caa22dbe1b4b120807ed2']",packages/SystemUI/src/com/android/systemui/statusbar/phone/KeyguardBottomAreaView.java,"[(120, 121, 2), (121, 121, 1)]","    private EmergencyCarrierArea mEmergencyCarrierArea;
    private final UnlockMethodCache mUnlockMethodCache;
","    private EmergencyCarrierArea mEmergencyCarrierArea;
","    private EmergencyCarrierArea mEmergencyCarrierArea;
","[0.5, 1.0]"
90,"['8faa0d981413f18b2468dde1b1fe71e248df0df1', 'af02bd5317cc0cced0a7646d5bbf407a181dda9c']",services/core/java/com/android/server/connectivity/NetworkAgentInfo.java,"[(19, 22, 4), (19, 21, 3)]","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED;
import static android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED;
","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED;
","import static android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET;
import static android.net.NetworkCapabilities.NET_CAPABILITY_MMS;
import static android.net.NetworkCapabilities.NET_CAPABILITY_","[0.7, 0.947]"
91,"['8faa0d981413f18b2468dde1b1fe71e248df0df1', 'b6292e3e1ba3616eac1032737a91925391d94b92']",services/core/java/com/android/server/Watchdog.java,"[(593, 594, 2), (592, 595, 4)]","                            initialStack = ActivityManagerService.dumpStackTraces(pids,
                                    null, null, getInterestingNativePids());
","                            ArrayList<Integer> pids = new ArrayList<Integer>();
                            pids.add(Process.myPid());
                            initialStack = ActivityManagerService.dumpStackTraces(pids,
                                    null, null, getInterestingNativePids(), null);
","                            initialStack = ActivityManagerService.dumpStackTraces(pids,
                                    null, null, getInterestingNativePids()","[0.982, 0.529]"
92,"['8faa0d981413f18b2468dde1b1fe71e248df0df1', 'd28a4f6b38dbab44128b4319f665dd65c3e4ec2c']",services/core/java/com/android/server/am/ProcessRecord.java,"[(70, 70, 1), (69, 69, 1)]","import com.android.server.Watchdog;
","import com.android.server.Watchdog;
","import com.android.server.Watchdog;
","[1.0, 1.0]"
93,"['8faa0d981413f18b2468dde1b1fe71e248df0df1', 'f6f595c8a4c17ed2347482c43e2cccc89531224e']",wifi/java/android/net/wifi/WifiEnterpriseConfig.java,"[(96, 97, 2), (97, 97, 1)]","    /** @hide */
    public static final String KEY_SIMNUM          = ""sim_num"";
","    public static final String KEY_SIMNUM          = ""sim_num"";
","    public static final String KEY_SIMNUM          = ""sim_num"";
","[0.79, 1.0]"
94,"['a33382db0bb0bc29bab84f1e5ee36d682bea593e', 'df73284a33506ba26aadbd20a1dbd01353820200']",services/core/java/com/android/server/BluetoothManagerService.java,"[(1843, 1853, 11), (1888, 1901, 14)]","                        // Wait for (a) is required only when Bluetooth is being
                        // turned off.
                        int state;
                        try {
                            state = mBluetooth.getState();
                        } catch (RemoteException e) {
                            Slog.e(TAG, ""getState()"", e);
                            break;
                        }
                        if(state == BluetoothAdapter.STATE_TURNING_OFF || state == BluetoothAdapter.STATE_BLE_TURNING_OFF)
                            waitForMonitoredOnOff(false, true);
","                        // Wait for (a) is required only when Bluetooth is being
                        // turned off.
                        int state;
                        try {
                            state = mBluetooth.getState();
                        } catch (RemoteException e) {
                            Slog.e(TAG, ""getState()"", e);
                            break;
                        }
                        if(state == BluetoothAdapter.STATE_TURNING_OFF || state == BluetoothAdapter.STATE_BLE_TURNING_OFF)
                            waitForState(Set.of(BluetoothAdapter.STATE_OFF));
                        Message restartMsg =
                                mHandler.obtainMessage(MESSAGE_RESTART_BLUETOOTH_SERVICE);
                        mHandler.sendMessageDelayed(restartMsg, getServiceRestartMs());
","                        // Wait for (a) is required only when Bluetooth is being
                        // turned off.
                        int state;
                        try {
                            state = mBluetooth.getState();
                        } catch (RemoteException e) {
                            Slog.e(TAG, ""getState()"", e);
                            break;
                        }
                        if(state == BluetoothAdapter.STATE_TURNING_OFF || state == BluetoothAdapter.STATE_BLE_TURNING_OFF)
                            waitFor","[0.952, 0.683]"
95,"['a33382db0bb0bc29bab84f1e5ee36d682bea593e', 'df73284a33506ba26aadbd20a1dbd01353820200']",services/core/java/com/android/server/BluetoothManagerService.java,"[(1866, 1885, 20), (1911, 1927, 17)]","                        waitForMonitoredOnOff(true, false);

                        try {
                            mBluetoothLock.readLock().lock();
                            if((mBluetooth.getState() == BluetoothAdapter.STATE_BLE_ON) &&
                                    ((isBluetoothPersistedStateOnBluetooth() ||
                                    !isBleAppPresent()))) {
                                Message disableMsg =
                                        mHandler.obtainMessage(MESSAGE_DISABLE);
                                mHandler.sendMessageDelayed(disableMsg, 100);
                                break;
                            }
                        } catch (RemoteException e) {
                            Slog.e(TAG, ""Unable to initiate disable"", e);
                        } finally {
                            mBluetoothLock.readLock().unlock();
                        }
                        mEnable = false;
                        handleDisable();
                        waitForMonitoredOnOff(false, false);
","                        waitForState(Set.of(BluetoothAdapter.STATE_ON));

                        try {
                            mBluetoothLock.readLock().lock();
                            if((mBluetooth.getState() == BluetoothAdapter.STATE_BLE_ON) &&
                                    ((isBluetoothPersistedStateOnBluetooth() ||
                                    !isBleAppPresent()))) {
                                Message disableMsg =
                                        mHandler.obtainMessage(MESSAGE_DISABLE);
                                mHandler.sendMessageDelayed(disableMsg, 100);
                                break;
                            }
                        } catch (RemoteException e) {
                            Slog.e(TAG, ""Unable to initiate disable"", e);
                        } finally {
                            mBluetoothLock.readLock().unlock();
                        }
",");

                        try {
                            mBluetoothLock.readLock().lock();
                            if((mBluetooth.getState() == BluetoothAdapter.STATE_BLE_ON) &&
                                    ((isBluetoothPersistedStateOnBluetooth() ||
                                    !isBleAppPresent()))) {
                                Message disableMsg =
                                        mHandler.obtainMessage(MESSAGE_DISABLE);
                                mHandler.sendMessageDelayed(disableMsg, 100);
                                break;
                            }
                        } catch (RemoteException e) {
                            Slog.e(TAG, ""Unable to initiate disable"", e);
                        } finally {
                            mBluetoothLock.readLock().unlock();
                        }
","[0.812, 0.925]"
96,"['a9736185db896fe2edde0281d71102b35327b7f8', 'd28a4f6b38dbab44128b4319f665dd65c3e4ec2c']",core/java/android/app/ActivityManagerInternal.java,"[(431, 432, 2), (371, 372, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
97,"['a9736185db896fe2edde0281d71102b35327b7f8', 'ddc3dc79034f4570388245270b50ddad964c11f0']",packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarPolicy.java,"[(706, 719, 14), (718, 747, 30)]","    private void updateHotspotIcon(int standard) {
        if (standard == ScanResult.WIFI_STANDARD_11AX) {
            mIconController.setIcon(mSlotHotspot, R.drawable.stat_sys_wifi_6_hotspot,
                mResources.getString(R.string.accessibility_status_bar_hotspot));
        } else if (standard == ScanResult.WIFI_STANDARD_11AC) {
            mIconController.setIcon(mSlotHotspot, R.drawable.stat_sys_wifi_5_hotspot,
                mResources.getString(R.string.accessibility_status_bar_hotspot));
        } else if (standard == ScanResult.WIFI_STANDARD_11N) {
            mIconController.setIcon(mSlotHotspot, R.drawable.stat_sys_wifi_4_hotspot,
                mResources.getString(R.string.accessibility_status_bar_hotspot));
        } else {
            mIconController.setIcon(mSlotHotspot, R.drawable.stat_sys_hotspot,
                mResources.getString(R.string.accessibility_status_bar_hotspot));
        }
","
    @Override
    public void onMediaDataLoaded(String key, MediaData data) {
        updateMediaIcon();
    }

    @Override
    public void onMediaDataRemoved(String key) {
        updateMediaIcon();
    }

    private void updateMediaIcon() {
        mIconController.setIconVisibility(mSlotMedia, mMediaDataManager.hasActiveMedia());
    }

    private void updateHotspotIcon(int standard) {
        if (standard == ScanResult.WIFI_STANDARD_11AX) {
            mIconController.setIcon(mSlotHotspot, R.drawable.stat_sys_wifi_6_hotspot,
                mResources.getString(R.string.accessibility_status_bar_hotspot));
        } else if (standard == ScanResult.WIFI_STANDARD_11AC) {
            mIconController.setIcon(mSlotHotspot, R.drawable.stat_sys_wifi_5_hotspot,
                mResources.getString(R.string.accessibility_status_bar_hotspot));
        } else if (standard == ScanResult.WIFI_STANDARD_11N) {
            mIconController.setIcon(mSlotHotspot, R.drawable.stat_sys_wifi_4_hotspot,
                mResources.getString(R.string.accessibility_status_bar_hotspot));
        } else {
            mIconController.setIcon(mSlotHotspot, R.drawable.stat_sys_hotspot,
                mResources.getString(R.string.accessibility_status_bar_hotspot));
        }
    }
","    private void updateHotspotIcon(int standard) {
        if (standard == ScanResult.WIFI_STANDARD_11AX) {
            mIconController.setIcon(mSlotHotspot, R.drawable.stat_sys_wifi_6_hotspot,
                mResources.getString(R.string.accessibility_status_bar_hotspot));
        } else if (standard == ScanResult.WIFI_STANDARD_11AC) {
            mIconController.setIcon(mSlotHotspot, R.drawable.stat_sys_wifi_5_hotspot,
                mResources.getString(R.string.accessibility_status_bar_hotspot));
        } else if (standard == ScanResult.WIFI_STANDARD_11N) {
            mIconController.setIcon(mSlotHotspot, R.drawable.stat_sys_wifi_4_hotspot,
                mResources.getString(R.string.accessibility_status_bar_hotspot));
        } else {
            mIconController.setIcon(mSlotHotspot, R.drawable.stat_sys_hotspot,
                mResources.getString(R.string.accessibility_status_bar_hotspot));
        }
","[1.0, 0.725]"
98,"['a9736185db896fe2edde0281d71102b35327b7f8', 'df73284a33506ba26aadbd20a1dbd01353820200']",core/java/android/app/ActivityManagerInternal.java,"[(431, 432, 2), (398, 399, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
99,"['af02bd5317cc0cced0a7646d5bbf407a181dda9c', 'd28a4f6b38dbab44128b4319f665dd65c3e4ec2c']",telecomm/java/android/telecom/ConnectionService.java,"[(198, 199, 2), (191, 192, 2)]","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","    //Proprietary values starts after this.
    private static final int MSG_ADD_PARTICIPANT_WITH_CONFERENCE = 40;
","[1.0, 1.0]"
100,"['af02bd5317cc0cced0a7646d5bbf407a181dda9c', 'fa63f69f0fdfc50fe92caa22dbe1b4b120807ed2']",services/core/java/com/android/server/audio/AudioService.java,"[(3473, 3475, 3), (3226, 3228, 3)]","        Log.i(TAG, ""setMode(mode = "" + mode + "", callingPackage = "" +
                  callingPackage + "", Process ID: "" + Binder.getCallingPid());
        if (DEBUG_MODE) { Log.v(TAG, ""setMode(mode="" + mode + "", callingPackage="" + callingPackage + "")""); }
","        Log.i(TAG, ""setMode(mode = "" + mode + "", callingPackage = "" +
                  callingPackage + "", Process ID: "" + Binder.getCallingPid());
        if (DEBUG_MODE) { Log.v(TAG, ""setMode(mode="" + mode + "", callingPackage="" + callingPackage + "")""); }
","        Log.i(TAG, ""setMode(mode = "" + mode + "", callingPackage = "" +
                  callingPackage + "", Process ID: "" + Binder.getCallingPid());
        if (DEBUG_MODE) { Log.v(TAG, ""setMode(mode="" + mode + "", callingPackage="" + callingPackage + "")""); }
","[1.0, 1.0]"
101,"['b6292e3e1ba3616eac1032737a91925391d94b92', 'edb6252578f9b76151e5125a7fb1b16823a68418']",packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java,"[(1292, 1293, 2), (1256, 1257, 2)]","                mStatusBarKeyguardViewManagerLazy.get().setOccluded(isOccluded,
                        (Dependency.get(KeyguardUpdateMonitor.class).isSimPinSecure()?false:animate)
","                mStatusBarKeyguardViewManager.setOccluded(isOccluded,
                        (Dependency.get(KeyguardUpdateMonitor.class).isSimPinSecure()?false:animate)
",".setOccluded(isOccluded,
                        (Dependency.get(KeyguardUpdateMonitor.class).isSimPinSecure()?false:animate)
","[0.696, 0.737]"
102,"['bb9ded46832af38a453b78b92ad2de32ef1cf845', 'fa63f69f0fdfc50fe92caa22dbe1b4b120807ed2']",services/core/java/com/android/server/audio/AudioService.java,"[(3634, 3637, 4), (3198, 3203, 6)]","            if ((newModeOwnerPid != oldModeOwnerPid) && (newModeOwnerPid != 0)) {
                Log.i(TAG, ""In binderDied(), calling disconnectBluetoothSco()"");
                mDeviceBroker.postDisconnectBluetoothSco(newModeOwnerPid);
            }
","            }
            // when entering RINGTONE, IN_CALL or IN_COMMUNICATION mode, clear all
            // SCO connections not started by the application changing the mode when pid changes
            if ((newModeOwnerPid != oldModeOwnerPid) && (newModeOwnerPid != 0)) {
                Log.i(TAG, ""In binderDied(), calling disconnectBluetoothSco()"");
                mDeviceBroker.postDisconnectBluetoothSco(newModeOwnerPid);
","            if ((newModeOwnerPid != oldModeOwnerPid) && (newModeOwnerPid != 0)) {
                Log.i(TAG, ""In binderDied(), calling disconnectBluetoothSco()"");
                mDeviceBroker.postDisconnectBluetoothSco(newModeOwnerPid);
","[0.944, 0.551]"
103,"['d28a4f6b38dbab44128b4319f665dd65c3e4ec2c', 'df73284a33506ba26aadbd20a1dbd01353820200']",core/java/android/app/ActivityManagerInternal.java,"[(371, 372, 2), (398, 399, 2)]","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","    // Starts a process as empty.
    public abstract int startActivityAsUserEmpty(Bundle options);
","[1.0, 1.0]"
104,"['d28a4f6b38dbab44128b4319f665dd65c3e4ec2c', 'edb6252578f9b76151e5125a7fb1b16823a68418']",packages/SystemUI/src/com/android/systemui/statusbar/policy/MobileSignalController.java,"[(36, 39, 4), (29, 32, 4)]","import android.telephony.CellSignalStrengthNr;
import android.telephony.ims.ImsMmTelManager;
import android.telephony.ims.ImsReasonInfo;
import android.telephony.ims.feature.MmTelFeature;
","import android.telephony.CellSignalStrengthNr;
import android.telephony.ims.ImsMmTelManager;
import android.telephony.ims.ImsReasonInfo;
import android.telephony.ims.feature.MmTelFeature;
","import android.telephony.CellSignalStrengthNr;
import android.telephony.ims.ImsMmTelManager;
import android.telephony.ims.ImsReasonInfo;
import android.telephony.ims.feature.MmTelFeature;
","[1.0, 1.0]"
105,"['dfd2f7fed77160af2c57edfa20f1768b42aaa8da', 'fa63f69f0fdfc50fe92caa22dbe1b4b120807ed2']",services/core/java/com/android/server/am/ActivityManagerService.java,"[(18884, 18885, 2), (18100, 18105, 6)]","        public int startActivityAsUserEmpty(Bundle options) {
            return ActivityManagerService.this.startActivityAsUserEmpty(options);
","        public int startActivityAsUserEmpty(Bundle options) {
            return ActivityManagerService.this.startActivityAsUserEmpty(options);
        }

        @Override
        public void killForegroundAppsForUser(int userHandle) {
","        public int startActivityAsUserEmpty(Bundle options) {
            return ActivityManagerService.this.startActivityAsUserEmpty(options);
","[1.0, 0.608]"
